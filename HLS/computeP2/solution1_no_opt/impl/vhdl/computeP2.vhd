-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity computeP2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    oil_space : IN STD_LOGIC_VECTOR (7 downto 0);
    P1 : IN STD_LOGIC_VECTOR (7 downto 0);
    P2_i : IN STD_LOGIC_VECTOR (7 downto 0);
    P2_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    P2_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of computeP2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "computeP2_computeP2,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=0,HLS_SYN_FF=3202,HLS_SYN_LUT=8834,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4EC0 : STD_LOGIC_VECTOR (14 downto 0) := "100111011000000";
    constant ap_const_lv15_D20 : STD_LOGIC_VECTOR (14 downto 0) := "000110100100000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_4EC : STD_LOGIC_VECTOR (10 downto 0) := "10011101100";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_486 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal add_ln22_fu_491_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln22_reg_1460 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_47_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_47_reg_1468 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln22_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln31_fu_533_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln31_reg_1473 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln37_fu_539_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_reg_1478 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_fu_542_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_reg_1483 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln32_fu_587_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln32_reg_1491 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln26_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_fu_593_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln122_reg_1496 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal temp_addr_reg_1504 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln122_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_1_fu_632_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln125_1_reg_1514 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln125_3_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_15_reg_1524 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_16_fu_656_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_16_reg_1530 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_fu_749_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_reg_1535 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln37_fu_757_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln37_reg_1540 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal empty_51_fu_793_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_51_reg_1548 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln37_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_799_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln41_reg_1553 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sub_ln44_fu_844_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln44_reg_1561 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln41_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_1_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln122_1_reg_1566 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal temp_addr_1_reg_1574 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln122_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_3_fu_880_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln125_3_reg_1579 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln125_6_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_17_reg_1589 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_18_fu_903_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_18_reg_1595 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_1_fu_996_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_1_reg_1600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal empty_55_fu_1004_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln51_fu_1021_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln51_reg_1613 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln51_fu_1027_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln51_reg_1618 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_58_fu_1061_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_58_reg_1626 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_1067_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_reg_1631 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal sub_ln58_fu_1112_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln58_reg_1639 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln55_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln58_2_fu_1177_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln58_2_reg_1644 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_60_fu_1183_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_60_reg_1649 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal exitcond426_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ptr523_sum_fu_1209_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ptr523_sum_reg_1662 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln63_fu_1218_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln63_reg_1667 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln63_1_fu_1224_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln63_1_reg_1672 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln63_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_reg_1677 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln67_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1694 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1440_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln70_reg_1698 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal empty_65_fu_1255_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal add_ln122_2_fu_1272_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln122_2_reg_1716 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln122_2_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_1289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln125_4_fu_1303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln125_4_reg_1734 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln125_9_fu_1309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_19_reg_1744 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_20_fu_1327_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_20_reg_1750 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_2_fu_1420_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal add_ln88_fu_1434_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal icmp_ln88_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal vec_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal vec_1_ce0 : STD_LOGIC;
    signal vec_1_we0 : STD_LOGIC;
    signal vec_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tempt_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tempt_ce0 : STD_LOGIC;
    signal tempt_we0 : STD_LOGIC;
    signal tempt_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempt_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal vec_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal vec_ce0 : STD_LOGIC;
    signal vec_we0 : STD_LOGIC;
    signal vec_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal vec_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_generic_remainder_double_s_fu_452_ap_start : STD_LOGIC;
    signal grp_generic_remainder_double_s_fu_452_ap_done : STD_LOGIC;
    signal grp_generic_remainder_double_s_fu_452_ap_idle : STD_LOGIC;
    signal grp_generic_remainder_double_s_fu_452_ap_ready : STD_LOGIC;
    signal grp_generic_remainder_double_s_fu_452_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_linear_combination_fu_457_ap_start : STD_LOGIC;
    signal grp_linear_combination_fu_457_ap_done : STD_LOGIC;
    signal grp_linear_combination_fu_457_ap_idle : STD_LOGIC;
    signal grp_linear_combination_fu_457_ap_ready : STD_LOGIC;
    signal grp_linear_combination_fu_457_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_linear_combination_fu_457_out_r_ce0 : STD_LOGIC;
    signal grp_linear_combination_fu_457_out_r_we0 : STD_LOGIC;
    signal grp_linear_combination_fu_457_out_r_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_linear_combination_2_fu_465_ap_start : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_ap_done : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_ap_idle : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_ap_ready : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_vecs_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_linear_combination_2_fu_465_vecs_ce0 : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_linear_combination_2_fu_465_out_r_ce0 : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_out_r_we0 : STD_LOGIC;
    signal grp_linear_combination_2_fu_465_out_r_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_linear_combination_1_fu_474_ap_start : STD_LOGIC;
    signal grp_linear_combination_1_fu_474_ap_done : STD_LOGIC;
    signal grp_linear_combination_1_fu_474_ap_idle : STD_LOGIC;
    signal grp_linear_combination_1_fu_474_ap_ready : STD_LOGIC;
    signal grp_linear_combination_1_fu_474_out_r : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_combination_1_fu_474_out_r_ap_vld : STD_LOGIC;
    signal grp_linear_combination_1_fu_474_vecs_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_linear_combination_1_fu_474_vecs_ce0 : STD_LOGIC;
    signal i_reg_265 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_276 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_287 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_4_reg_298 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_309 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_320 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal empty_54_reg_331 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond5511_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_353 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_index_reg_364 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_11_reg_375 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_reg_386 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_4_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln63_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_64_reg_408 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal v1_0_i_reg_419 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_430 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_7_reg_441 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_generic_remainder_double_s_fu_452_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_linear_combination_fu_457_ap_start_reg : STD_LOGIC := '0';
    signal grp_linear_combination_2_fu_465_ap_start_reg : STD_LOGIC := '0';
    signal grp_linear_combination_1_fu_474_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln125_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_4_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_1010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ptr584_sum_cast_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ptr523_sum_cast_fu_1214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast13_fu_1261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_3_fu_1278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_483_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_503_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_523_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_fu_558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln32_fu_563_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln32_1_fu_575_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_567_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln32_fu_583_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln122_1_fu_604_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln125_fu_614_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln125_2_fu_628_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln125_1_fu_624_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_660_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_673_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_676_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_690_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_695_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_699_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_669_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_711_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_fu_715_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_721_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln662_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_739_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_769_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_781_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_cast_fu_777_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl13_cast_fu_789_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_fu_805_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln44_fu_815_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_fu_820_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln44_1_fu_832_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1_fu_824_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln44_fu_840_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln122_2_fu_856_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln125_2_fu_866_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln125_5_fu_876_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_1_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_1_fu_907_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_1_fu_920_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_923_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_937_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_929_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_942_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_946_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_i40_cast_cast_cast_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_1_fu_916_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sh_prom_i_i_i_i_i_i40_cast_cast_cast_cast_fu_958_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_2_fu_962_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_10_fu_974_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_968_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln662_1_fu_982_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_986_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_1037_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_1049_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl16_cast_fu_1045_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl17_cast_fu_1057_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_fu_1073_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln58_fu_1083_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln58_fu_1088_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln58_1_fu_1100_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln2_fu_1092_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_fu_1108_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln58_2_fu_1118_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln58_3_fu_1130_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln58_fu_1126_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln58_1_fu_1138_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln58_1_fu_1142_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln58_1_fu_1148_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln58_1_fu_1153_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln58_5_fu_1165_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln58_4_fu_1157_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln58_1_fu_1173_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal loop_index_cast_fu_1189_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ptr584_sum_fu_1199_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln125_8_fu_1299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln125_7_fu_1295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_2_fu_1313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_2_fu_1331_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_2_fu_1344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_2_fu_1347_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_2_fu_1361_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_2_fu_1353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_1366_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_2_fu_1370_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_i62_cast_cast_cast_fu_1378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_2_fu_1340_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal sh_prom_i_i_i_i_i_i62_cast_cast_cast_cast_fu_1382_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_4_fu_1386_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_14_fu_1398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1392_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln662_2_fu_1406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1410_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1440_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1440_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component computeP2_generic_remainder_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component computeP2_linear_combination IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vecs_read : IN STD_LOGIC_VECTOR (7 downto 0);
        coeffs_read : IN STD_LOGIC_VECTOR (7 downto 0);
        len : IN STD_LOGIC_VECTOR (5 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component computeP2_linear_combination_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        coeffs_read : IN STD_LOGIC_VECTOR (7 downto 0);
        vecs_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        vecs_ce0 : OUT STD_LOGIC;
        vecs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        vecs_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component computeP2_linear_combination_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        coeffs_read : IN STD_LOGIC_VECTOR (7 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ap_vld : OUT STD_LOGIC;
        vecs_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        vecs_ce0 : OUT STD_LOGIC;
        vecs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        vecs_offset : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component computeP2_sitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component computeP2_mul_mul_15s_13ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component computeP2_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component computeP2_vec_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    temp_U : component computeP2_temp
    generic map (
        DataWidth => 8,
        AddressRange => 20160,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    vec_1_U : component computeP2_vec_1
    generic map (
        DataWidth => 5,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec_1_address0,
        ce0 => vec_1_ce0,
        we0 => vec_1_we0,
        d0 => grp_linear_combination_fu_457_out_r_d0,
        q0 => vec_1_q0);

    tempt_U : component computeP2_temp
    generic map (
        DataWidth => 8,
        AddressRange => 20160,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempt_address0,
        ce0 => tempt_ce0,
        we0 => tempt_we0,
        d0 => tempt_d0,
        q0 => tempt_q0);

    vec_U : component computeP2_vec_1
    generic map (
        DataWidth => 5,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec_address0,
        ce0 => vec_ce0,
        we0 => vec_we0,
        d0 => vec_d0,
        q0 => vec_q0);

    grp_generic_remainder_double_s_fu_452 : component computeP2_generic_remainder_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_remainder_double_s_fu_452_ap_start,
        ap_done => grp_generic_remainder_double_s_fu_452_ap_done,
        ap_idle => grp_generic_remainder_double_s_fu_452_ap_idle,
        ap_ready => grp_generic_remainder_double_s_fu_452_ap_ready,
        x => reg_486,
        ap_return => grp_generic_remainder_double_s_fu_452_ap_return);

    grp_linear_combination_fu_457 : component computeP2_linear_combination
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_linear_combination_fu_457_ap_start,
        ap_done => grp_linear_combination_fu_457_ap_done,
        ap_idle => grp_linear_combination_fu_457_ap_idle,
        ap_ready => grp_linear_combination_fu_457_ap_ready,
        vecs_read => P1,
        coeffs_read => oil_space,
        len => sub_ln31_reg_1473,
        out_r_address0 => grp_linear_combination_fu_457_out_r_address0,
        out_r_ce0 => grp_linear_combination_fu_457_out_r_ce0,
        out_r_we0 => grp_linear_combination_fu_457_out_r_we0,
        out_r_d0 => grp_linear_combination_fu_457_out_r_d0);

    grp_linear_combination_2_fu_465 : component computeP2_linear_combination_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_linear_combination_2_fu_465_ap_start,
        ap_done => grp_linear_combination_2_fu_465_ap_done,
        ap_idle => grp_linear_combination_2_fu_465_ap_idle,
        ap_ready => grp_linear_combination_2_fu_465_ap_ready,
        coeffs_read => oil_space,
        vecs_address0 => grp_linear_combination_2_fu_465_vecs_address0,
        vecs_ce0 => grp_linear_combination_2_fu_465_vecs_ce0,
        vecs_q0 => tempt_q0,
        vecs_offset => phi_mul_reg_386,
        out_r_address0 => grp_linear_combination_2_fu_465_out_r_address0,
        out_r_ce0 => grp_linear_combination_2_fu_465_out_r_ce0,
        out_r_we0 => grp_linear_combination_2_fu_465_out_r_we0,
        out_r_d0 => grp_linear_combination_2_fu_465_out_r_d0);

    grp_linear_combination_1_fu_474 : component computeP2_linear_combination_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_linear_combination_1_fu_474_ap_start,
        ap_done => grp_linear_combination_1_fu_474_ap_done,
        ap_idle => grp_linear_combination_1_fu_474_ap_idle,
        ap_ready => grp_linear_combination_1_fu_474_ap_ready,
        coeffs_read => oil_space,
        out_r => grp_linear_combination_1_fu_474_out_r,
        out_r_ap_vld => grp_linear_combination_1_fu_474_out_r_ap_vld,
        vecs_address0 => grp_linear_combination_1_fu_474_vecs_address0,
        vecs_ce0 => grp_linear_combination_1_fu_474_vecs_ce0,
        vecs_q0 => tempt_q0,
        vecs_offset => mul_ln70_reg_1698);

    sitodp_32ns_64_6_no_dsp_1_U25 : component computeP2_sitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_483_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_483_p1);

    mul_mul_15s_13ns_15_4_1_U26 : component computeP2_mul_mul_15s_13ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1440_p0,
        din1 => grp_fu_1440_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1440_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_generic_remainder_double_s_fu_452_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_remainder_double_s_fu_452_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_generic_remainder_double_s_fu_452_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_remainder_double_s_fu_452_ap_ready = ap_const_logic_1)) then 
                    grp_generic_remainder_double_s_fu_452_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_linear_combination_1_fu_474_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_linear_combination_1_fu_474_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    grp_linear_combination_1_fu_474_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_linear_combination_1_fu_474_ap_ready = ap_const_logic_1)) then 
                    grp_linear_combination_1_fu_474_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_linear_combination_2_fu_465_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_linear_combination_2_fu_465_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond2_fu_1266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    grp_linear_combination_2_fu_465_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_linear_combination_2_fu_465_ap_ready = ap_const_logic_1)) then 
                    grp_linear_combination_2_fu_465_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_linear_combination_fu_457_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_linear_combination_fu_457_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_552_p2 = ap_const_lv1_0))) then 
                    grp_linear_combination_fu_457_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_linear_combination_fu_457_ap_ready = ap_const_logic_1)) then 
                    grp_linear_combination_fu_457_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_54_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln37_fu_763_p2 = ap_const_lv1_1))) then 
                empty_54_reg_331 <= ap_const_lv15_0;
            elsif (((exitcond5511_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                empty_54_reg_331 <= empty_55_fu_1004_p2;
            end if; 
        end if;
    end process;

    empty_64_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_linear_combination_1_fu_474_ap_done = ap_const_logic_1) and (icmp_ln72_reg_1694 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                empty_64_reg_408 <= ap_const_lv6_0;
            elsif (((exitcond2_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                empty_64_reg_408 <= empty_65_fu_1255_p2;
            end if; 
        end if;
    end process;

    i_10_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                i_10_reg_430 <= add_ln122_2_reg_1716;
            elsif (((grp_linear_combination_2_fu_465_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_10_reg_430 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_11_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1031_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_11_reg_375 <= ap_const_lv3_0;
            elsif (((icmp_ln67_fu_1240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_11_reg_375 <= add_ln63_reg_1667;
            end if; 
        end if;
    end process;

    i_4_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_497_p2 = ap_const_lv1_1))) then 
                i_4_reg_298 <= ap_const_lv6_0;
            elsif (((icmp_ln41_fu_809_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_4_reg_298 <= add_ln37_reg_1540;
            end if; 
        end if;
    end process;

    i_5_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5511_fu_1015_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                i_5_reg_342 <= ap_const_lv3_0;
            elsif (((icmp_ln55_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_5_reg_342 <= add_ln51_reg_1613;
            end if; 
        end if;
    end process;

    i_6_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_linear_combination_fu_457_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_6_reg_287 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_6_reg_287 <= add_ln122_reg_1496;
            end if; 
        end if;
    end process;

    i_7_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_1234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_7_reg_441 <= ap_const_lv11_0;
            elsif (((icmp_ln88_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                i_7_reg_441 <= add_ln88_fu_1434_p2;
            end if; 
        end if;
    end process;

    i_8_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_809_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_8_reg_320 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_8_reg_320 <= add_ln122_1_reg_1566;
            end if; 
        end if;
    end process;

    i_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_265 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_552_p2 = ap_const_lv1_1))) then 
                i_reg_265 <= add_ln22_reg_1460;
            end if; 
        end if;
    end process;

    j_1_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln37_fu_763_p2 = ap_const_lv1_0))) then 
                j_1_reg_309 <= ap_const_lv3_0;
            elsif (((icmp_ln122_1_fu_860_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                j_1_reg_309 <= add_ln41_reg_1553;
            end if; 
        end if;
    end process;

    j_3_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1031_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                j_3_reg_353 <= ap_const_lv6_0;
            elsif (((exitcond426_fu_1193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                j_3_reg_353 <= add_ln55_reg_1631;
            end if; 
        end if;
    end process;

    j_4_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and ((icmp_ln122_2_fu_1283_p2 = ap_const_lv1_1) or (icmp_ln72_reg_1694 = ap_const_lv1_1)))) then 
                j_4_reg_398 <= add_ln67_fu_1289_p2;
            elsif (((icmp_ln63_fu_1234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                j_4_reg_398 <= zext_ln63_fu_1230_p1;
            end if; 
        end if;
    end process;

    j_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_497_p2 = ap_const_lv1_0))) then 
                j_reg_276 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln122_fu_608_p2 = ap_const_lv1_1))) then 
                j_reg_276 <= add_ln26_reg_1483;
            end if; 
        end if;
    end process;

    loop_index_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                loop_index_reg_364 <= empty_60_reg_1649;
            elsif (((icmp_ln55_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                loop_index_reg_364 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1031_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                phi_mul_reg_386 <= ap_const_lv15_0;
            elsif (((icmp_ln67_fu_1240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                phi_mul_reg_386 <= add_ln63_1_reg_1672;
            end if; 
        end if;
    end process;

    v1_0_i_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                v1_0_i_reg_419 <= val_2_fu_1420_p3;
            elsif (((grp_linear_combination_2_fu_465_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                v1_0_i_reg_419 <= P2_i;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln122_1_reg_1566 <= add_ln122_1_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_reg_1694 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                add_ln122_2_reg_1716 <= add_ln122_2_fu_1272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln122_reg_1496 <= add_ln122_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln125_1_reg_1514 <= add_ln125_1_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln125_3_reg_1579 <= add_ln125_3_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                add_ln125_4_reg_1734 <= add_ln125_4_fu_1303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln22_reg_1460 <= add_ln22_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln26_reg_1483 <= add_ln26_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln37_reg_1540 <= add_ln37_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln41_reg_1553 <= add_ln41_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln51_reg_1613 <= add_ln51_fu_1021_p2;
                    zext_ln51_reg_1618(2 downto 0) <= zext_ln51_fu_1027_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln55_reg_1631 <= add_ln55_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln63_1_reg_1672 <= add_ln63_1_fu_1224_p2;
                add_ln63_reg_1667 <= add_ln63_fu_1218_p2;
                    zext_ln63_reg_1677(2 downto 0) <= zext_ln63_fu_1230_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond426_fu_1193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                add_ptr523_sum_reg_1662 <= add_ptr523_sum_fu_1209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_497_p2 = ap_const_lv1_0))) then
                    empty_47_reg_1468(9 downto 1) <= empty_47_fu_527_p2(9 downto 1);
                sub_ln31_reg_1473 <= sub_ln31_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln37_fu_763_p2 = ap_const_lv1_0))) then
                    empty_51_reg_1548(9 downto 1) <= empty_51_fu_793_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1031_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    empty_58_reg_1626(9 downto 3) <= empty_58_fu_1061_p2(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                empty_60_reg_1649 <= empty_60_fu_1183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_1240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                icmp_ln72_reg_1694 <= icmp_ln72_fu_1250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                mul_ln70_reg_1698 <= grp_fu_1440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_486 <= grp_fu_483_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_552_p2 = ap_const_lv1_0))) then
                    sub_ln32_reg_1491(14 downto 2) <= sub_ln32_fu_587_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_809_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    sub_ln44_reg_1561(14 downto 2) <= sub_ln44_fu_844_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    sub_ln58_2_reg_1644(14 downto 2) <= sub_ln58_2_fu_1177_p2(14 downto 2);
                    sub_ln58_reg_1639(14 downto 2) <= sub_ln58_fu_1112_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_1_fu_860_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                temp_addr_1_reg_1574 <= zext_ln125_4_fu_871_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln122_fu_608_p2 = ap_const_lv1_0))) then
                temp_addr_reg_1504 <= zext_ln125_fu_619_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_15_reg_1524 <= data_V_fu_642_p1(62 downto 52);
                tmp_16_reg_1530 <= tmp_16_fu_656_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_17_reg_1589 <= data_V_1_fu_889_p1(62 downto 52);
                tmp_18_reg_1595 <= tmp_18_fu_903_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_19_reg_1744 <= data_V_2_fu_1313_p1(62 downto 52);
                tmp_20_reg_1750 <= tmp_20_fu_1327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                val_1_reg_1600 <= val_1_fu_996_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                val_reg_1535 <= val_fu_749_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_497_p2 = ap_const_lv1_1))) then
                    zext_ln37_reg_1478(7 downto 0) <= zext_ln37_fu_539_p1(7 downto 0);
            end if;
        end if;
    end process;
    empty_47_reg_1468(0) <= '0';
    zext_ln37_reg_1478(8) <= '0';
    sub_ln32_reg_1491(1 downto 0) <= "00";
    empty_51_reg_1548(0) <= '0';
    sub_ln44_reg_1561(1 downto 0) <= "00";
    zext_ln51_reg_1618(9 downto 3) <= "0000000";
    empty_58_reg_1626(2 downto 0) <= "000";
    sub_ln58_reg_1639(1 downto 0) <= "00";
    sub_ln58_2_reg_1644(1 downto 0) <= "00";
    zext_ln63_reg_1677(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_497_p2, ap_CS_fsm_state3, icmp_ln26_fu_552_p2, ap_CS_fsm_state5, icmp_ln122_fu_608_p2, ap_CS_fsm_state14, ap_CS_fsm_state17, icmp_ln37_fu_763_p2, ap_CS_fsm_state18, icmp_ln41_fu_809_p2, ap_CS_fsm_state19, icmp_ln122_1_fu_860_p2, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state32, icmp_ln51_fu_1031_p2, ap_CS_fsm_state33, icmp_ln55_fu_1077_p2, ap_CS_fsm_state34, exitcond426_fu_1193_p2, ap_CS_fsm_state36, ap_CS_fsm_state37, icmp_ln67_fu_1240_p2, icmp_ln72_reg_1694, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, icmp_ln122_2_fu_1283_p2, ap_CS_fsm_state53, ap_CS_fsm_state55, icmp_ln88_fu_1428_p2, grp_generic_remainder_double_s_fu_452_ap_done, grp_linear_combination_fu_457_ap_done, grp_linear_combination_2_fu_465_ap_done, grp_linear_combination_1_fu_474_ap_done, ap_CS_fsm_state4, exitcond5511_fu_1015_p2, icmp_ln63_fu_1234_p2, exitcond2_fu_1266_p2, ap_CS_fsm_state41)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_497_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_linear_combination_fu_457_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln122_fu_608_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_generic_remainder_double_s_fu_452_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln37_fu_763_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln41_fu_809_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln122_1_fu_860_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_generic_remainder_double_s_fu_452_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state31 => 
                if (((exitcond5511_fu_1015_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln51_fu_1031_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln55_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((exitcond426_fu_1193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln63_fu_1234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln67_fu_1240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_linear_combination_1_fu_474_ap_done = ap_const_logic_1) and (icmp_ln72_reg_1694 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                elsif (((grp_linear_combination_1_fu_474_ap_done = ap_const_logic_1) and (icmp_ln72_reg_1694 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((exitcond2_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((grp_linear_combination_2_fu_465_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and ((icmp_ln122_2_fu_1283_p2 = ap_const_lv1_1) or (icmp_ln72_reg_1694 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_generic_remainder_double_s_fu_452_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state55 => 
                if (((icmp_ln88_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    P2_o_assign_proc : process(P2_i, icmp_ln72_reg_1694, ap_CS_fsm_state44, icmp_ln122_2_fu_1283_p2, ap_CS_fsm_state55, icmp_ln88_fu_1428_p2, grp_linear_combination_1_fu_474_out_r, grp_linear_combination_1_fu_474_out_r_ap_vld, ap_CS_fsm_state41, v1_0_i_reg_419)
    begin
        if (((icmp_ln88_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            P2_o <= ap_const_lv8_0;
        elsif (((icmp_ln122_2_fu_1283_p2 = ap_const_lv1_1) and (icmp_ln72_reg_1694 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            P2_o <= v1_0_i_reg_419;
        elsif (((grp_linear_combination_1_fu_474_out_r_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            P2_o <= grp_linear_combination_1_fu_474_out_r;
        else 
            P2_o <= P2_i;
        end if; 
    end process;


    P2_o_ap_vld_assign_proc : process(icmp_ln72_reg_1694, ap_CS_fsm_state44, icmp_ln122_2_fu_1283_p2, ap_CS_fsm_state55, icmp_ln88_fu_1428_p2, grp_linear_combination_1_fu_474_out_r_ap_vld, ap_CS_fsm_state41)
    begin
        if ((((icmp_ln88_fu_1428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((icmp_ln122_2_fu_1283_p2 = ap_const_lv1_1) and (icmp_ln72_reg_1694 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            P2_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            P2_o_ap_vld <= grp_linear_combination_1_fu_474_out_r_ap_vld;
        else 
            P2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln122_1_fu_850_p2 <= std_logic_vector(unsigned(i_8_reg_320) + unsigned(ap_const_lv6_1));
    add_ln122_2_fu_1272_p2 <= std_logic_vector(unsigned(i_10_reg_430) + unsigned(ap_const_lv6_1));
    add_ln122_fu_593_p2 <= std_logic_vector(unsigned(i_6_reg_287) + unsigned(ap_const_lv6_1));
    add_ln125_1_fu_632_p2 <= std_logic_vector(unsigned(zext_ln125_2_fu_628_p1) + unsigned(zext_ln125_1_fu_624_p1));
    add_ln125_2_fu_866_p2 <= std_logic_vector(unsigned(zext_ln122_2_fu_856_p1) + unsigned(sub_ln44_reg_1561));
    add_ln125_3_fu_880_p2 <= std_logic_vector(unsigned(zext_ln125_5_fu_876_p1) + unsigned(zext_ln37_reg_1478));
    add_ln125_4_fu_1303_p2 <= std_logic_vector(unsigned(zext_ln125_8_fu_1299_p1) + unsigned(zext_ln125_7_fu_1295_p1));
    add_ln125_fu_614_p2 <= std_logic_vector(unsigned(zext_ln122_1_fu_604_p1) + unsigned(sub_ln32_reg_1491));
    add_ln22_fu_491_p2 <= std_logic_vector(unsigned(i_reg_265) + unsigned(ap_const_lv6_1));
    add_ln26_fu_542_p2 <= std_logic_vector(unsigned(j_reg_276) + unsigned(ap_const_lv3_1));
    add_ln32_fu_558_p2 <= std_logic_vector(unsigned(zext_ln26_fu_548_p1) + unsigned(empty_47_reg_1468));
    add_ln37_fu_757_p2 <= std_logic_vector(unsigned(i_4_reg_298) + unsigned(ap_const_lv6_1));
    add_ln41_fu_799_p2 <= std_logic_vector(unsigned(j_1_reg_309) + unsigned(ap_const_lv3_1));
    add_ln44_fu_815_p2 <= std_logic_vector(unsigned(zext_ln41_fu_805_p1) + unsigned(empty_51_reg_1548));
    add_ln510_1_fu_923_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_920_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_2_fu_1347_p2 <= std_logic_vector(unsigned(zext_ln510_2_fu_1344_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_676_p2 <= std_logic_vector(unsigned(zext_ln510_fu_673_p1) + unsigned(ap_const_lv12_C01));
    add_ln51_fu_1021_p2 <= std_logic_vector(unsigned(i_5_reg_342) + unsigned(ap_const_lv3_1));
    add_ln55_fu_1067_p2 <= std_logic_vector(unsigned(j_3_reg_353) + unsigned(ap_const_lv6_1));
    add_ln58_1_fu_1148_p2 <= std_logic_vector(unsigned(sub_ln58_1_fu_1142_p2) + unsigned(zext_ln51_reg_1618));
    add_ln58_fu_1083_p2 <= std_logic_vector(unsigned(zext_ln55_fu_1073_p1) + unsigned(empty_58_reg_1626));
    add_ln63_1_fu_1224_p2 <= std_logic_vector(unsigned(phi_mul_reg_386) + unsigned(ap_const_lv15_D20));
    add_ln63_fu_1218_p2 <= std_logic_vector(unsigned(i_11_reg_375) + unsigned(ap_const_lv3_1));
    add_ln67_fu_1289_p2 <= std_logic_vector(unsigned(j_4_reg_398) + unsigned(ap_const_lv64_1));
    add_ln88_fu_1434_p2 <= std_logic_vector(unsigned(i_7_reg_441) + unsigned(ap_const_lv11_2));
    add_ptr523_sum_cast_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ptr523_sum_reg_1662),64));
    add_ptr523_sum_fu_1209_p2 <= std_logic_vector(unsigned(loop_index_cast_fu_1189_p1) + unsigned(sub_ln58_reg_1639));
    add_ptr584_sum_cast_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ptr584_sum_fu_1199_p2),64));
    add_ptr584_sum_fu_1199_p2 <= std_logic_vector(unsigned(loop_index_cast_fu_1189_p1) + unsigned(sub_ln58_2_reg_1644));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state55, icmp_ln88_fu_1428_p2)
    begin
        if (((icmp_ln88_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55, icmp_ln88_fu_1428_p2)
    begin
        if (((icmp_ln88_fu_1428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_889_p1 <= grp_generic_remainder_double_s_fu_452_ap_return;
    data_V_2_fu_1313_p1 <= grp_generic_remainder_double_s_fu_452_ap_return;
    data_V_fu_642_p1 <= grp_generic_remainder_double_s_fu_452_ap_return;
    empty_47_fu_527_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_511_p1) - unsigned(p_shl9_cast_fu_523_p1));
    empty_51_fu_793_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_777_p1) - unsigned(p_shl13_cast_fu_789_p1));
    empty_55_fu_1004_p2 <= std_logic_vector(unsigned(empty_54_reg_331) + unsigned(ap_const_lv15_1));
    empty_58_fu_1061_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_1045_p1) - unsigned(p_shl17_cast_fu_1057_p1));
    empty_60_fu_1183_p2 <= std_logic_vector(unsigned(loop_index_reg_364) + unsigned(ap_const_lv6_1));
    empty_65_fu_1255_p2 <= std_logic_vector(unsigned(empty_64_reg_408) + unsigned(ap_const_lv6_1));
    exitcond2_fu_1266_p2 <= "1" when (empty_64_reg_408 = ap_const_lv6_3C) else "0";
    exitcond426_fu_1193_p2 <= "1" when (loop_index_reg_364 = ap_const_lv6_3C) else "0";
    exitcond5511_fu_1015_p2 <= "1" when (empty_54_reg_331 = ap_const_lv15_4EC0) else "0";
    grp_fu_1440_p0 <= j_4_reg_398(15 - 1 downto 0);
    grp_fu_1440_p1 <= ap_const_lv15_D20(13 - 1 downto 0);

    grp_fu_483_p0_assign_proc : process(zext_ln125_3_fu_638_p1, ap_CS_fsm_state7, zext_ln125_6_fu_885_p1, ap_CS_fsm_state21, zext_ln125_9_fu_1309_p1, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_483_p0 <= zext_ln125_9_fu_1309_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_483_p0 <= zext_ln125_6_fu_885_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_483_p0 <= zext_ln125_3_fu_638_p1;
        else 
            grp_fu_483_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_remainder_double_s_fu_452_ap_start <= grp_generic_remainder_double_s_fu_452_ap_start_reg;
    grp_linear_combination_1_fu_474_ap_start <= grp_linear_combination_1_fu_474_ap_start_reg;
    grp_linear_combination_2_fu_465_ap_start <= grp_linear_combination_2_fu_465_ap_start_reg;
    grp_linear_combination_fu_457_ap_start <= grp_linear_combination_fu_457_ap_start_reg;
    icmp_ln122_1_fu_860_p2 <= "1" when (i_8_reg_320 = ap_const_lv6_3C) else "0";
    icmp_ln122_2_fu_1283_p2 <= "1" when (i_10_reg_430 = ap_const_lv6_3C) else "0";
    icmp_ln122_fu_608_p2 <= "1" when (i_6_reg_287 = ap_const_lv6_3C) else "0";
    icmp_ln22_fu_497_p2 <= "1" when (i_reg_265 = ap_const_lv6_38) else "0";
    icmp_ln26_fu_552_p2 <= "1" when (j_reg_276 = ap_const_lv3_6) else "0";
    icmp_ln37_fu_763_p2 <= "1" when (i_4_reg_298 = ap_const_lv6_38) else "0";
    icmp_ln41_fu_809_p2 <= "1" when (j_1_reg_309 = ap_const_lv3_6) else "0";
    icmp_ln51_fu_1031_p2 <= "1" when (i_5_reg_342 = ap_const_lv3_6) else "0";
    icmp_ln55_fu_1077_p2 <= "1" when (j_3_reg_353 = ap_const_lv6_38) else "0";
    icmp_ln63_fu_1234_p2 <= "1" when (i_11_reg_375 = ap_const_lv3_6) else "0";
    icmp_ln67_fu_1240_p2 <= "1" when (j_4_reg_398 = ap_const_lv64_6) else "0";
    icmp_ln72_fu_1250_p2 <= "1" when (j_4_reg_398 = zext_ln63_reg_1677) else "0";
    icmp_ln88_fu_1428_p2 <= "1" when (unsigned(i_7_reg_441) < unsigned(ap_const_lv11_4EC)) else "0";
    isNeg_1_fu_929_p3 <= add_ln510_1_fu_923_p2(11 downto 11);
    isNeg_2_fu_1353_p3 <= add_ln510_2_fu_1347_p2(11 downto 11);
    isNeg_fu_682_p3 <= add_ln510_fu_676_p2(11 downto 11);
    loop_index_cast_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_364),15));
    mantissa_1_fu_907_p4 <= ((ap_const_lv1_1 & tmp_18_reg_1595) & ap_const_lv1_0);
    mantissa_2_fu_1331_p4 <= ((ap_const_lv1_1 & tmp_20_reg_1750) & ap_const_lv1_0);
    mantissa_fu_660_p4 <= ((ap_const_lv1_1 & tmp_16_reg_1530) & ap_const_lv1_0);
    p_cast13_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_64_reg_408),64));
    p_cast_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_54_reg_331),64));
    p_shl12_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_769_p3),10));
    p_shl13_cast_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_781_p3),10));
    p_shl16_cast_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_1037_p3),10));
    p_shl17_cast_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_1049_p3),10));
    p_shl1_fu_769_p3 <= (i_4_reg_298 & ap_const_lv3_0);
    p_shl2_fu_781_p3 <= (i_4_reg_298 & ap_const_lv1_0);
    p_shl3_fu_1037_p3 <= (i_5_reg_342 & ap_const_lv6_0);
    p_shl4_fu_1049_p3 <= (i_5_reg_342 & ap_const_lv3_0);
    p_shl9_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_515_p3),10));
    p_shl9_fu_515_p3 <= (i_reg_265 & ap_const_lv1_0);
    p_shl_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_503_p3),10));
    p_shl_fu_503_p3 <= (i_reg_265 & ap_const_lv3_0);
    r_V_1_fu_721_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_669_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_711_p1(31-1 downto 0)))));
    r_V_2_fu_962_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_1_fu_916_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i40_cast_cast_cast_cast_fu_958_p1(31-1 downto 0)))));
    r_V_3_fu_968_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_1_fu_916_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i40_cast_cast_cast_cast_fu_958_p1(31-1 downto 0)))));
    r_V_4_fu_1386_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_2_fu_1340_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i62_cast_cast_cast_cast_fu_1382_p1(31-1 downto 0)))));
    r_V_5_fu_1392_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_2_fu_1340_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i62_cast_cast_cast_cast_fu_1382_p1(31-1 downto 0)))));
    r_V_fu_715_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_669_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_711_p1(31-1 downto 0)))));
        sext_ln1311_1_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_937_p2),12));

        sext_ln1311_2_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_1361_p2),12));

        sext_ln1311_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_690_p2),12));

        sext_ln32_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln32_1_fu_575_p3),15));

        sext_ln44_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln44_1_fu_832_p3),15));

        sext_ln58_1_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln58_5_fu_1165_p3),15));

        sext_ln58_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln58_1_fu_1100_p3),15));

    sh_prom_i_i_i_i_i_i40_cast_cast_cast_cast_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_i40_cast_cast_cast_fu_954_p1),113));
        sh_prom_i_i_i_i_i_i40_cast_cast_cast_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_946_p3),32));

    sh_prom_i_i_i_i_i_i62_cast_cast_cast_cast_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_i62_cast_cast_cast_fu_1378_p1),113));
        sh_prom_i_i_i_i_i_i62_cast_cast_cast_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1370_p3),32));

    sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_707_p1),113));
        sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_699_p3),32));

    shl_ln1_fu_824_p3 <= (trunc_ln44_fu_820_p1 & ap_const_lv6_0);
    shl_ln2_fu_1092_p3 <= (trunc_ln58_fu_1088_p1 & ap_const_lv6_0);
    shl_ln32_1_fu_575_p3 <= (add_ln32_fu_558_p2 & ap_const_lv2_0);
    shl_ln44_1_fu_832_p3 <= (add_ln44_fu_815_p2 & ap_const_lv2_0);
    shl_ln58_1_fu_1100_p3 <= (add_ln58_fu_1083_p2 & ap_const_lv2_0);
    shl_ln58_2_fu_1118_p3 <= (j_3_reg_353 & ap_const_lv3_0);
    shl_ln58_3_fu_1130_p3 <= (j_3_reg_353 & ap_const_lv1_0);
    shl_ln58_4_fu_1157_p3 <= (trunc_ln58_1_fu_1153_p1 & ap_const_lv6_0);
    shl_ln58_5_fu_1165_p3 <= (add_ln58_1_fu_1148_p2 & ap_const_lv2_0);
    shl_ln_fu_567_p3 <= (trunc_ln32_fu_563_p1 & ap_const_lv6_0);
    sub_ln1311_1_fu_937_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_17_reg_1589));
    sub_ln1311_2_fu_1361_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_19_reg_1744));
    sub_ln1311_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_15_reg_1524));
    sub_ln31_fu_533_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(i_reg_265));
    sub_ln32_fu_587_p2 <= std_logic_vector(unsigned(shl_ln_fu_567_p3) - unsigned(sext_ln32_fu_583_p1));
    sub_ln44_fu_844_p2 <= std_logic_vector(unsigned(shl_ln1_fu_824_p3) - unsigned(sext_ln44_fu_840_p1));
    sub_ln58_1_fu_1142_p2 <= std_logic_vector(unsigned(zext_ln58_fu_1126_p1) - unsigned(zext_ln58_1_fu_1138_p1));
    sub_ln58_2_fu_1177_p2 <= std_logic_vector(unsigned(shl_ln58_4_fu_1157_p3) - unsigned(sext_ln58_1_fu_1173_p1));
    sub_ln58_fu_1112_p2 <= std_logic_vector(unsigned(shl_ln2_fu_1092_p3) - unsigned(sext_ln58_fu_1108_p1));

    temp_address0_assign_proc : process(ap_CS_fsm_state5, temp_addr_reg_1504, ap_CS_fsm_state19, temp_addr_1_reg_1574, ap_CS_fsm_state34, ap_CS_fsm_state16, ap_CS_fsm_state30, zext_ln125_fu_619_p1, zext_ln125_4_fu_871_p1, add_ptr584_sum_cast_fu_1204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            temp_address0 <= add_ptr584_sum_cast_fu_1204_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_address0 <= temp_addr_1_reg_1574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_address0 <= zext_ln125_4_fu_871_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_address0 <= temp_addr_reg_1504;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= zext_ln125_fu_619_p1(15 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state34, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(val_reg_1535, val_1_reg_1600, ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_d0 <= val_1_reg_1600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_d0 <= val_reg_1535;
        else 
            temp_d0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempt_address0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state43, grp_linear_combination_2_fu_465_vecs_address0, grp_linear_combination_1_fu_474_vecs_address0, ap_CS_fsm_state35, ap_CS_fsm_state41, p_cast_fu_1010_p1, add_ptr523_sum_cast_fu_1214_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            tempt_address0 <= add_ptr523_sum_cast_fu_1214_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            tempt_address0 <= p_cast_fu_1010_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            tempt_address0 <= grp_linear_combination_1_fu_474_vecs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            tempt_address0 <= grp_linear_combination_2_fu_465_vecs_address0;
        else 
            tempt_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempt_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state43, grp_linear_combination_2_fu_465_vecs_ce0, grp_linear_combination_1_fu_474_vecs_ce0, ap_CS_fsm_state35, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            tempt_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            tempt_ce0 <= grp_linear_combination_1_fu_474_vecs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            tempt_ce0 <= grp_linear_combination_2_fu_465_vecs_ce0;
        else 
            tempt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempt_d0_assign_proc : process(ap_CS_fsm_state31, temp_q0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            tempt_d0 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            tempt_d0 <= ap_const_lv8_0;
        else 
            tempt_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tempt_we0_assign_proc : process(ap_CS_fsm_state31, exitcond5511_fu_1015_p2, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((exitcond5511_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            tempt_we0 <= ap_const_logic_1;
        else 
            tempt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_974_p3 <= r_V_2_fu_962_p2(53 downto 53);
    tmp_14_fu_1398_p3 <= r_V_4_fu_1386_p2(53 downto 53);
    tmp_16_fu_656_p1 <= data_V_fu_642_p1(52 - 1 downto 0);
    tmp_18_fu_903_p1 <= data_V_1_fu_889_p1(52 - 1 downto 0);
    tmp_20_fu_1327_p1 <= data_V_2_fu_1313_p1(52 - 1 downto 0);
    tmp_2_fu_986_p4 <= r_V_3_fu_968_p2(60 downto 53);
    tmp_4_fu_1410_p4 <= r_V_5_fu_1392_p2(60 downto 53);
    tmp_fu_727_p3 <= r_V_fu_715_p2(53 downto 53);
    tmp_s_fu_739_p4 <= r_V_1_fu_721_p2(60 downto 53);
    trunc_ln32_fu_563_p1 <= add_ln32_fu_558_p2(9 - 1 downto 0);
    trunc_ln44_fu_820_p1 <= add_ln44_fu_815_p2(9 - 1 downto 0);
    trunc_ln58_1_fu_1153_p1 <= add_ln58_1_fu_1148_p2(9 - 1 downto 0);
    trunc_ln58_fu_1088_p1 <= add_ln58_fu_1083_p2(9 - 1 downto 0);
    ush_1_fu_946_p3 <= 
        sext_ln1311_1_fu_942_p1 when (isNeg_1_fu_929_p3(0) = '1') else 
        add_ln510_1_fu_923_p2;
    ush_2_fu_1370_p3 <= 
        sext_ln1311_2_fu_1366_p1 when (isNeg_2_fu_1353_p3(0) = '1') else 
        add_ln510_2_fu_1347_p2;
    ush_fu_699_p3 <= 
        sext_ln1311_fu_695_p1 when (isNeg_fu_682_p3(0) = '1') else 
        add_ln510_fu_676_p2;
    val_1_fu_996_p3 <= 
        zext_ln662_1_fu_982_p1 when (isNeg_1_fu_929_p3(0) = '1') else 
        tmp_2_fu_986_p4;
    val_2_fu_1420_p3 <= 
        zext_ln662_2_fu_1406_p1 when (isNeg_2_fu_1353_p3(0) = '1') else 
        tmp_4_fu_1410_p4;
    val_fu_749_p3 <= 
        zext_ln662_fu_735_p1 when (isNeg_fu_682_p3(0) = '1') else 
        tmp_s_fu_739_p4;

    vec_1_address0_assign_proc : process(ap_CS_fsm_state5, grp_linear_combination_fu_457_out_r_address0, ap_CS_fsm_state4, zext_ln122_fu_599_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vec_1_address0 <= zext_ln122_fu_599_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_1_address0 <= grp_linear_combination_fu_457_out_r_address0;
        else 
            vec_1_address0 <= "XXXXXX";
        end if; 
    end process;


    vec_1_ce0_assign_proc : process(ap_CS_fsm_state5, grp_linear_combination_fu_457_out_r_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            vec_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_1_ce0 <= grp_linear_combination_fu_457_out_r_ce0;
        else 
            vec_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_1_we0_assign_proc : process(grp_linear_combination_fu_457_out_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            vec_1_we0 <= grp_linear_combination_fu_457_out_r_we0;
        else 
            vec_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_address0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, grp_linear_combination_2_fu_465_out_r_address0, exitcond2_fu_1266_p2, p_cast13_fu_1261_p1, zext_ln122_3_fu_1278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            vec_address0 <= zext_ln122_3_fu_1278_p1(6 - 1 downto 0);
        elsif (((exitcond2_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            vec_address0 <= p_cast13_fu_1261_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_address0 <= grp_linear_combination_2_fu_465_out_r_address0;
        else 
            vec_address0 <= "XXXXXX";
        end if; 
    end process;


    vec_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, grp_linear_combination_2_fu_465_out_r_ce0, exitcond2_fu_1266_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((exitcond2_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            vec_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_ce0 <= grp_linear_combination_2_fu_465_out_r_ce0;
        else 
            vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_d0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state43, grp_linear_combination_2_fu_465_out_r_d0, exitcond2_fu_1266_p2)
    begin
        if (((exitcond2_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            vec_d0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_d0 <= grp_linear_combination_2_fu_465_out_r_d0;
        else 
            vec_d0 <= "XXXXX";
        end if; 
    end process;


    vec_we0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state43, grp_linear_combination_2_fu_465_out_r_we0, exitcond2_fu_1266_p2)
    begin
        if (((exitcond2_fu_1266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            vec_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_we0 <= grp_linear_combination_2_fu_465_out_r_we0;
        else 
            vec_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln122_1_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_287),15));
    zext_ln122_2_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_320),15));
    zext_ln122_3_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_430),64));
    zext_ln122_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_287),64));
    zext_ln125_1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_q0),9));
    zext_ln125_2_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vec_1_q0),9));
    zext_ln125_3_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_1_reg_1514),32));
    zext_ln125_4_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_2_fu_866_p2),64));
    zext_ln125_5_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_q0),9));
    zext_ln125_6_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_3_reg_1579),32));
    zext_ln125_7_fu_1295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v1_0_i_reg_419),9));
    zext_ln125_8_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vec_q0),9));
    zext_ln125_9_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_4_reg_1734),32));
    zext_ln125_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_fu_614_p2),64));
    zext_ln26_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_276),10));
    zext_ln37_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(P1),9));
    zext_ln41_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_309),10));
    zext_ln510_1_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_1589),12));
    zext_ln510_2_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_1744),12));
    zext_ln510_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_1524),12));
    zext_ln51_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_342),10));
    zext_ln55_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_353),10));
    zext_ln58_1_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_3_fu_1130_p3),10));
    zext_ln58_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_2_fu_1118_p3),10));
    zext_ln63_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_375),64));
    zext_ln662_1_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_974_p3),8));
    zext_ln662_2_fu_1406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1398_p3),8));
    zext_ln662_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_727_p3),8));
    zext_ln68_1_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_907_p4),113));
    zext_ln68_2_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1331_p4),113));
    zext_ln68_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_660_p4),113));
end behav;
