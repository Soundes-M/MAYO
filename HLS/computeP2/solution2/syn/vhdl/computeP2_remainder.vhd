-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity computeP2_remainder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of computeP2_remainder is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_19_fu_45_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln167_fu_57_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln167_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal r_sig_V_reg_117 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln175_fu_93_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_26_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_22 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal empty_18_fu_39_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_33_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_51_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_51_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rem_V_1_fu_72_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal rem_V_3_fu_77_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln164_fu_83_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln657_fu_87_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln159_fu_69_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_51_ap_start : STD_LOGIC;
    signal grp_fu_51_ap_done : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component computeP2_urem_9ns_6ns_9_13_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    urem_9ns_6ns_9_13_seq_1_U10 : component computeP2_urem_9ns_6ns_9_13_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_51_ap_start,
        done => grp_fu_51_ap_done,
        din0 => x,
        din1 => grp_fu_51_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_51_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv6_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_return_preg <= ap_phi_mux_p_Val2_s_phi_fu_26_p4;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_s_reg_22_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_19_fu_45_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_s_reg_22 <= ap_const_lv6_0;
            elsif (((empty_19_reg_106 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_Val2_s_reg_22 <= select_ln175_fu_93_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_19_reg_106 <= empty_19_fu_45_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                r_sig_V_reg_117 <= grp_fu_51_p2(4 downto 4);
                trunc_ln167_reg_110 <= trunc_ln167_fu_57_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, empty_19_fu_45_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((empty_19_fu_45_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((empty_19_fu_45_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_26_p4_assign_proc : process(empty_19_reg_106, select_ln175_fu_93_p3, p_Val2_s_reg_22, ap_CS_fsm_state14)
    begin
        if (((empty_19_reg_106 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_phi_mux_p_Val2_s_phi_fu_26_p4 <= select_ln175_fu_93_p3;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_26_p4 <= p_Val2_s_reg_22;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_Val2_s_phi_fu_26_p4, ap_CS_fsm_state14, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_return <= ap_phi_mux_p_Val2_s_phi_fu_26_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_18_fu_39_p2 <= "1" when (x = ap_const_lv9_0) else "0";
    empty_19_fu_45_p2 <= (empty_fu_33_p2 or empty_18_fu_39_p2);
    empty_fu_33_p2 <= "1" when (x = ap_const_lv9_1F) else "0";

    grp_fu_51_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, empty_19_fu_45_p2)
    begin
        if (((empty_19_fu_45_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_51_ap_start <= ap_const_logic_1;
        else 
            grp_fu_51_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_51_p1 <= ap_const_lv9_1F(6 - 1 downto 0);
    rem_V_1_fu_72_p2 <= (trunc_ln167_reg_110 xor ap_const_lv5_1F);
    rem_V_3_fu_77_p3 <= 
        rem_V_1_fu_72_p2 when (r_sig_V_reg_117(0) = '1') else 
        trunc_ln167_reg_110;
    select_ln175_fu_93_p3 <= 
        sub_ln657_fu_87_p2 when (r_sig_V_reg_117(0) = '1') else 
        zext_ln159_fu_69_p1;
    sub_ln657_fu_87_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln164_fu_83_p1));
    trunc_ln167_fu_57_p1 <= grp_fu_51_p2(5 - 1 downto 0);
    zext_ln159_fu_69_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_reg_110),6));
    zext_ln164_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rem_V_3_fu_77_p3),6));
end behav;
