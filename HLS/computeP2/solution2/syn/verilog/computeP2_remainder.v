// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module computeP2_remainder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] x;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ap_return;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] empty_19_fu_45_p2;
reg   [0:0] empty_19_reg_106;
wire   [4:0] trunc_ln167_fu_57_p1;
reg   [4:0] trunc_ln167_reg_110;
wire    ap_CS_fsm_state13;
reg   [0:0] r_sig_V_reg_117;
wire   [5:0] select_ln175_fu_93_p3;
reg   [5:0] ap_phi_mux_p_Val2_s_phi_fu_26_p4;
reg   [5:0] p_Val2_s_reg_22;
wire    ap_CS_fsm_state14;
wire   [0:0] empty_18_fu_39_p2;
wire   [0:0] empty_fu_33_p2;
wire   [5:0] grp_fu_51_p1;
wire   [8:0] grp_fu_51_p2;
wire   [4:0] rem_V_1_fu_72_p2;
wire   [4:0] rem_V_3_fu_77_p3;
wire   [5:0] zext_ln164_fu_83_p1;
wire   [5:0] sub_ln657_fu_87_p2;
wire   [5:0] zext_ln159_fu_69_p1;
reg    grp_fu_51_ap_start;
wire    grp_fu_51_ap_done;
reg   [5:0] ap_return_preg;
reg   [13:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_return_preg = 6'd0;
end

computeP2_urem_9ns_6ns_9_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
urem_9ns_6ns_9_13_seq_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_51_ap_start),
    .done(grp_fu_51_ap_done),
    .din0(x),
    .din1(grp_fu_51_p1),
    .ce(1'b1),
    .dout(grp_fu_51_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 6'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_return_preg <= ap_phi_mux_p_Val2_s_phi_fu_26_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((empty_19_fu_45_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_22 <= 6'd0;
    end else if (((empty_19_reg_106 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        p_Val2_s_reg_22 <= select_ln175_fu_93_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_19_reg_106 <= empty_19_fu_45_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_sig_V_reg_117 <= grp_fu_51_p2[32'd4];
        trunc_ln167_reg_110 <= trunc_ln167_fu_57_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((empty_19_reg_106 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_phi_mux_p_Val2_s_phi_fu_26_p4 = select_ln175_fu_93_p3;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_26_p4 = p_Val2_s_reg_22;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_return = ap_phi_mux_p_Val2_s_phi_fu_26_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((empty_19_fu_45_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_51_ap_start = 1'b1;
    end else begin
        grp_fu_51_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((empty_19_fu_45_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((empty_19_fu_45_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign empty_18_fu_39_p2 = ((x == 9'd0) ? 1'b1 : 1'b0);

assign empty_19_fu_45_p2 = (empty_fu_33_p2 | empty_18_fu_39_p2);

assign empty_fu_33_p2 = ((x == 9'd31) ? 1'b1 : 1'b0);

assign grp_fu_51_p1 = 9'd31;

assign rem_V_1_fu_72_p2 = (trunc_ln167_reg_110 ^ 5'd31);

assign rem_V_3_fu_77_p3 = ((r_sig_V_reg_117[0:0] == 1'b1) ? rem_V_1_fu_72_p2 : trunc_ln167_reg_110);

assign select_ln175_fu_93_p3 = ((r_sig_V_reg_117[0:0] == 1'b1) ? sub_ln657_fu_87_p2 : zext_ln159_fu_69_p1);

assign sub_ln657_fu_87_p2 = (6'd0 - zext_ln164_fu_83_p1);

assign trunc_ln167_fu_57_p1 = grp_fu_51_p2[4:0];

assign zext_ln159_fu_69_p1 = trunc_ln167_reg_110;

assign zext_ln164_fu_83_p1 = rem_V_3_fu_77_p3;

endmodule //computeP2_remainder
