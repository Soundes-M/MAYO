// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module computeP2_add_vectors_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P1_address0,
        P1_ce0,
        P1_q0,
        P1_address1,
        P1_ce1,
        P1_q1,
        v1_address0,
        v1_ce0,
        v1_we0,
        v1_d0,
        v1_q0,
        out_offset,
        v2
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_state7 = 61'd64;
parameter    ap_ST_fsm_state8 = 61'd128;
parameter    ap_ST_fsm_state9 = 61'd256;
parameter    ap_ST_fsm_state10 = 61'd512;
parameter    ap_ST_fsm_state11 = 61'd1024;
parameter    ap_ST_fsm_state12 = 61'd2048;
parameter    ap_ST_fsm_state13 = 61'd4096;
parameter    ap_ST_fsm_state14 = 61'd8192;
parameter    ap_ST_fsm_state15 = 61'd16384;
parameter    ap_ST_fsm_state16 = 61'd32768;
parameter    ap_ST_fsm_state17 = 61'd65536;
parameter    ap_ST_fsm_state18 = 61'd131072;
parameter    ap_ST_fsm_state19 = 61'd262144;
parameter    ap_ST_fsm_state20 = 61'd524288;
parameter    ap_ST_fsm_state21 = 61'd1048576;
parameter    ap_ST_fsm_state22 = 61'd2097152;
parameter    ap_ST_fsm_state23 = 61'd4194304;
parameter    ap_ST_fsm_state24 = 61'd8388608;
parameter    ap_ST_fsm_state25 = 61'd16777216;
parameter    ap_ST_fsm_state26 = 61'd33554432;
parameter    ap_ST_fsm_state27 = 61'd67108864;
parameter    ap_ST_fsm_state28 = 61'd134217728;
parameter    ap_ST_fsm_state29 = 61'd268435456;
parameter    ap_ST_fsm_state30 = 61'd536870912;
parameter    ap_ST_fsm_state31 = 61'd1073741824;
parameter    ap_ST_fsm_state32 = 61'd2147483648;
parameter    ap_ST_fsm_state33 = 61'd4294967296;
parameter    ap_ST_fsm_state34 = 61'd8589934592;
parameter    ap_ST_fsm_state35 = 61'd17179869184;
parameter    ap_ST_fsm_state36 = 61'd34359738368;
parameter    ap_ST_fsm_state37 = 61'd68719476736;
parameter    ap_ST_fsm_state38 = 61'd137438953472;
parameter    ap_ST_fsm_state39 = 61'd274877906944;
parameter    ap_ST_fsm_state40 = 61'd549755813888;
parameter    ap_ST_fsm_state41 = 61'd1099511627776;
parameter    ap_ST_fsm_state42 = 61'd2199023255552;
parameter    ap_ST_fsm_state43 = 61'd4398046511104;
parameter    ap_ST_fsm_state44 = 61'd8796093022208;
parameter    ap_ST_fsm_state45 = 61'd17592186044416;
parameter    ap_ST_fsm_state46 = 61'd35184372088832;
parameter    ap_ST_fsm_state47 = 61'd70368744177664;
parameter    ap_ST_fsm_state48 = 61'd140737488355328;
parameter    ap_ST_fsm_state49 = 61'd281474976710656;
parameter    ap_ST_fsm_state50 = 61'd562949953421312;
parameter    ap_ST_fsm_state51 = 61'd1125899906842624;
parameter    ap_ST_fsm_state52 = 61'd2251799813685248;
parameter    ap_ST_fsm_state53 = 61'd4503599627370496;
parameter    ap_ST_fsm_state54 = 61'd9007199254740992;
parameter    ap_ST_fsm_state55 = 61'd18014398509481984;
parameter    ap_ST_fsm_state56 = 61'd36028797018963968;
parameter    ap_ST_fsm_state57 = 61'd72057594037927936;
parameter    ap_ST_fsm_state58 = 61'd144115188075855872;
parameter    ap_ST_fsm_state59 = 61'd288230376151711744;
parameter    ap_ST_fsm_state60 = 61'd576460752303423488;
parameter    ap_ST_fsm_state61 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] P1_address0;
output   P1_ce0;
input  [7:0] P1_q0;
output  [16:0] P1_address1;
output   P1_ce1;
input  [7:0] P1_q1;
output  [14:0] v1_address0;
output   v1_ce0;
output   v1_we0;
output  [4:0] v1_d0;
input  [4:0] v1_q0;
input  [14:0] out_offset;
input  [16:0] v2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] P1_address0;
reg P1_ce0;
reg P1_ce1;
reg[14:0] v1_address0;
reg v1_ce0;
reg v1_we0;
reg[4:0] v1_d0;

(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] add_ln117_fu_162_p2;
reg   [5:0] add_ln117_reg_403;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln117_fu_156_p2;
reg   [14:0] out_addr_reg_408;
wire   [8:0] tmp_fu_196_p2;
reg   [8:0] tmp_reg_418;
wire    ap_CS_fsm_state3;
reg   [14:0] out_addr_1_reg_423;
wire    ap_CS_fsm_state17;
wire   [8:0] tmp_7_fu_254_p2;
reg   [8:0] tmp_7_reg_433;
wire    ap_CS_fsm_state18;
reg   [14:0] out_addr_2_reg_438;
wire    ap_CS_fsm_state32;
wire   [14:0] add_ln119_17_fu_318_p2;
reg   [14:0] add_ln119_17_reg_448;
wire   [8:0] tmp_8_fu_341_p2;
reg   [8:0] tmp_8_reg_458;
wire    ap_CS_fsm_state33;
reg   [7:0] P1_load_3_reg_463;
reg   [14:0] out_addr_3_reg_468;
wire    ap_CS_fsm_state47;
wire   [8:0] tmp_9_fu_368_p2;
reg   [8:0] tmp_9_reg_473;
wire    ap_CS_fsm_state48;
reg   [5:0] i_reg_136;
wire    ap_CS_fsm_state61;
wire   [63:0] zext_ln119_fu_173_p1;
wire   [63:0] zext_ln119_36_fu_183_p1;
wire   [63:0] zext_ln119_40_fu_231_p1;
wire   [63:0] zext_ln119_42_fu_241_p1;
wire   [63:0] zext_ln119_46_fu_289_p1;
wire   [63:0] zext_ln119_48_fu_299_p1;
wire   [63:0] zext_ln119_54_fu_328_p1;
wire   [63:0] zext_ln119_52_fu_357_p1;
wire    ap_CS_fsm_state16;
wire   [4:0] trunc_ln121_fu_207_p1;
wire    ap_CS_fsm_state31;
wire   [4:0] trunc_ln121_7_fu_265_p1;
wire    ap_CS_fsm_state46;
wire   [4:0] trunc_ln121_8_fu_352_p1;
wire   [4:0] trunc_ln121_9_fu_379_p1;
wire   [14:0] zext_ln117_3_fu_152_p1;
wire   [14:0] add_ln119_8_fu_168_p2;
wire   [16:0] zext_ln117_fu_148_p1;
wire   [16:0] add_ln119_fu_178_p2;
wire   [8:0] zext_ln119_37_fu_192_p1;
wire   [8:0] zext_ln119_35_fu_188_p1;
wire   [5:0] grp_fu_202_p1;
wire    ap_CS_fsm_state4;
wire   [4:0] grp_fu_202_p2;
wire   [5:0] or_ln117_fu_212_p2;
wire   [14:0] zext_ln119_39_fu_222_p1;
wire   [14:0] add_ln119_12_fu_226_p2;
wire   [16:0] zext_ln119_38_fu_218_p1;
wire   [16:0] add_ln119_9_fu_236_p2;
wire   [8:0] zext_ln119_43_fu_250_p1;
wire   [8:0] zext_ln119_41_fu_246_p1;
wire   [5:0] grp_fu_260_p1;
wire    ap_CS_fsm_state19;
wire   [4:0] grp_fu_260_p2;
wire   [5:0] or_ln117_3_fu_270_p2;
wire   [14:0] zext_ln119_45_fu_280_p1;
wire   [14:0] add_ln119_15_fu_284_p2;
wire   [16:0] zext_ln119_44_fu_276_p1;
wire   [16:0] add_ln119_11_fu_294_p2;
wire   [5:0] or_ln117_4_fu_304_p2;
wire   [14:0] zext_ln119_51_fu_314_p1;
wire   [16:0] zext_ln119_50_fu_310_p1;
wire   [16:0] add_ln119_13_fu_323_p2;
wire   [8:0] zext_ln119_49_fu_337_p1;
wire   [8:0] zext_ln119_47_fu_333_p1;
wire   [5:0] grp_fu_347_p1;
wire    ap_CS_fsm_state34;
wire   [4:0] grp_fu_347_p2;
wire   [8:0] zext_ln119_55_fu_365_p1;
wire   [8:0] zext_ln119_53_fu_361_p1;
wire   [5:0] grp_fu_374_p1;
wire    ap_CS_fsm_state49;
wire   [4:0] grp_fu_374_p2;
reg    grp_fu_202_ap_start;
wire    grp_fu_202_ap_done;
reg    grp_fu_260_ap_start;
wire    grp_fu_260_ap_done;
reg    grp_fu_347_ap_start;
wire    grp_fu_347_ap_done;
reg    grp_fu_374_ap_start;
wire    grp_fu_374_ap_done;
reg   [60:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
end

computeP2_urem_9ns_6ns_5_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
urem_9ns_6ns_5_13_seq_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_202_ap_start),
    .done(grp_fu_202_ap_done),
    .din0(tmp_reg_418),
    .din1(grp_fu_202_p1),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

computeP2_urem_9ns_6ns_5_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
urem_9ns_6ns_5_13_seq_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_260_ap_start),
    .done(grp_fu_260_ap_done),
    .din0(tmp_7_reg_433),
    .din1(grp_fu_260_p1),
    .ce(1'b1),
    .dout(grp_fu_260_p2)
);

computeP2_urem_9ns_6ns_5_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
urem_9ns_6ns_5_13_seq_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_347_ap_start),
    .done(grp_fu_347_ap_done),
    .din0(tmp_8_reg_458),
    .din1(grp_fu_347_p1),
    .ce(1'b1),
    .dout(grp_fu_347_p2)
);

computeP2_urem_9ns_6ns_5_13_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
urem_9ns_6ns_5_13_seq_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_374_ap_start),
    .done(grp_fu_374_ap_done),
    .din0(tmp_9_reg_473),
    .din1(grp_fu_374_p1),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_136 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        i_reg_136 <= add_ln117_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        P1_load_3_reg_463 <= P1_q0;
        tmp_8_reg_458 <= tmp_8_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln117_fu_156_p2 == 1'd0))) begin
        add_ln117_reg_403 <= add_ln117_fu_162_p2;
        out_addr_reg_408 <= zext_ln119_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_ln119_17_reg_448 <= add_ln119_17_fu_318_p2;
        out_addr_2_reg_438 <= zext_ln119_46_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_addr_1_reg_423 <= zext_ln119_40_fu_231_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_addr_3_reg_468 <= zext_ln119_52_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_7_reg_433 <= tmp_7_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_9_reg_473 <= tmp_9_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_418 <= tmp_fu_196_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        P1_address0 = zext_ln119_54_fu_328_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        P1_address0 = zext_ln119_42_fu_241_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        P1_address0 = zext_ln119_36_fu_183_p1;
    end else begin
        P1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2))) begin
        P1_ce0 = 1'b1;
    end else begin
        P1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        P1_ce1 = 1'b1;
    end else begin
        P1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln117_fu_156_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln117_fu_156_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_202_ap_start = 1'b1;
    end else begin
        grp_fu_202_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_260_ap_start = 1'b1;
    end else begin
        grp_fu_260_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_347_ap_start = 1'b1;
    end else begin
        grp_fu_347_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_374_ap_start = 1'b1;
    end else begin
        grp_fu_374_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        v1_address0 = out_addr_3_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        v1_address0 = zext_ln119_52_fu_357_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        v1_address0 = out_addr_2_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        v1_address0 = zext_ln119_46_fu_289_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        v1_address0 = out_addr_1_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        v1_address0 = zext_ln119_40_fu_231_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        v1_address0 = out_addr_reg_408;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v1_address0 = zext_ln119_fu_173_p1;
    end else begin
        v1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        v1_d0 = trunc_ln121_9_fu_379_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        v1_d0 = trunc_ln121_8_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        v1_d0 = trunc_ln121_7_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        v1_d0 = trunc_ln121_fu_207_p1;
    end else begin
        v1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state61))) begin
        v1_we0 = 1'b1;
    end else begin
        v1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln117_fu_156_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P1_address1 = zext_ln119_48_fu_299_p1;

assign add_ln117_fu_162_p2 = (i_reg_136 + 6'd4);

assign add_ln119_11_fu_294_p2 = (zext_ln119_44_fu_276_p1 + v2);

assign add_ln119_12_fu_226_p2 = (zext_ln119_39_fu_222_p1 + out_offset);

assign add_ln119_13_fu_323_p2 = (zext_ln119_50_fu_310_p1 + v2);

assign add_ln119_15_fu_284_p2 = (zext_ln119_45_fu_280_p1 + out_offset);

assign add_ln119_17_fu_318_p2 = (zext_ln119_51_fu_314_p1 + out_offset);

assign add_ln119_8_fu_168_p2 = (zext_ln117_3_fu_152_p1 + out_offset);

assign add_ln119_9_fu_236_p2 = (zext_ln119_38_fu_218_p1 + v2);

assign add_ln119_fu_178_p2 = (zext_ln117_fu_148_p1 + v2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign grp_fu_202_p1 = 9'd31;

assign grp_fu_260_p1 = 9'd31;

assign grp_fu_347_p1 = 9'd31;

assign grp_fu_374_p1 = 9'd31;

assign icmp_ln117_fu_156_p2 = ((i_reg_136 == 6'd60) ? 1'b1 : 1'b0);

assign or_ln117_3_fu_270_p2 = (i_reg_136 | 6'd2);

assign or_ln117_4_fu_304_p2 = (i_reg_136 | 6'd3);

assign or_ln117_fu_212_p2 = (i_reg_136 | 6'd1);

assign tmp_7_fu_254_p2 = (zext_ln119_43_fu_250_p1 + zext_ln119_41_fu_246_p1);

assign tmp_8_fu_341_p2 = (zext_ln119_49_fu_337_p1 + zext_ln119_47_fu_333_p1);

assign tmp_9_fu_368_p2 = (zext_ln119_55_fu_365_p1 + zext_ln119_53_fu_361_p1);

assign tmp_fu_196_p2 = (zext_ln119_37_fu_192_p1 + zext_ln119_35_fu_188_p1);

assign trunc_ln121_7_fu_265_p1 = grp_fu_260_p2[4:0];

assign trunc_ln121_8_fu_352_p1 = grp_fu_347_p2[4:0];

assign trunc_ln121_9_fu_379_p1 = grp_fu_374_p2[4:0];

assign trunc_ln121_fu_207_p1 = grp_fu_202_p2[4:0];

assign zext_ln117_3_fu_152_p1 = i_reg_136;

assign zext_ln117_fu_148_p1 = i_reg_136;

assign zext_ln119_35_fu_188_p1 = v1_q0;

assign zext_ln119_36_fu_183_p1 = add_ln119_fu_178_p2;

assign zext_ln119_37_fu_192_p1 = P1_q0;

assign zext_ln119_38_fu_218_p1 = or_ln117_fu_212_p2;

assign zext_ln119_39_fu_222_p1 = or_ln117_fu_212_p2;

assign zext_ln119_40_fu_231_p1 = add_ln119_12_fu_226_p2;

assign zext_ln119_41_fu_246_p1 = v1_q0;

assign zext_ln119_42_fu_241_p1 = add_ln119_9_fu_236_p2;

assign zext_ln119_43_fu_250_p1 = P1_q0;

assign zext_ln119_44_fu_276_p1 = or_ln117_3_fu_270_p2;

assign zext_ln119_45_fu_280_p1 = or_ln117_3_fu_270_p2;

assign zext_ln119_46_fu_289_p1 = add_ln119_15_fu_284_p2;

assign zext_ln119_47_fu_333_p1 = v1_q0;

assign zext_ln119_48_fu_299_p1 = add_ln119_11_fu_294_p2;

assign zext_ln119_49_fu_337_p1 = P1_q1;

assign zext_ln119_50_fu_310_p1 = or_ln117_4_fu_304_p2;

assign zext_ln119_51_fu_314_p1 = or_ln117_4_fu_304_p2;

assign zext_ln119_52_fu_357_p1 = add_ln119_17_reg_448;

assign zext_ln119_53_fu_361_p1 = v1_q0;

assign zext_ln119_54_fu_328_p1 = add_ln119_13_fu_323_p2;

assign zext_ln119_55_fu_365_p1 = P1_load_3_reg_463;

assign zext_ln119_fu_173_p1 = add_ln119_8_fu_168_p2;

endmodule //computeP2_add_vectors_1
