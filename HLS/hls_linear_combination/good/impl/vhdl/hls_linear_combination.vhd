-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_linear_combination is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vecs : IN STD_LOGIC_VECTOR (7 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (7 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_linear_combination is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_linear_combination_hls_linear_combination,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4604,HLS_SYN_LUT=4793,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_387 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter25 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter26 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter27 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter28 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter29 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter30 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter31 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter32 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter33 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter34 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter35 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter36 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal empty_8_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln10_fu_770_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_reg_1848 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln10_1_reg_1858 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal accumulators_0_0_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_0_reg_1922 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal accumulators_0_1_fu_969_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_1_reg_1927 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_2_fu_974_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_2_reg_1932 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_3_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_3_reg_1937 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_0_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_0_reg_1942 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_1_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_1_reg_1947 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_2_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_2_reg_1952 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_3_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_3_reg_1957 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_0_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_0_reg_1962 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_1_fu_1009_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_1_reg_1967 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_2_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_2_reg_1972 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_3_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_3_reg_1977 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_0_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_0_reg_1982 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_1_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_1_reg_1987 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_2_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_2_reg_1992 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_3_fu_1039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_3_reg_1997 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_0_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_0_reg_2002 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_1_fu_1049_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_1_reg_2007 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_2_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_2_reg_2012 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_3_fu_1059_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_3_reg_2017 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_0_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_0_reg_2022 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_1_fu_1069_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_1_reg_2027 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_2_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_2_reg_2032 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_3_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_3_reg_2037 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_0_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_0_reg_2042 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_1_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_1_reg_2047 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_2_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_2_reg_2052 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_3_fu_1099_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_3_reg_2057 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_0_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_0_reg_2062 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_1_fu_1109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_1_reg_2067 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_2_fu_1114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_2_reg_2072 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_3_fu_1119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_3_reg_2077 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_0_fu_1124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_0_reg_2082 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_1_fu_1129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_1_reg_2087 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_2_fu_1134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_2_reg_2092 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_3_fu_1139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_3_reg_2097 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_0_fu_1144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_0_reg_2102 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_1_fu_1149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_1_reg_2107 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_2_fu_1154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_2_reg_2112 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_3_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_3_reg_2117 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_0_fu_1164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_0_reg_2122 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_1_fu_1169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_1_reg_2127 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_2_fu_1174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_2_reg_2132 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_3_fu_1179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_3_reg_2137 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_0_fu_1184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_0_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_1_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_1_reg_2147 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_2_fu_1194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_2_reg_2152 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_3_fu_1199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_3_reg_2157 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_0_fu_1204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_0_reg_2162 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_1_fu_1209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_1_reg_2167 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_2_fu_1214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_2_reg_2172 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_0_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_0_reg_2177 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_1_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_1_reg_2182 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_2_fu_1229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_2_reg_2187 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_0_fu_1234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_0_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_1_fu_1239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_1_reg_2197 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_2_fu_1244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_2_reg_2202 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_0_fu_1249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_0_reg_2207 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_1_fu_1254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_1_reg_2212 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_2_fu_1259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_2_reg_2217 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln10_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln17_fu_1275_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln17_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_2235_pp2_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_fu_1287_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_1301_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1310_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1319_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1328_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1338_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1348_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1358_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1368_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1378_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1388_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1398_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1408_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1418_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1428_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1438_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1448_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter36 : STD_LOGIC := '0';
    signal empty_reg_365 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond136_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln10_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp2_iter0_phi_ln23_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp2_iter1_phi_ln23_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_0_0_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_fu_448_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal newIndex1055_t_fu_452_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal accumulators_0_1_0_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_2_0_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_3_0_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_0_0_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_1_0_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_2_0_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_3_0_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_0_0_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_1_0_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_2_0_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_3_0_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_0_0_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_1_0_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_2_0_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_3_0_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_0_0_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_1_0_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_2_0_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_3_0_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_0_0_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_1_0_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_2_0_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_3_0_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_0_0_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_1_0_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_2_0_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_3_0_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_0_0_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_1_0_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_2_0_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_3_0_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_0_0_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_1_0_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_2_0_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_3_0_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_0_0_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_1_0_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_2_0_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_3_0_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_0_0_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_1_0_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_2_0_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_3_0_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_0_0_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_1_0_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_2_0_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_3_0_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_0_0_fu_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_1_0_fu_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_2_0_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_0_0_fu_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_1_0_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_2_0_fu_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_0_0_fu_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_1_0_fu_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_2_0_fu_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_0_0_fu_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_1_0_fu_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_2_0_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal mul_ln10_fu_770_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln10_fu_770_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_779_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln10_fu_1270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_14_fu_1301_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_1310_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_1319_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_1328_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_1338_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_1348_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1358_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1368_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1378_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1388_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_1398_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_1408_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1418_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1428_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1438_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_1448_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_779_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln10_fu_770_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_fu_770_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_286 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hls_linear_combination_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component hls_linear_combination_mul_16ns_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_linear_combination_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_linear_combination_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_linear_combination_urem_32ns_6ns_8_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_1_1_U1 : component hls_linear_combination_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln10_fu_770_p0,
        din1 => mul_ln10_fu_770_p1,
        dout => mul_ln10_fu_770_p2);

    mul_16ns_32s_32_2_1_U2 : component hls_linear_combination_mul_16ns_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_779_p0,
        din1 => len,
        ce => ap_const_logic_1,
        dout => grp_fu_779_p2);

    mux_32_32_1_1_U3 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_14_0_reg_2192,
        din1 => accumulators_14_1_reg_2197,
        din2 => accumulators_14_2_reg_2202,
        din3 => tmp_14_fu_1301_p4,
        dout => tmp_14_fu_1301_p5);

    mux_32_32_1_1_U4 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_13_0_reg_2177,
        din1 => accumulators_13_1_reg_2182,
        din2 => accumulators_13_2_reg_2187,
        din3 => tmp_13_fu_1310_p4,
        dout => tmp_13_fu_1310_p5);

    mux_32_32_1_1_U5 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_12_0_reg_2162,
        din1 => accumulators_12_1_reg_2167,
        din2 => accumulators_12_2_reg_2172,
        din3 => tmp_12_fu_1319_p4,
        dout => tmp_12_fu_1319_p5);

    mux_42_32_1_1_U6 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_11_0_reg_2142,
        din1 => accumulators_11_1_reg_2147,
        din2 => accumulators_11_2_reg_2152,
        din3 => accumulators_11_3_reg_2157,
        din4 => tmp_11_fu_1328_p5,
        dout => tmp_11_fu_1328_p6);

    mux_42_32_1_1_U7 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_10_0_reg_2122,
        din1 => accumulators_10_1_reg_2127,
        din2 => accumulators_10_2_reg_2132,
        din3 => accumulators_10_3_reg_2137,
        din4 => tmp_10_fu_1338_p5,
        dout => tmp_10_fu_1338_p6);

    mux_42_32_1_1_U8 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_9_0_reg_2102,
        din1 => accumulators_9_1_reg_2107,
        din2 => accumulators_9_2_reg_2112,
        din3 => accumulators_9_3_reg_2117,
        din4 => tmp_s_fu_1348_p5,
        dout => tmp_s_fu_1348_p6);

    mux_42_32_1_1_U9 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_8_0_reg_2082,
        din1 => accumulators_8_1_reg_2087,
        din2 => accumulators_8_2_reg_2092,
        din3 => accumulators_8_3_reg_2097,
        din4 => tmp_9_fu_1358_p5,
        dout => tmp_9_fu_1358_p6);

    mux_42_32_1_1_U10 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_7_0_reg_2062,
        din1 => accumulators_7_1_reg_2067,
        din2 => accumulators_7_2_reg_2072,
        din3 => accumulators_7_3_reg_2077,
        din4 => tmp_8_fu_1368_p5,
        dout => tmp_8_fu_1368_p6);

    mux_42_32_1_1_U11 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_6_0_reg_2042,
        din1 => accumulators_6_1_reg_2047,
        din2 => accumulators_6_2_reg_2052,
        din3 => accumulators_6_3_reg_2057,
        din4 => tmp_7_fu_1378_p5,
        dout => tmp_7_fu_1378_p6);

    mux_42_32_1_1_U12 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_5_0_reg_2022,
        din1 => accumulators_5_1_reg_2027,
        din2 => accumulators_5_2_reg_2032,
        din3 => accumulators_5_3_reg_2037,
        din4 => tmp_6_fu_1388_p5,
        dout => tmp_6_fu_1388_p6);

    mux_42_32_1_1_U13 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_4_0_reg_2002,
        din1 => accumulators_4_1_reg_2007,
        din2 => accumulators_4_2_reg_2012,
        din3 => accumulators_4_3_reg_2017,
        din4 => tmp_5_fu_1398_p5,
        dout => tmp_5_fu_1398_p6);

    mux_42_32_1_1_U14 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_3_0_reg_1982,
        din1 => accumulators_3_1_reg_1987,
        din2 => accumulators_3_2_reg_1992,
        din3 => accumulators_3_3_reg_1997,
        din4 => tmp_4_fu_1408_p5,
        dout => tmp_4_fu_1408_p6);

    mux_42_32_1_1_U15 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_2_0_reg_1962,
        din1 => accumulators_2_1_reg_1967,
        din2 => accumulators_2_2_reg_1972,
        din3 => accumulators_2_3_reg_1977,
        din4 => tmp_3_fu_1418_p5,
        dout => tmp_3_fu_1418_p6);

    mux_42_32_1_1_U16 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_1_0_reg_1942,
        din1 => accumulators_1_1_reg_1947,
        din2 => accumulators_1_2_reg_1952,
        din3 => accumulators_1_3_reg_1957,
        din4 => tmp_2_fu_1428_p5,
        dout => tmp_2_fu_1428_p6);

    mux_42_32_1_1_U17 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_0_0_reg_1922,
        din1 => accumulators_0_1_reg_1927,
        din2 => accumulators_0_2_reg_1932,
        din3 => accumulators_0_3_reg_1937,
        din4 => tmp_1_fu_1438_p5,
        dout => tmp_1_fu_1438_p6);

    mux_32_32_1_1_U18 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_15_0_reg_2207,
        din1 => accumulators_15_1_reg_2212,
        din2 => accumulators_15_2_reg_2217,
        din3 => tmp_fu_1448_p4,
        dout => tmp_fu_1448_p5);

    urem_32ns_6ns_8_36_1_U19 : component hls_linear_combination_urem_32ns_6ns_8_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp2_iter1_phi_ln23_reg_398,
        din1 => grp_fu_1457_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1457_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter34 <= ap_enable_reg_pp2_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter35 <= ap_enable_reg_pp2_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter36 <= ap_enable_reg_pp2_iter35;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter36 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp2_iter1_phi_ln23_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_286)) then
                if (((trunc_ln23_fu_1287_p1 = ap_const_lv4_F) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_fu_1448_p5;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_E) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_14_fu_1301_p5;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_D) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_13_fu_1310_p5;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_C) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_12_fu_1319_p5;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_B) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_11_fu_1328_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_A) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_10_fu_1338_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_9) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_s_fu_1348_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_8) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_9_fu_1358_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_7) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_8_fu_1368_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_6) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_7_fu_1378_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_5) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_6_fu_1388_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_4) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_5_fu_1398_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_3) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_4_fu_1408_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_2) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_3_fu_1418_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_1) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_2_fu_1428_p6;
                elsif (((trunc_ln23_fu_1287_p1 = ap_const_lv4_0) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= tmp_1_fu_1438_p6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp2_iter1_phi_ln23_reg_398 <= ap_phi_reg_pp2_iter0_phi_ln23_reg_398;
                end if;
            end if; 
        end if;
    end process;

    empty_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond136_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_365 <= empty_8_fu_436_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_reg_365 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_387 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_1_reg_387 <= add_ln17_fu_1275_p2;
            end if; 
        end if;
    end process;

    i_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_1270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_376 <= add_ln10_fu_1264_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_376 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                accumulators_0_0_reg_1922 <= accumulators_0_0_fu_964_p2;
                accumulators_0_1_reg_1927 <= accumulators_0_1_fu_969_p2;
                accumulators_0_2_reg_1932 <= accumulators_0_2_fu_974_p2;
                accumulators_0_3_reg_1937 <= accumulators_0_3_fu_979_p2;
                accumulators_10_0_reg_2122 <= accumulators_10_0_fu_1164_p2;
                accumulators_10_1_reg_2127 <= accumulators_10_1_fu_1169_p2;
                accumulators_10_2_reg_2132 <= accumulators_10_2_fu_1174_p2;
                accumulators_10_3_reg_2137 <= accumulators_10_3_fu_1179_p2;
                accumulators_11_0_reg_2142 <= accumulators_11_0_fu_1184_p2;
                accumulators_11_1_reg_2147 <= accumulators_11_1_fu_1189_p2;
                accumulators_11_2_reg_2152 <= accumulators_11_2_fu_1194_p2;
                accumulators_11_3_reg_2157 <= accumulators_11_3_fu_1199_p2;
                accumulators_12_0_reg_2162 <= accumulators_12_0_fu_1204_p2;
                accumulators_12_1_reg_2167 <= accumulators_12_1_fu_1209_p2;
                accumulators_12_2_reg_2172 <= accumulators_12_2_fu_1214_p2;
                accumulators_13_0_reg_2177 <= accumulators_13_0_fu_1219_p2;
                accumulators_13_1_reg_2182 <= accumulators_13_1_fu_1224_p2;
                accumulators_13_2_reg_2187 <= accumulators_13_2_fu_1229_p2;
                accumulators_14_0_reg_2192 <= accumulators_14_0_fu_1234_p2;
                accumulators_14_1_reg_2197 <= accumulators_14_1_fu_1239_p2;
                accumulators_14_2_reg_2202 <= accumulators_14_2_fu_1244_p2;
                accumulators_15_0_reg_2207 <= accumulators_15_0_fu_1249_p2;
                accumulators_15_1_reg_2212 <= accumulators_15_1_fu_1254_p2;
                accumulators_15_2_reg_2217 <= accumulators_15_2_fu_1259_p2;
                accumulators_1_0_reg_1942 <= accumulators_1_0_fu_984_p2;
                accumulators_1_1_reg_1947 <= accumulators_1_1_fu_989_p2;
                accumulators_1_2_reg_1952 <= accumulators_1_2_fu_994_p2;
                accumulators_1_3_reg_1957 <= accumulators_1_3_fu_999_p2;
                accumulators_2_0_reg_1962 <= accumulators_2_0_fu_1004_p2;
                accumulators_2_1_reg_1967 <= accumulators_2_1_fu_1009_p2;
                accumulators_2_2_reg_1972 <= accumulators_2_2_fu_1014_p2;
                accumulators_2_3_reg_1977 <= accumulators_2_3_fu_1019_p2;
                accumulators_3_0_reg_1982 <= accumulators_3_0_fu_1024_p2;
                accumulators_3_1_reg_1987 <= accumulators_3_1_fu_1029_p2;
                accumulators_3_2_reg_1992 <= accumulators_3_2_fu_1034_p2;
                accumulators_3_3_reg_1997 <= accumulators_3_3_fu_1039_p2;
                accumulators_4_0_reg_2002 <= accumulators_4_0_fu_1044_p2;
                accumulators_4_1_reg_2007 <= accumulators_4_1_fu_1049_p2;
                accumulators_4_2_reg_2012 <= accumulators_4_2_fu_1054_p2;
                accumulators_4_3_reg_2017 <= accumulators_4_3_fu_1059_p2;
                accumulators_5_0_reg_2022 <= accumulators_5_0_fu_1064_p2;
                accumulators_5_1_reg_2027 <= accumulators_5_1_fu_1069_p2;
                accumulators_5_2_reg_2032 <= accumulators_5_2_fu_1074_p2;
                accumulators_5_3_reg_2037 <= accumulators_5_3_fu_1079_p2;
                accumulators_6_0_reg_2042 <= accumulators_6_0_fu_1084_p2;
                accumulators_6_1_reg_2047 <= accumulators_6_1_fu_1089_p2;
                accumulators_6_2_reg_2052 <= accumulators_6_2_fu_1094_p2;
                accumulators_6_3_reg_2057 <= accumulators_6_3_fu_1099_p2;
                accumulators_7_0_reg_2062 <= accumulators_7_0_fu_1104_p2;
                accumulators_7_1_reg_2067 <= accumulators_7_1_fu_1109_p2;
                accumulators_7_2_reg_2072 <= accumulators_7_2_fu_1114_p2;
                accumulators_7_3_reg_2077 <= accumulators_7_3_fu_1119_p2;
                accumulators_8_0_reg_2082 <= accumulators_8_0_fu_1124_p2;
                accumulators_8_1_reg_2087 <= accumulators_8_1_fu_1129_p2;
                accumulators_8_2_reg_2092 <= accumulators_8_2_fu_1134_p2;
                accumulators_8_3_reg_2097 <= accumulators_8_3_fu_1139_p2;
                accumulators_9_0_reg_2102 <= accumulators_9_0_fu_1144_p2;
                accumulators_9_1_reg_2107 <= accumulators_9_1_fu_1149_p2;
                accumulators_9_2_reg_2112 <= accumulators_9_2_fu_1154_p2;
                accumulators_9_3_reg_2117 <= accumulators_9_3_fu_1159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln17_reg_2235 <= icmp_ln17_fu_1281_p2;
                icmp_ln17_reg_2235_pp2_iter1_reg <= icmp_ln17_reg_2235;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln17_reg_2235_pp2_iter10_reg <= icmp_ln17_reg_2235_pp2_iter9_reg;
                icmp_ln17_reg_2235_pp2_iter11_reg <= icmp_ln17_reg_2235_pp2_iter10_reg;
                icmp_ln17_reg_2235_pp2_iter12_reg <= icmp_ln17_reg_2235_pp2_iter11_reg;
                icmp_ln17_reg_2235_pp2_iter13_reg <= icmp_ln17_reg_2235_pp2_iter12_reg;
                icmp_ln17_reg_2235_pp2_iter14_reg <= icmp_ln17_reg_2235_pp2_iter13_reg;
                icmp_ln17_reg_2235_pp2_iter15_reg <= icmp_ln17_reg_2235_pp2_iter14_reg;
                icmp_ln17_reg_2235_pp2_iter16_reg <= icmp_ln17_reg_2235_pp2_iter15_reg;
                icmp_ln17_reg_2235_pp2_iter17_reg <= icmp_ln17_reg_2235_pp2_iter16_reg;
                icmp_ln17_reg_2235_pp2_iter18_reg <= icmp_ln17_reg_2235_pp2_iter17_reg;
                icmp_ln17_reg_2235_pp2_iter19_reg <= icmp_ln17_reg_2235_pp2_iter18_reg;
                icmp_ln17_reg_2235_pp2_iter20_reg <= icmp_ln17_reg_2235_pp2_iter19_reg;
                icmp_ln17_reg_2235_pp2_iter21_reg <= icmp_ln17_reg_2235_pp2_iter20_reg;
                icmp_ln17_reg_2235_pp2_iter22_reg <= icmp_ln17_reg_2235_pp2_iter21_reg;
                icmp_ln17_reg_2235_pp2_iter23_reg <= icmp_ln17_reg_2235_pp2_iter22_reg;
                icmp_ln17_reg_2235_pp2_iter24_reg <= icmp_ln17_reg_2235_pp2_iter23_reg;
                icmp_ln17_reg_2235_pp2_iter25_reg <= icmp_ln17_reg_2235_pp2_iter24_reg;
                icmp_ln17_reg_2235_pp2_iter26_reg <= icmp_ln17_reg_2235_pp2_iter25_reg;
                icmp_ln17_reg_2235_pp2_iter27_reg <= icmp_ln17_reg_2235_pp2_iter26_reg;
                icmp_ln17_reg_2235_pp2_iter28_reg <= icmp_ln17_reg_2235_pp2_iter27_reg;
                icmp_ln17_reg_2235_pp2_iter29_reg <= icmp_ln17_reg_2235_pp2_iter28_reg;
                icmp_ln17_reg_2235_pp2_iter2_reg <= icmp_ln17_reg_2235_pp2_iter1_reg;
                icmp_ln17_reg_2235_pp2_iter30_reg <= icmp_ln17_reg_2235_pp2_iter29_reg;
                icmp_ln17_reg_2235_pp2_iter31_reg <= icmp_ln17_reg_2235_pp2_iter30_reg;
                icmp_ln17_reg_2235_pp2_iter32_reg <= icmp_ln17_reg_2235_pp2_iter31_reg;
                icmp_ln17_reg_2235_pp2_iter33_reg <= icmp_ln17_reg_2235_pp2_iter32_reg;
                icmp_ln17_reg_2235_pp2_iter34_reg <= icmp_ln17_reg_2235_pp2_iter33_reg;
                icmp_ln17_reg_2235_pp2_iter35_reg <= icmp_ln17_reg_2235_pp2_iter34_reg;
                icmp_ln17_reg_2235_pp2_iter3_reg <= icmp_ln17_reg_2235_pp2_iter2_reg;
                icmp_ln17_reg_2235_pp2_iter4_reg <= icmp_ln17_reg_2235_pp2_iter3_reg;
                icmp_ln17_reg_2235_pp2_iter5_reg <= icmp_ln17_reg_2235_pp2_iter4_reg;
                icmp_ln17_reg_2235_pp2_iter6_reg <= icmp_ln17_reg_2235_pp2_iter5_reg;
                icmp_ln17_reg_2235_pp2_iter7_reg <= icmp_ln17_reg_2235_pp2_iter6_reg;
                icmp_ln17_reg_2235_pp2_iter8_reg <= icmp_ln17_reg_2235_pp2_iter7_reg;
                icmp_ln17_reg_2235_pp2_iter9_reg <= icmp_ln17_reg_2235_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln10_1_reg_1858 <= grp_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln10_reg_1848 <= mul_ln10_fu_770_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_enable_reg_pp2_iter0, icmp_ln17_fu_1281_p2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter35, ap_enable_reg_pp2_iter36, exitcond136_fu_442_p2, icmp_ln10_fu_1270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond136_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln10_fu_1270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter36 = ap_const_logic_1) and (ap_enable_reg_pp2_iter35 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter36 = ap_const_logic_1) and (ap_enable_reg_pp2_iter35 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln17_fu_1281_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    accumulators_0_0_0_fu_100 <= ap_const_lv32_0;
    accumulators_0_0_fu_964_p2 <= std_logic_vector(unsigned(accumulators_0_0_0_fu_100) + unsigned(mul_ln10_1_reg_1858));
    accumulators_0_1_0_fu_104 <= ap_const_lv32_0;
    accumulators_0_1_fu_969_p2 <= std_logic_vector(unsigned(accumulators_0_1_0_fu_104) + unsigned(mul_ln10_1_reg_1858));
    accumulators_0_2_0_fu_108 <= ap_const_lv32_0;
    accumulators_0_2_fu_974_p2 <= std_logic_vector(unsigned(accumulators_0_2_0_fu_108) + unsigned(mul_ln10_1_reg_1858));
    accumulators_0_3_0_fu_112 <= ap_const_lv32_0;
    accumulators_0_3_fu_979_p2 <= std_logic_vector(unsigned(accumulators_0_3_0_fu_112) + unsigned(mul_ln10_1_reg_1858));
    accumulators_10_0_0_fu_260 <= ap_const_lv32_0;
    accumulators_10_0_fu_1164_p2 <= std_logic_vector(unsigned(accumulators_10_0_0_fu_260) + unsigned(mul_ln10_1_reg_1858));
    accumulators_10_1_0_fu_264 <= ap_const_lv32_0;
    accumulators_10_1_fu_1169_p2 <= std_logic_vector(unsigned(accumulators_10_1_0_fu_264) + unsigned(mul_ln10_1_reg_1858));
    accumulators_10_2_0_fu_268 <= ap_const_lv32_0;
    accumulators_10_2_fu_1174_p2 <= std_logic_vector(unsigned(accumulators_10_2_0_fu_268) + unsigned(mul_ln10_1_reg_1858));
    accumulators_10_3_0_fu_272 <= ap_const_lv32_0;
    accumulators_10_3_fu_1179_p2 <= std_logic_vector(unsigned(accumulators_10_3_0_fu_272) + unsigned(mul_ln10_1_reg_1858));
    accumulators_11_0_0_fu_276 <= ap_const_lv32_0;
    accumulators_11_0_fu_1184_p2 <= std_logic_vector(unsigned(accumulators_11_0_0_fu_276) + unsigned(mul_ln10_1_reg_1858));
    accumulators_11_1_0_fu_280 <= ap_const_lv32_0;
    accumulators_11_1_fu_1189_p2 <= std_logic_vector(unsigned(accumulators_11_1_0_fu_280) + unsigned(mul_ln10_1_reg_1858));
    accumulators_11_2_0_fu_284 <= ap_const_lv32_0;
    accumulators_11_2_fu_1194_p2 <= std_logic_vector(unsigned(accumulators_11_2_0_fu_284) + unsigned(mul_ln10_1_reg_1858));
    accumulators_11_3_0_fu_288 <= ap_const_lv32_0;
    accumulators_11_3_fu_1199_p2 <= std_logic_vector(unsigned(accumulators_11_3_0_fu_288) + unsigned(mul_ln10_1_reg_1858));
    accumulators_12_0_0_fu_292 <= ap_const_lv32_0;
    accumulators_12_0_fu_1204_p2 <= std_logic_vector(unsigned(accumulators_12_0_0_fu_292) + unsigned(mul_ln10_1_reg_1858));
    accumulators_12_1_0_fu_296 <= ap_const_lv32_0;
    accumulators_12_1_fu_1209_p2 <= std_logic_vector(unsigned(accumulators_12_1_0_fu_296) + unsigned(mul_ln10_1_reg_1858));
    accumulators_12_2_0_fu_300 <= ap_const_lv32_0;
    accumulators_12_2_fu_1214_p2 <= std_logic_vector(unsigned(accumulators_12_2_0_fu_300) + unsigned(mul_ln10_1_reg_1858));
    accumulators_13_0_0_fu_304 <= ap_const_lv32_0;
    accumulators_13_0_fu_1219_p2 <= std_logic_vector(unsigned(accumulators_13_0_0_fu_304) + unsigned(mul_ln10_1_reg_1858));
    accumulators_13_1_0_fu_308 <= ap_const_lv32_0;
    accumulators_13_1_fu_1224_p2 <= std_logic_vector(unsigned(accumulators_13_1_0_fu_308) + unsigned(mul_ln10_1_reg_1858));
    accumulators_13_2_0_fu_312 <= ap_const_lv32_0;
    accumulators_13_2_fu_1229_p2 <= std_logic_vector(unsigned(accumulators_13_2_0_fu_312) + unsigned(mul_ln10_1_reg_1858));
    accumulators_14_0_0_fu_316 <= ap_const_lv32_0;
    accumulators_14_0_fu_1234_p2 <= std_logic_vector(unsigned(accumulators_14_0_0_fu_316) + unsigned(mul_ln10_1_reg_1858));
    accumulators_14_1_0_fu_320 <= ap_const_lv32_0;
    accumulators_14_1_fu_1239_p2 <= std_logic_vector(unsigned(accumulators_14_1_0_fu_320) + unsigned(mul_ln10_1_reg_1858));
    accumulators_14_2_0_fu_324 <= ap_const_lv32_0;
    accumulators_14_2_fu_1244_p2 <= std_logic_vector(unsigned(accumulators_14_2_0_fu_324) + unsigned(mul_ln10_1_reg_1858));
    accumulators_15_0_0_fu_328 <= ap_const_lv32_0;
    accumulators_15_0_fu_1249_p2 <= std_logic_vector(unsigned(accumulators_15_0_0_fu_328) + unsigned(mul_ln10_1_reg_1858));
    accumulators_15_1_0_fu_332 <= ap_const_lv32_0;
    accumulators_15_1_fu_1254_p2 <= std_logic_vector(unsigned(accumulators_15_1_0_fu_332) + unsigned(mul_ln10_1_reg_1858));
    accumulators_15_2_0_fu_336 <= ap_const_lv32_0;
    accumulators_15_2_fu_1259_p2 <= std_logic_vector(unsigned(accumulators_15_2_0_fu_336) + unsigned(mul_ln10_1_reg_1858));
    accumulators_1_0_0_fu_116 <= ap_const_lv32_0;
    accumulators_1_0_fu_984_p2 <= std_logic_vector(unsigned(accumulators_1_0_0_fu_116) + unsigned(mul_ln10_1_reg_1858));
    accumulators_1_1_0_fu_120 <= ap_const_lv32_0;
    accumulators_1_1_fu_989_p2 <= std_logic_vector(unsigned(accumulators_1_1_0_fu_120) + unsigned(mul_ln10_1_reg_1858));
    accumulators_1_2_0_fu_124 <= ap_const_lv32_0;
    accumulators_1_2_fu_994_p2 <= std_logic_vector(unsigned(accumulators_1_2_0_fu_124) + unsigned(mul_ln10_1_reg_1858));
    accumulators_1_3_0_fu_128 <= ap_const_lv32_0;
    accumulators_1_3_fu_999_p2 <= std_logic_vector(unsigned(accumulators_1_3_0_fu_128) + unsigned(mul_ln10_1_reg_1858));
    accumulators_2_0_0_fu_132 <= ap_const_lv32_0;
    accumulators_2_0_fu_1004_p2 <= std_logic_vector(unsigned(accumulators_2_0_0_fu_132) + unsigned(mul_ln10_1_reg_1858));
    accumulators_2_1_0_fu_136 <= ap_const_lv32_0;
    accumulators_2_1_fu_1009_p2 <= std_logic_vector(unsigned(accumulators_2_1_0_fu_136) + unsigned(mul_ln10_1_reg_1858));
    accumulators_2_2_0_fu_140 <= ap_const_lv32_0;
    accumulators_2_2_fu_1014_p2 <= std_logic_vector(unsigned(accumulators_2_2_0_fu_140) + unsigned(mul_ln10_1_reg_1858));
    accumulators_2_3_0_fu_144 <= ap_const_lv32_0;
    accumulators_2_3_fu_1019_p2 <= std_logic_vector(unsigned(accumulators_2_3_0_fu_144) + unsigned(mul_ln10_1_reg_1858));
    accumulators_3_0_0_fu_148 <= ap_const_lv32_0;
    accumulators_3_0_fu_1024_p2 <= std_logic_vector(unsigned(accumulators_3_0_0_fu_148) + unsigned(mul_ln10_1_reg_1858));
    accumulators_3_1_0_fu_152 <= ap_const_lv32_0;
    accumulators_3_1_fu_1029_p2 <= std_logic_vector(unsigned(accumulators_3_1_0_fu_152) + unsigned(mul_ln10_1_reg_1858));
    accumulators_3_2_0_fu_156 <= ap_const_lv32_0;
    accumulators_3_2_fu_1034_p2 <= std_logic_vector(unsigned(accumulators_3_2_0_fu_156) + unsigned(mul_ln10_1_reg_1858));
    accumulators_3_3_0_fu_160 <= ap_const_lv32_0;
    accumulators_3_3_fu_1039_p2 <= std_logic_vector(unsigned(accumulators_3_3_0_fu_160) + unsigned(mul_ln10_1_reg_1858));
    accumulators_4_0_0_fu_164 <= ap_const_lv32_0;
    accumulators_4_0_fu_1044_p2 <= std_logic_vector(unsigned(accumulators_4_0_0_fu_164) + unsigned(mul_ln10_1_reg_1858));
    accumulators_4_1_0_fu_168 <= ap_const_lv32_0;
    accumulators_4_1_fu_1049_p2 <= std_logic_vector(unsigned(accumulators_4_1_0_fu_168) + unsigned(mul_ln10_1_reg_1858));
    accumulators_4_2_0_fu_172 <= ap_const_lv32_0;
    accumulators_4_2_fu_1054_p2 <= std_logic_vector(unsigned(accumulators_4_2_0_fu_172) + unsigned(mul_ln10_1_reg_1858));
    accumulators_4_3_0_fu_176 <= ap_const_lv32_0;
    accumulators_4_3_fu_1059_p2 <= std_logic_vector(unsigned(accumulators_4_3_0_fu_176) + unsigned(mul_ln10_1_reg_1858));
    accumulators_5_0_0_fu_180 <= ap_const_lv32_0;
    accumulators_5_0_fu_1064_p2 <= std_logic_vector(unsigned(accumulators_5_0_0_fu_180) + unsigned(mul_ln10_1_reg_1858));
    accumulators_5_1_0_fu_184 <= ap_const_lv32_0;
    accumulators_5_1_fu_1069_p2 <= std_logic_vector(unsigned(accumulators_5_1_0_fu_184) + unsigned(mul_ln10_1_reg_1858));
    accumulators_5_2_0_fu_188 <= ap_const_lv32_0;
    accumulators_5_2_fu_1074_p2 <= std_logic_vector(unsigned(accumulators_5_2_0_fu_188) + unsigned(mul_ln10_1_reg_1858));
    accumulators_5_3_0_fu_192 <= ap_const_lv32_0;
    accumulators_5_3_fu_1079_p2 <= std_logic_vector(unsigned(accumulators_5_3_0_fu_192) + unsigned(mul_ln10_1_reg_1858));
    accumulators_6_0_0_fu_196 <= ap_const_lv32_0;
    accumulators_6_0_fu_1084_p2 <= std_logic_vector(unsigned(accumulators_6_0_0_fu_196) + unsigned(mul_ln10_1_reg_1858));
    accumulators_6_1_0_fu_200 <= ap_const_lv32_0;
    accumulators_6_1_fu_1089_p2 <= std_logic_vector(unsigned(accumulators_6_1_0_fu_200) + unsigned(mul_ln10_1_reg_1858));
    accumulators_6_2_0_fu_204 <= ap_const_lv32_0;
    accumulators_6_2_fu_1094_p2 <= std_logic_vector(unsigned(accumulators_6_2_0_fu_204) + unsigned(mul_ln10_1_reg_1858));
    accumulators_6_3_0_fu_208 <= ap_const_lv32_0;
    accumulators_6_3_fu_1099_p2 <= std_logic_vector(unsigned(accumulators_6_3_0_fu_208) + unsigned(mul_ln10_1_reg_1858));
    accumulators_7_0_0_fu_212 <= ap_const_lv32_0;
    accumulators_7_0_fu_1104_p2 <= std_logic_vector(unsigned(accumulators_7_0_0_fu_212) + unsigned(mul_ln10_1_reg_1858));
    accumulators_7_1_0_fu_216 <= ap_const_lv32_0;
    accumulators_7_1_fu_1109_p2 <= std_logic_vector(unsigned(accumulators_7_1_0_fu_216) + unsigned(mul_ln10_1_reg_1858));
    accumulators_7_2_0_fu_220 <= ap_const_lv32_0;
    accumulators_7_2_fu_1114_p2 <= std_logic_vector(unsigned(accumulators_7_2_0_fu_220) + unsigned(mul_ln10_1_reg_1858));
    accumulators_7_3_0_fu_224 <= ap_const_lv32_0;
    accumulators_7_3_fu_1119_p2 <= std_logic_vector(unsigned(accumulators_7_3_0_fu_224) + unsigned(mul_ln10_1_reg_1858));
    accumulators_8_0_0_fu_228 <= ap_const_lv32_0;
    accumulators_8_0_fu_1124_p2 <= std_logic_vector(unsigned(accumulators_8_0_0_fu_228) + unsigned(mul_ln10_1_reg_1858));
    accumulators_8_1_0_fu_232 <= ap_const_lv32_0;
    accumulators_8_1_fu_1129_p2 <= std_logic_vector(unsigned(accumulators_8_1_0_fu_232) + unsigned(mul_ln10_1_reg_1858));
    accumulators_8_2_0_fu_236 <= ap_const_lv32_0;
    accumulators_8_2_fu_1134_p2 <= std_logic_vector(unsigned(accumulators_8_2_0_fu_236) + unsigned(mul_ln10_1_reg_1858));
    accumulators_8_3_0_fu_240 <= ap_const_lv32_0;
    accumulators_8_3_fu_1139_p2 <= std_logic_vector(unsigned(accumulators_8_3_0_fu_240) + unsigned(mul_ln10_1_reg_1858));
    accumulators_9_0_0_fu_244 <= ap_const_lv32_0;
    accumulators_9_0_fu_1144_p2 <= std_logic_vector(unsigned(accumulators_9_0_0_fu_244) + unsigned(mul_ln10_1_reg_1858));
    accumulators_9_1_0_fu_248 <= ap_const_lv32_0;
    accumulators_9_1_fu_1149_p2 <= std_logic_vector(unsigned(accumulators_9_1_0_fu_248) + unsigned(mul_ln10_1_reg_1858));
    accumulators_9_2_0_fu_252 <= ap_const_lv32_0;
    accumulators_9_2_fu_1154_p2 <= std_logic_vector(unsigned(accumulators_9_2_0_fu_252) + unsigned(mul_ln10_1_reg_1858));
    accumulators_9_3_0_fu_256 <= ap_const_lv32_0;
    accumulators_9_3_fu_1159_p2 <= std_logic_vector(unsigned(accumulators_9_3_0_fu_256) + unsigned(mul_ln10_1_reg_1858));
    add_ln10_fu_1264_p2 <= std_logic_vector(unsigned(i_reg_376) + unsigned(ap_const_lv32_1));
    add_ln17_fu_1275_p2 <= std_logic_vector(unsigned(i_1_reg_387) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state46 <= ap_CS_fsm(9);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_286_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
                ap_condition_286 <= ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0));
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln17_fu_1281_p2)
    begin
        if ((icmp_ln17_fu_1281_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25, ap_enable_reg_pp2_iter26, ap_enable_reg_pp2_iter27, ap_enable_reg_pp2_iter28, ap_enable_reg_pp2_iter29, ap_enable_reg_pp2_iter30, ap_enable_reg_pp2_iter31, ap_enable_reg_pp2_iter32, ap_enable_reg_pp2_iter33, ap_enable_reg_pp2_iter34, ap_enable_reg_pp2_iter35, ap_enable_reg_pp2_iter36)
    begin
        if (((ap_enable_reg_pp2_iter36 = ap_const_logic_0) and (ap_enable_reg_pp2_iter35 = ap_const_logic_0) and (ap_enable_reg_pp2_iter34 = ap_const_logic_0) and (ap_enable_reg_pp2_iter33 = ap_const_logic_0) and (ap_enable_reg_pp2_iter32 = ap_const_logic_0) and (ap_enable_reg_pp2_iter31 = ap_const_logic_0) and (ap_enable_reg_pp2_iter30 = ap_const_logic_0) and (ap_enable_reg_pp2_iter29 = ap_const_logic_0) and (ap_enable_reg_pp2_iter28 = ap_const_logic_0) and (ap_enable_reg_pp2_iter27 = ap_const_logic_0) and (ap_enable_reg_pp2_iter26 = ap_const_logic_0) and (ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp2_iter0_phi_ln23_reg_398 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_448_p1 <= empty_reg_365(4 - 1 downto 0);
    empty_8_fu_436_p2 <= std_logic_vector(unsigned(empty_reg_365) + unsigned(ap_const_lv6_1));
    exitcond136_fu_442_p2 <= "1" when (empty_reg_365 = ap_const_lv6_3C) else "0";
    grp_fu_1457_p1 <= ap_const_lv32_1F(6 - 1 downto 0);
    grp_fu_779_p0 <= grp_fu_779_p00(16 - 1 downto 0);
    grp_fu_779_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln10_reg_1848),32));
    icmp_ln10_fu_1270_p1 <= len;
    icmp_ln10_fu_1270_p2 <= "1" when (i_reg_376 = icmp_ln10_fu_1270_p1) else "0";
    icmp_ln17_fu_1281_p2 <= "1" when (i_1_reg_387 = ap_const_lv6_3C) else "0";
    mul_ln10_fu_770_p0 <= mul_ln10_fu_770_p00(8 - 1 downto 0);
    mul_ln10_fu_770_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vecs),16));
    mul_ln10_fu_770_p1 <= mul_ln10_fu_770_p10(8 - 1 downto 0);
    mul_ln10_fu_770_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coeffs),16));
    newIndex1055_t_fu_452_p4 <= empty_reg_365(5 downto 4);
    out_r <= grp_fu_1457_p2(8 - 1 downto 0);

    out_r_ap_vld_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln17_reg_2235_pp2_iter35_reg, ap_enable_reg_pp2_iter36)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter36 = ap_const_logic_1) and (icmp_ln17_reg_2235_pp2_iter35_reg = ap_const_lv1_0))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1338_p5 <= i_1_reg_387(5 downto 4);
    tmp_11_fu_1328_p5 <= i_1_reg_387(5 downto 4);
    tmp_12_fu_1319_p4 <= i_1_reg_387(5 downto 4);
    tmp_13_fu_1310_p4 <= i_1_reg_387(5 downto 4);
    tmp_14_fu_1301_p4 <= i_1_reg_387(5 downto 4);
    tmp_1_fu_1438_p5 <= i_1_reg_387(5 downto 4);
    tmp_2_fu_1428_p5 <= i_1_reg_387(5 downto 4);
    tmp_3_fu_1418_p5 <= i_1_reg_387(5 downto 4);
    tmp_4_fu_1408_p5 <= i_1_reg_387(5 downto 4);
    tmp_5_fu_1398_p5 <= i_1_reg_387(5 downto 4);
    tmp_6_fu_1388_p5 <= i_1_reg_387(5 downto 4);
    tmp_7_fu_1378_p5 <= i_1_reg_387(5 downto 4);
    tmp_8_fu_1368_p5 <= i_1_reg_387(5 downto 4);
    tmp_9_fu_1358_p5 <= i_1_reg_387(5 downto 4);
    tmp_fu_1448_p4 <= i_1_reg_387(5 downto 4);
    tmp_s_fu_1348_p5 <= i_1_reg_387(5 downto 4);
    trunc_ln23_fu_1287_p1 <= i_1_reg_387(4 - 1 downto 0);
end behav;
