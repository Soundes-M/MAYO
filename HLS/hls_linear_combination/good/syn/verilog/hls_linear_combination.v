// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_linear_combination_hls_linear_combination,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.039000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2754,HLS_SYN_LUT=2090,HLS_VERSION=2020_2}" *)

module hls_linear_combination (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vecs,
        coeffs,
        len,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state42 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] vecs;
input  [7:0] coeffs;
input  [31:0] len;
output  [7:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_1_reg_120;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
wire    ap_block_state7_pp1_stage0_iter3;
wire    ap_block_state8_pp1_stage0_iter4;
wire    ap_block_state9_pp1_stage0_iter5;
wire    ap_block_state10_pp1_stage0_iter6;
wire    ap_block_state11_pp1_stage0_iter7;
wire    ap_block_state12_pp1_stage0_iter8;
wire    ap_block_state13_pp1_stage0_iter9;
wire    ap_block_state14_pp1_stage0_iter10;
wire    ap_block_state15_pp1_stage0_iter11;
wire    ap_block_state16_pp1_stage0_iter12;
wire    ap_block_state17_pp1_stage0_iter13;
wire    ap_block_state18_pp1_stage0_iter14;
wire    ap_block_state19_pp1_stage0_iter15;
wire    ap_block_state20_pp1_stage0_iter16;
wire    ap_block_state21_pp1_stage0_iter17;
wire    ap_block_state22_pp1_stage0_iter18;
wire    ap_block_state23_pp1_stage0_iter19;
wire    ap_block_state24_pp1_stage0_iter20;
wire    ap_block_state25_pp1_stage0_iter21;
wire    ap_block_state26_pp1_stage0_iter22;
wire    ap_block_state27_pp1_stage0_iter23;
wire    ap_block_state28_pp1_stage0_iter24;
wire    ap_block_state29_pp1_stage0_iter25;
wire    ap_block_state30_pp1_stage0_iter26;
wire    ap_block_state31_pp1_stage0_iter27;
wire    ap_block_state32_pp1_stage0_iter28;
wire    ap_block_state33_pp1_stage0_iter29;
wire    ap_block_state34_pp1_stage0_iter30;
wire    ap_block_state35_pp1_stage0_iter31;
wire    ap_block_state36_pp1_stage0_iter32;
wire    ap_block_state37_pp1_stage0_iter33;
wire    ap_block_state38_pp1_stage0_iter34;
wire    ap_block_state39_pp1_stage0_iter35;
wire    ap_block_state40_pp1_stage0_iter36;
wire    ap_block_state41_pp1_stage0_iter37;
wire    ap_block_pp1_stage0_11001;
wire   [31:0] grp_fu_180_p5;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln18_fu_245_p2;
wire   [3:0] trunc_ln21_fu_251_p1;
wire   [31:0] grp_fu_191_p6;
wire   [31:0] add_ln10_fu_228_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln18_fu_239_p2;
reg   [0:0] icmp_ln18_reg_358;
reg   [0:0] icmp_ln18_reg_358_pp1_iter1_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter2_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter3_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter4_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter5_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter6_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter7_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter8_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter9_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter10_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter11_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter12_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter13_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter14_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter15_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter16_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter17_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter18_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter19_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter20_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter21_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter22_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter23_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter24_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter25_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter26_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter27_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter28_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter29_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter30_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter31_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter32_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter33_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter34_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter35_reg;
reg   [0:0] icmp_ln18_reg_358_pp1_iter36_reg;
wire   [0:0] empty_10_fu_279_p2;
reg   [0:0] empty_10_reg_366;
reg   [0:0] empty_10_reg_366_pp1_iter2_reg;
reg   [0:0] empty_10_reg_366_pp1_iter3_reg;
reg   [0:0] empty_10_reg_366_pp1_iter4_reg;
reg   [0:0] empty_10_reg_366_pp1_iter5_reg;
reg   [0:0] empty_10_reg_366_pp1_iter6_reg;
reg   [0:0] empty_10_reg_366_pp1_iter7_reg;
reg   [0:0] empty_10_reg_366_pp1_iter8_reg;
reg   [0:0] empty_10_reg_366_pp1_iter9_reg;
reg   [0:0] empty_10_reg_366_pp1_iter10_reg;
reg   [0:0] empty_10_reg_366_pp1_iter11_reg;
reg   [0:0] empty_10_reg_366_pp1_iter12_reg;
reg   [0:0] empty_10_reg_366_pp1_iter13_reg;
reg   [0:0] empty_10_reg_366_pp1_iter14_reg;
reg   [0:0] empty_10_reg_366_pp1_iter15_reg;
reg   [0:0] empty_10_reg_366_pp1_iter16_reg;
reg   [0:0] empty_10_reg_366_pp1_iter17_reg;
reg   [0:0] empty_10_reg_366_pp1_iter18_reg;
reg   [0:0] empty_10_reg_366_pp1_iter19_reg;
reg   [0:0] empty_10_reg_366_pp1_iter20_reg;
reg   [0:0] empty_10_reg_366_pp1_iter21_reg;
reg   [0:0] empty_10_reg_366_pp1_iter22_reg;
reg   [0:0] empty_10_reg_366_pp1_iter23_reg;
reg   [0:0] empty_10_reg_366_pp1_iter24_reg;
reg   [0:0] empty_10_reg_366_pp1_iter25_reg;
reg   [0:0] empty_10_reg_366_pp1_iter26_reg;
reg   [0:0] empty_10_reg_366_pp1_iter27_reg;
reg   [0:0] empty_10_reg_366_pp1_iter28_reg;
reg   [0:0] empty_10_reg_366_pp1_iter29_reg;
reg   [0:0] empty_10_reg_366_pp1_iter30_reg;
reg   [0:0] empty_10_reg_366_pp1_iter31_reg;
reg   [0:0] empty_10_reg_366_pp1_iter32_reg;
reg   [0:0] empty_10_reg_366_pp1_iter33_reg;
reg   [0:0] empty_10_reg_366_pp1_iter34_reg;
reg   [0:0] empty_10_reg_366_pp1_iter35_reg;
reg   [0:0] empty_10_reg_366_pp1_iter36_reg;
wire   [4:0] trunc_ln167_fu_291_p1;
reg   [4:0] trunc_ln167_reg_370;
reg   [0:0] r_sig_V_reg_377;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter26;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg   [31:0] i_reg_109;
wire   [0:0] icmp_ln10_fu_234_p2;
wire   [31:0] ap_phi_reg_pp1_iter0_tmp_15_reg_131;
reg   [31:0] ap_phi_reg_pp1_iter1_tmp_15_reg_131;
reg   [5:0] ap_phi_mux_p_Val2_s_phi_fu_173_p4;
wire   [5:0] select_ln175_fu_327_p3;
reg   [5:0] ap_phi_reg_pp1_iter37_p_Val2_s_reg_169;
wire   [5:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter2_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter3_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter4_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter5_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter6_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter7_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter8_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter9_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter10_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter11_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter12_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter13_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter14_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter15_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter16_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter17_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter18_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter19_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter20_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter21_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter22_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter23_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter24_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter25_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter26_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter27_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter28_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter29_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter30_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter31_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter32_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter33_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter34_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter35_p_Val2_s_reg_169;
reg   [5:0] ap_phi_reg_pp1_iter36_p_Val2_s_reg_169;
wire    ap_block_pp1_stage0_01001;
wire   [1:0] grp_fu_180_p4;
wire    ap_block_pp1_stage0;
wire   [1:0] grp_fu_191_p5;
wire   [0:0] empty_9_fu_273_p2;
wire   [0:0] empty_8_fu_267_p2;
wire   [5:0] grp_fu_285_p1;
wire   [31:0] grp_fu_285_p2;
wire   [4:0] rem_V_1_fu_306_p2;
wire   [4:0] rem_V_3_fu_311_p3;
wire   [5:0] zext_ln164_fu_317_p1;
wire   [5:0] sub_ln657_fu_321_p2;
wire   [5:0] zext_ln159_fu_303_p1;
wire    ap_CS_fsm_state42;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_486;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
end

hls_linear_combination_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U1(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(grp_fu_180_p4),
    .dout(grp_fu_180_p5)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U2(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(grp_fu_191_p5),
    .dout(grp_fu_191_p6)
);

hls_linear_combination_urem_32ns_6ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
urem_32ns_6ns_32_36_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_reg_pp1_iter1_tmp_15_reg_131),
    .din1(grp_fu_285_p1),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter37 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd15) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd12) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd13) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd14) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        ap_phi_reg_pp1_iter1_tmp_15_reg_131 <= grp_fu_180_p5;
    end else if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd0) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd1) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd2) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd3) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd4) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd5) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd6) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd7) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd8) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd9) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd10) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (trunc_ln21_fu_251_p1 == 4'd11) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        ap_phi_reg_pp1_iter1_tmp_15_reg_131 <= grp_fu_191_p6;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ap_phi_reg_pp1_iter1_tmp_15_reg_131 <= ap_phi_reg_pp1_iter0_tmp_15_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_486)) begin
        if (((empty_10_fu_279_p2 == 1'd1) & (icmp_ln18_reg_358 == 1'd0))) begin
            ap_phi_reg_pp1_iter2_p_Val2_s_reg_169 <= 6'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter2_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_169;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_120 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln18_fu_245_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_1_reg_120 <= add_ln18_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_109 <= add_ln10_fu_228_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_109 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        ap_phi_reg_pp1_iter10_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter9_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        ap_phi_reg_pp1_iter11_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter10_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_phi_reg_pp1_iter12_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter11_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter12 == 1'b1))) begin
        ap_phi_reg_pp1_iter13_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter12_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter13 == 1'b1))) begin
        ap_phi_reg_pp1_iter14_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter13_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        ap_phi_reg_pp1_iter15_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter14_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter15 == 1'b1))) begin
        ap_phi_reg_pp1_iter16_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter15_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1))) begin
        ap_phi_reg_pp1_iter17_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter16_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter17 == 1'b1))) begin
        ap_phi_reg_pp1_iter18_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter17_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter18 == 1'b1))) begin
        ap_phi_reg_pp1_iter19_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter18_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ap_phi_reg_pp1_iter1_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter19 == 1'b1))) begin
        ap_phi_reg_pp1_iter20_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter19_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter20 == 1'b1))) begin
        ap_phi_reg_pp1_iter21_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter20_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter21 == 1'b1))) begin
        ap_phi_reg_pp1_iter22_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter21_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter22 == 1'b1))) begin
        ap_phi_reg_pp1_iter23_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter22_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter23 == 1'b1))) begin
        ap_phi_reg_pp1_iter24_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter23_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter24 == 1'b1))) begin
        ap_phi_reg_pp1_iter25_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter24_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter25 == 1'b1))) begin
        ap_phi_reg_pp1_iter26_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter25_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter26 == 1'b1))) begin
        ap_phi_reg_pp1_iter27_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter26_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter27 == 1'b1))) begin
        ap_phi_reg_pp1_iter28_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter27_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter28 == 1'b1))) begin
        ap_phi_reg_pp1_iter29_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter28_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter29 == 1'b1))) begin
        ap_phi_reg_pp1_iter30_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter29_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter30 == 1'b1))) begin
        ap_phi_reg_pp1_iter31_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter30_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter31 == 1'b1))) begin
        ap_phi_reg_pp1_iter32_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter31_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter32 == 1'b1))) begin
        ap_phi_reg_pp1_iter33_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter32_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter33 == 1'b1))) begin
        ap_phi_reg_pp1_iter34_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter33_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter34 == 1'b1))) begin
        ap_phi_reg_pp1_iter35_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter34_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter35 == 1'b1))) begin
        ap_phi_reg_pp1_iter36_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter35_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter36 == 1'b1))) begin
        ap_phi_reg_pp1_iter37_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter36_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_reg_pp1_iter3_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter2_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ap_phi_reg_pp1_iter4_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter3_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_phi_reg_pp1_iter5_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter4_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        ap_phi_reg_pp1_iter6_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter5_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter6 == 1'b1))) begin
        ap_phi_reg_pp1_iter7_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter6_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        ap_phi_reg_pp1_iter8_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter7_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1))) begin
        ap_phi_reg_pp1_iter9_p_Val2_s_reg_169 <= ap_phi_reg_pp1_iter8_p_Val2_s_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln18_reg_358 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_10_reg_366 <= empty_10_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        empty_10_reg_366_pp1_iter10_reg <= empty_10_reg_366_pp1_iter9_reg;
        empty_10_reg_366_pp1_iter11_reg <= empty_10_reg_366_pp1_iter10_reg;
        empty_10_reg_366_pp1_iter12_reg <= empty_10_reg_366_pp1_iter11_reg;
        empty_10_reg_366_pp1_iter13_reg <= empty_10_reg_366_pp1_iter12_reg;
        empty_10_reg_366_pp1_iter14_reg <= empty_10_reg_366_pp1_iter13_reg;
        empty_10_reg_366_pp1_iter15_reg <= empty_10_reg_366_pp1_iter14_reg;
        empty_10_reg_366_pp1_iter16_reg <= empty_10_reg_366_pp1_iter15_reg;
        empty_10_reg_366_pp1_iter17_reg <= empty_10_reg_366_pp1_iter16_reg;
        empty_10_reg_366_pp1_iter18_reg <= empty_10_reg_366_pp1_iter17_reg;
        empty_10_reg_366_pp1_iter19_reg <= empty_10_reg_366_pp1_iter18_reg;
        empty_10_reg_366_pp1_iter20_reg <= empty_10_reg_366_pp1_iter19_reg;
        empty_10_reg_366_pp1_iter21_reg <= empty_10_reg_366_pp1_iter20_reg;
        empty_10_reg_366_pp1_iter22_reg <= empty_10_reg_366_pp1_iter21_reg;
        empty_10_reg_366_pp1_iter23_reg <= empty_10_reg_366_pp1_iter22_reg;
        empty_10_reg_366_pp1_iter24_reg <= empty_10_reg_366_pp1_iter23_reg;
        empty_10_reg_366_pp1_iter25_reg <= empty_10_reg_366_pp1_iter24_reg;
        empty_10_reg_366_pp1_iter26_reg <= empty_10_reg_366_pp1_iter25_reg;
        empty_10_reg_366_pp1_iter27_reg <= empty_10_reg_366_pp1_iter26_reg;
        empty_10_reg_366_pp1_iter28_reg <= empty_10_reg_366_pp1_iter27_reg;
        empty_10_reg_366_pp1_iter29_reg <= empty_10_reg_366_pp1_iter28_reg;
        empty_10_reg_366_pp1_iter2_reg <= empty_10_reg_366;
        empty_10_reg_366_pp1_iter30_reg <= empty_10_reg_366_pp1_iter29_reg;
        empty_10_reg_366_pp1_iter31_reg <= empty_10_reg_366_pp1_iter30_reg;
        empty_10_reg_366_pp1_iter32_reg <= empty_10_reg_366_pp1_iter31_reg;
        empty_10_reg_366_pp1_iter33_reg <= empty_10_reg_366_pp1_iter32_reg;
        empty_10_reg_366_pp1_iter34_reg <= empty_10_reg_366_pp1_iter33_reg;
        empty_10_reg_366_pp1_iter35_reg <= empty_10_reg_366_pp1_iter34_reg;
        empty_10_reg_366_pp1_iter36_reg <= empty_10_reg_366_pp1_iter35_reg;
        empty_10_reg_366_pp1_iter3_reg <= empty_10_reg_366_pp1_iter2_reg;
        empty_10_reg_366_pp1_iter4_reg <= empty_10_reg_366_pp1_iter3_reg;
        empty_10_reg_366_pp1_iter5_reg <= empty_10_reg_366_pp1_iter4_reg;
        empty_10_reg_366_pp1_iter6_reg <= empty_10_reg_366_pp1_iter5_reg;
        empty_10_reg_366_pp1_iter7_reg <= empty_10_reg_366_pp1_iter6_reg;
        empty_10_reg_366_pp1_iter8_reg <= empty_10_reg_366_pp1_iter7_reg;
        empty_10_reg_366_pp1_iter9_reg <= empty_10_reg_366_pp1_iter8_reg;
        icmp_ln18_reg_358_pp1_iter10_reg <= icmp_ln18_reg_358_pp1_iter9_reg;
        icmp_ln18_reg_358_pp1_iter11_reg <= icmp_ln18_reg_358_pp1_iter10_reg;
        icmp_ln18_reg_358_pp1_iter12_reg <= icmp_ln18_reg_358_pp1_iter11_reg;
        icmp_ln18_reg_358_pp1_iter13_reg <= icmp_ln18_reg_358_pp1_iter12_reg;
        icmp_ln18_reg_358_pp1_iter14_reg <= icmp_ln18_reg_358_pp1_iter13_reg;
        icmp_ln18_reg_358_pp1_iter15_reg <= icmp_ln18_reg_358_pp1_iter14_reg;
        icmp_ln18_reg_358_pp1_iter16_reg <= icmp_ln18_reg_358_pp1_iter15_reg;
        icmp_ln18_reg_358_pp1_iter17_reg <= icmp_ln18_reg_358_pp1_iter16_reg;
        icmp_ln18_reg_358_pp1_iter18_reg <= icmp_ln18_reg_358_pp1_iter17_reg;
        icmp_ln18_reg_358_pp1_iter19_reg <= icmp_ln18_reg_358_pp1_iter18_reg;
        icmp_ln18_reg_358_pp1_iter20_reg <= icmp_ln18_reg_358_pp1_iter19_reg;
        icmp_ln18_reg_358_pp1_iter21_reg <= icmp_ln18_reg_358_pp1_iter20_reg;
        icmp_ln18_reg_358_pp1_iter22_reg <= icmp_ln18_reg_358_pp1_iter21_reg;
        icmp_ln18_reg_358_pp1_iter23_reg <= icmp_ln18_reg_358_pp1_iter22_reg;
        icmp_ln18_reg_358_pp1_iter24_reg <= icmp_ln18_reg_358_pp1_iter23_reg;
        icmp_ln18_reg_358_pp1_iter25_reg <= icmp_ln18_reg_358_pp1_iter24_reg;
        icmp_ln18_reg_358_pp1_iter26_reg <= icmp_ln18_reg_358_pp1_iter25_reg;
        icmp_ln18_reg_358_pp1_iter27_reg <= icmp_ln18_reg_358_pp1_iter26_reg;
        icmp_ln18_reg_358_pp1_iter28_reg <= icmp_ln18_reg_358_pp1_iter27_reg;
        icmp_ln18_reg_358_pp1_iter29_reg <= icmp_ln18_reg_358_pp1_iter28_reg;
        icmp_ln18_reg_358_pp1_iter2_reg <= icmp_ln18_reg_358_pp1_iter1_reg;
        icmp_ln18_reg_358_pp1_iter30_reg <= icmp_ln18_reg_358_pp1_iter29_reg;
        icmp_ln18_reg_358_pp1_iter31_reg <= icmp_ln18_reg_358_pp1_iter30_reg;
        icmp_ln18_reg_358_pp1_iter32_reg <= icmp_ln18_reg_358_pp1_iter31_reg;
        icmp_ln18_reg_358_pp1_iter33_reg <= icmp_ln18_reg_358_pp1_iter32_reg;
        icmp_ln18_reg_358_pp1_iter34_reg <= icmp_ln18_reg_358_pp1_iter33_reg;
        icmp_ln18_reg_358_pp1_iter35_reg <= icmp_ln18_reg_358_pp1_iter34_reg;
        icmp_ln18_reg_358_pp1_iter36_reg <= icmp_ln18_reg_358_pp1_iter35_reg;
        icmp_ln18_reg_358_pp1_iter3_reg <= icmp_ln18_reg_358_pp1_iter2_reg;
        icmp_ln18_reg_358_pp1_iter4_reg <= icmp_ln18_reg_358_pp1_iter3_reg;
        icmp_ln18_reg_358_pp1_iter5_reg <= icmp_ln18_reg_358_pp1_iter4_reg;
        icmp_ln18_reg_358_pp1_iter6_reg <= icmp_ln18_reg_358_pp1_iter5_reg;
        icmp_ln18_reg_358_pp1_iter7_reg <= icmp_ln18_reg_358_pp1_iter6_reg;
        icmp_ln18_reg_358_pp1_iter8_reg <= icmp_ln18_reg_358_pp1_iter7_reg;
        icmp_ln18_reg_358_pp1_iter9_reg <= icmp_ln18_reg_358_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln18_reg_358 <= icmp_ln18_fu_245_p2;
        icmp_ln18_reg_358_pp1_iter1_reg <= icmp_ln18_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (empty_10_reg_366_pp1_iter35_reg == 1'd0) & (icmp_ln18_reg_358_pp1_iter35_reg == 1'd0))) begin
        r_sig_V_reg_377 <= grp_fu_285_p2[32'd4];
        trunc_ln167_reg_370 <= trunc_ln167_fu_291_p1;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_245_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_10_reg_366_pp1_iter36_reg == 1'd0) & (icmp_ln18_reg_358_pp1_iter36_reg == 1'd0))) begin
        ap_phi_mux_p_Val2_s_phi_fu_173_p4 = select_ln175_fu_327_p3;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_173_p4 = ap_phi_reg_pp1_iter37_p_Val2_s_reg_169;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter37 == 1'b1) & (icmp_ln18_reg_358_pp1_iter36_reg == 1'd0))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln18_fu_245_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter37 == 1'b1) & (ap_enable_reg_pp1_iter36 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter37 == 1'b1) & (ap_enable_reg_pp1_iter36 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln18_fu_245_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_228_p2 = (i_reg_109 + 32'd1);

assign add_ln18_fu_239_p2 = (i_1_reg_120 + 6'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_486 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_169 = 'bx;

assign ap_phi_reg_pp1_iter0_tmp_15_reg_131 = 'bx;

assign empty_10_fu_279_p2 = (empty_9_fu_273_p2 | empty_8_fu_267_p2);

assign empty_8_fu_267_p2 = ((ap_phi_reg_pp1_iter1_tmp_15_reg_131 == 32'd31) ? 1'b1 : 1'b0);

assign empty_9_fu_273_p2 = ((ap_phi_reg_pp1_iter1_tmp_15_reg_131 == 32'd0) ? 1'b1 : 1'b0);

assign grp_fu_180_p4 = {{i_1_reg_120[5:4]}};

assign grp_fu_191_p5 = {{i_1_reg_120[5:4]}};

assign grp_fu_285_p1 = 32'd31;

assign icmp_ln10_fu_234_p2 = ((i_reg_109 == len) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_245_p2 = ((i_1_reg_120 == 6'd60) ? 1'b1 : 1'b0);

assign out_r = $signed(ap_phi_mux_p_Val2_s_phi_fu_173_p4);

assign rem_V_1_fu_306_p2 = (trunc_ln167_reg_370 ^ 5'd31);

assign rem_V_3_fu_311_p3 = ((r_sig_V_reg_377[0:0] == 1'b1) ? rem_V_1_fu_306_p2 : trunc_ln167_reg_370);

assign select_ln175_fu_327_p3 = ((r_sig_V_reg_377[0:0] == 1'b1) ? sub_ln657_fu_321_p2 : zext_ln159_fu_303_p1);

assign sub_ln657_fu_321_p2 = (6'd0 - zext_ln164_fu_317_p1);

assign trunc_ln167_fu_291_p1 = grp_fu_285_p2[4:0];

assign trunc_ln21_fu_251_p1 = i_1_reg_120[3:0];

assign zext_ln159_fu_303_p1 = trunc_ln167_reg_370;

assign zext_ln164_fu_317_p1 = rem_V_3_fu_311_p3;

endmodule //hls_linear_combination
