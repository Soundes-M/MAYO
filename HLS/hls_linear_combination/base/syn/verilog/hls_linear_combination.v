// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_linear_combination_hls_linear_combination,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.868500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=647,HLS_SYN_LUT=713,HLS_VERSION=2020_2}" *)

module hls_linear_combination (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vecs,
        coeffs,
        len,
        out_r_i,
        out_r_o,
        out_r_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_pp0_stage0 = 42'd2;
parameter    ap_ST_fsm_state6 = 42'd4;
parameter    ap_ST_fsm_state7 = 42'd8;
parameter    ap_ST_fsm_state8 = 42'd16;
parameter    ap_ST_fsm_state9 = 42'd32;
parameter    ap_ST_fsm_state10 = 42'd64;
parameter    ap_ST_fsm_state11 = 42'd128;
parameter    ap_ST_fsm_state12 = 42'd256;
parameter    ap_ST_fsm_state13 = 42'd512;
parameter    ap_ST_fsm_state14 = 42'd1024;
parameter    ap_ST_fsm_state15 = 42'd2048;
parameter    ap_ST_fsm_state16 = 42'd4096;
parameter    ap_ST_fsm_state17 = 42'd8192;
parameter    ap_ST_fsm_state18 = 42'd16384;
parameter    ap_ST_fsm_state19 = 42'd32768;
parameter    ap_ST_fsm_state20 = 42'd65536;
parameter    ap_ST_fsm_state21 = 42'd131072;
parameter    ap_ST_fsm_state22 = 42'd262144;
parameter    ap_ST_fsm_state23 = 42'd524288;
parameter    ap_ST_fsm_state24 = 42'd1048576;
parameter    ap_ST_fsm_state25 = 42'd2097152;
parameter    ap_ST_fsm_state26 = 42'd4194304;
parameter    ap_ST_fsm_state27 = 42'd8388608;
parameter    ap_ST_fsm_state28 = 42'd16777216;
parameter    ap_ST_fsm_state29 = 42'd33554432;
parameter    ap_ST_fsm_state30 = 42'd67108864;
parameter    ap_ST_fsm_state31 = 42'd134217728;
parameter    ap_ST_fsm_state32 = 42'd268435456;
parameter    ap_ST_fsm_state33 = 42'd536870912;
parameter    ap_ST_fsm_state34 = 42'd1073741824;
parameter    ap_ST_fsm_state35 = 42'd2147483648;
parameter    ap_ST_fsm_state36 = 42'd4294967296;
parameter    ap_ST_fsm_state37 = 42'd8589934592;
parameter    ap_ST_fsm_state38 = 42'd17179869184;
parameter    ap_ST_fsm_state39 = 42'd34359738368;
parameter    ap_ST_fsm_state40 = 42'd68719476736;
parameter    ap_ST_fsm_state41 = 42'd137438953472;
parameter    ap_ST_fsm_state42 = 42'd274877906944;
parameter    ap_ST_fsm_state43 = 42'd549755813888;
parameter    ap_ST_fsm_state44 = 42'd1099511627776;
parameter    ap_ST_fsm_state45 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] vecs;
input  [7:0] coeffs;
input  [31:0] len;
input  [7:0] out_r_i;
output  [7:0] out_r_o;
output   out_r_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_r_o;
reg out_r_o_ap_vld;

(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] accumulators_address0;
reg    accumulators_ce0;
reg    accumulators_we0;
wire   [31:0] accumulators_q0;
wire   [5:0] accumulators_address1;
reg    accumulators_ce1;
wire   [31:0] accumulators_q1;
reg   [37:0] indvar_flatten_reg_126;
reg   [5:0] j_reg_137;
reg   [31:0] reg_160;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln12_reg_282;
reg   [0:0] icmp_ln12_reg_282_pp0_iter1_reg;
wire    ap_CS_fsm_state8;
wire   [37:0] bound_fu_185_p2;
reg   [37:0] bound_reg_272;
wire   [37:0] add_ln12_fu_191_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln12_fu_197_p2;
reg   [0:0] icmp_ln12_reg_282_pp0_iter2_reg;
reg   [5:0] accumulators_addr_1_reg_296;
reg   [5:0] accumulators_addr_1_reg_296_pp0_iter2_reg;
wire   [5:0] add_ln14_fu_229_p2;
reg   [5:0] add_ln14_reg_302;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] add_ln19_fu_235_p2;
reg   [5:0] add_ln19_reg_307;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln19_fu_246_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg   [5:0] ap_phi_mux_j_phi_fu_141_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] i_reg_149;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state6;
wire   [63:0] j_cast_fu_224_p1;
wire   [63:0] zext_ln19_fu_241_p1;
wire   [7:0] trunc_ln28_fu_258_p1;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_263_p3;
wire   [33:0] tmp_fu_173_p3;
wire   [37:0] p_shl_fu_165_p3;
wire   [37:0] p_shl2_fu_181_p1;
wire   [0:0] icmp_ln14_fu_210_p2;
wire   [5:0] select_ln12_fu_216_p3;
wire   [5:0] grp_fu_252_p1;
wire    ap_CS_fsm_state9;
wire   [7:0] grp_fu_252_p2;
wire   [7:0] grp_fu_263_p0;
wire   [7:0] grp_fu_263_p1;
reg    grp_fu_252_ap_start;
wire    grp_fu_252_ap_done;
reg   [41:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_263_p00;
wire   [15:0] grp_fu_263_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 42'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

hls_linear_combination_accumulators #(
    .DataWidth( 32 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
accumulators_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(accumulators_address0),
    .ce0(accumulators_ce0),
    .we0(accumulators_we0),
    .d0(grp_fu_263_p3),
    .q0(accumulators_q0),
    .address1(accumulators_address1),
    .ce1(accumulators_ce1),
    .q1(accumulators_q1)
);

hls_linear_combination_urem_32ns_6ns_8_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
urem_32ns_6ns_8_36_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_252_ap_start),
    .done(grp_fu_252_ap_done),
    .din0(reg_160),
    .din1(grp_fu_252_p1),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

hls_linear_combination_mac_muladd_8ns_8ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8ns_8ns_32ns_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_263_p0),
    .din1(grp_fu_263_p1),
    .din2(accumulators_q1),
    .ce(1'b1),
    .dout(grp_fu_263_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_149 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i_reg_149 <= add_ln19_reg_307;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln12_fu_197_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_126 <= add_ln12_fu_191_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_126 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_reg_282_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        j_reg_137 <= add_ln14_reg_302;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_137 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_160 <= accumulators_q0;
    end else if (((icmp_ln12_reg_282_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        reg_160 <= accumulators_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        accumulators_addr_1_reg_296 <= j_cast_fu_224_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        accumulators_addr_1_reg_296_pp0_iter2_reg <= accumulators_addr_1_reg_296;
        icmp_ln12_reg_282_pp0_iter2_reg <= icmp_ln12_reg_282_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_reg_282 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        add_ln14_reg_302 <= add_ln14_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln19_reg_307 <= add_ln19_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_reg_272[37 : 2] <= bound_fu_185_p2[37 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_282 <= icmp_ln12_fu_197_p2;
        icmp_ln12_reg_282_pp0_iter1_reg <= icmp_ln12_reg_282;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        accumulators_address0 = zext_ln19_fu_241_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        accumulators_address0 = accumulators_addr_1_reg_296_pp0_iter2_reg;
    end else begin
        accumulators_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        accumulators_ce0 = 1'b1;
    end else begin
        accumulators_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        accumulators_ce1 = 1'b1;
    end else begin
        accumulators_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln12_reg_282_pp0_iter2_reg == 1'd0))) begin
        accumulators_we0 = 1'b1;
    end else begin
        accumulators_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln12_fu_197_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_246_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_reg_282_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_141_p4 = add_ln14_reg_302;
    end else begin
        ap_phi_mux_j_phi_fu_141_p4 = j_reg_137;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_246_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_252_ap_start = 1'b1;
    end else begin
        grp_fu_252_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        out_r_o = trunc_ln28_fu_258_p1;
    end else begin
        out_r_o = out_r_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        out_r_o_ap_vld = 1'b1;
    end else begin
        out_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln12_fu_197_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln12_fu_197_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln19_fu_246_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulators_address1 = j_cast_fu_224_p1;

assign add_ln12_fu_191_p2 = (indvar_flatten_reg_126 + 38'd1);

assign add_ln14_fu_229_p2 = (select_ln12_fu_216_p3 + 6'd1);

assign add_ln19_fu_235_p2 = (i_reg_149 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_185_p2 = (p_shl_fu_165_p3 - p_shl2_fu_181_p1);

assign grp_fu_252_p1 = 32'd31;

assign grp_fu_263_p0 = grp_fu_263_p00;

assign grp_fu_263_p00 = coeffs;

assign grp_fu_263_p1 = grp_fu_263_p10;

assign grp_fu_263_p10 = vecs;

assign icmp_ln12_fu_197_p2 = ((indvar_flatten_reg_126 == bound_reg_272) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_210_p2 = ((ap_phi_mux_j_phi_fu_141_p4 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_246_p2 = ((i_reg_149 == 6'd60) ? 1'b1 : 1'b0);

assign j_cast_fu_224_p1 = select_ln12_fu_216_p3;

assign p_shl2_fu_181_p1 = tmp_fu_173_p3;

assign p_shl_fu_165_p3 = {{len}, {6'd0}};

assign select_ln12_fu_216_p3 = ((icmp_ln14_fu_210_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_j_phi_fu_141_p4);

assign tmp_fu_173_p3 = {{len}, {2'd0}};

assign trunc_ln28_fu_258_p1 = grp_fu_252_p2[7:0];

assign zext_ln19_fu_241_p1 = i_reg_149;

always @ (posedge ap_clk) begin
    bound_reg_272[1:0] <= 2'b00;
end

endmodule //hls_linear_combination
