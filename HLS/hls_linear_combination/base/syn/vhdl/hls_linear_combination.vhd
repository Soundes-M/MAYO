-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_linear_combination is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vecs : IN STD_LOGIC_VECTOR (7 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (7 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_i : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_linear_combination is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_linear_combination_hls_linear_combination,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.868500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=647,HLS_SYN_LUT=713,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv38_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal accumulators_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal accumulators_ce0 : STD_LOGIC;
    signal accumulators_we0 : STD_LOGIC;
    signal accumulators_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal accumulators_ce1 : STD_LOGIC;
    signal accumulators_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_126 : STD_LOGIC_VECTOR (37 downto 0);
    signal j_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln12_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_282_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal bound_fu_185_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal bound_reg_272 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln12_fu_191_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln12_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_282_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal accumulators_addr_1_reg_296 : STD_LOGIC_VECTOR (5 downto 0);
    signal accumulators_addr_1_reg_296_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_fu_229_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_reg_302 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln19_fu_235_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln19_reg_307 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln19_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_j_phi_fu_141_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_reg_149 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_cast_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln28_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_263_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_173_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl_fu_165_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_shl2_fu_181_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal icmp_ln14_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_216_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_252_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_252_ap_start : STD_LOGIC;
    signal grp_fu_252_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_263_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_263_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hls_linear_combination_urem_32ns_6ns_8_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component hls_linear_combination_mac_muladd_8ns_8ns_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_linear_combination_accumulators IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    accumulators_U : component hls_linear_combination_accumulators
    generic map (
        DataWidth => 32,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accumulators_address0,
        ce0 => accumulators_ce0,
        we0 => accumulators_we0,
        d0 => grp_fu_263_p3,
        q0 => accumulators_q0,
        address1 => accumulators_address1,
        ce1 => accumulators_ce1,
        q1 => accumulators_q1);

    urem_32ns_6ns_8_36_seq_1_U1 : component hls_linear_combination_urem_32ns_6ns_8_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_252_ap_start,
        done => grp_fu_252_ap_done,
        din0 => reg_160,
        din1 => grp_fu_252_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_252_p2);

    mac_muladd_8ns_8ns_32ns_32_4_1_U2 : component hls_linear_combination_mac_muladd_8ns_8ns_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        din2 => accumulators_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_149 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_reg_149 <= add_ln19_reg_307;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln12_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_126 <= add_ln12_fu_191_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_126 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    j_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_282_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                j_reg_137 <= add_ln14_reg_302;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_160 <= accumulators_q0;
            elsif (((icmp_ln12_reg_282_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                reg_160 <= accumulators_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_282 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                accumulators_addr_1_reg_296 <= j_cast_fu_224_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                accumulators_addr_1_reg_296_pp0_iter2_reg <= accumulators_addr_1_reg_296;
                icmp_ln12_reg_282_pp0_iter2_reg <= icmp_ln12_reg_282_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_282 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln14_reg_302 <= add_ln14_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln19_reg_307 <= add_ln19_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    bound_reg_272(37 downto 2) <= bound_fu_185_p2(37 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_reg_282 <= icmp_ln12_fu_197_p2;
                icmp_ln12_reg_282_pp0_iter1_reg <= icmp_ln12_reg_282;
            end if;
        end if;
    end process;
    bound_reg_272(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, icmp_ln12_fu_197_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, icmp_ln19_fu_246_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln12_fu_197_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln12_fu_197_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_246_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    accumulators_address0_assign_proc : process(accumulators_addr_1_reg_296_pp0_iter2_reg, ap_CS_fsm_state7, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, zext_ln19_fu_241_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            accumulators_address0 <= zext_ln19_fu_241_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            accumulators_address0 <= accumulators_addr_1_reg_296_pp0_iter2_reg;
        else 
            accumulators_address0 <= "XXXXXX";
        end if; 
    end process;

    accumulators_address1 <= j_cast_fu_224_p1(6 - 1 downto 0);

    accumulators_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            accumulators_ce0 <= ap_const_logic_1;
        else 
            accumulators_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumulators_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            accumulators_ce1 <= ap_const_logic_1;
        else 
            accumulators_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    accumulators_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln12_reg_282_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln12_reg_282_pp0_iter2_reg = ap_const_lv1_0))) then 
            accumulators_we0 <= ap_const_logic_1;
        else 
            accumulators_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln12_fu_191_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_126) + unsigned(ap_const_lv38_1));
    add_ln14_fu_229_p2 <= std_logic_vector(unsigned(select_ln12_fu_216_p3) + unsigned(ap_const_lv6_1));
    add_ln19_fu_235_p2 <= std_logic_vector(unsigned(i_reg_149) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state44 <= ap_CS_fsm(40);
    ap_CS_fsm_state45 <= ap_CS_fsm(41);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln12_fu_197_p2)
    begin
        if ((icmp_ln12_fu_197_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, icmp_ln19_fu_246_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_246_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_141_p4_assign_proc : process(j_reg_137, ap_enable_reg_pp0_iter2, icmp_ln12_reg_282_pp0_iter1_reg, add_ln14_reg_302, ap_block_pp0_stage0)
    begin
        if (((icmp_ln12_reg_282_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_141_p4 <= add_ln14_reg_302;
        else 
            ap_phi_mux_j_phi_fu_141_p4 <= j_reg_137;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln19_fu_246_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln19_fu_246_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_185_p2 <= std_logic_vector(unsigned(p_shl_fu_165_p3) - unsigned(p_shl2_fu_181_p1));

    grp_fu_252_ap_start_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_252_ap_start <= ap_const_logic_1;
        else 
            grp_fu_252_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_252_p1 <= ap_const_lv32_1F(6 - 1 downto 0);
    grp_fu_263_p0 <= grp_fu_263_p00(8 - 1 downto 0);
    grp_fu_263_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coeffs),16));
    grp_fu_263_p1 <= grp_fu_263_p10(8 - 1 downto 0);
    grp_fu_263_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vecs),16));
    icmp_ln12_fu_197_p2 <= "1" when (indvar_flatten_reg_126 = bound_reg_272) else "0";
    icmp_ln14_fu_210_p2 <= "1" when (ap_phi_mux_j_phi_fu_141_p4 = ap_const_lv6_3C) else "0";
    icmp_ln19_fu_246_p2 <= "1" when (i_reg_149 = ap_const_lv6_3C) else "0";
    j_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_216_p3),64));

    out_r_o_assign_proc : process(out_r_i, trunc_ln28_fu_258_p1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            out_r_o <= trunc_ln28_fu_258_p1;
        else 
            out_r_o <= out_r_i;
        end if; 
    end process;


    out_r_o_ap_vld_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            out_r_o_ap_vld <= ap_const_logic_1;
        else 
            out_r_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_173_p3),38));
    p_shl_fu_165_p3 <= (len & ap_const_lv6_0);
    select_ln12_fu_216_p3 <= 
        ap_const_lv6_0 when (icmp_ln14_fu_210_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_141_p4;
    tmp_fu_173_p3 <= (len & ap_const_lv2_0);
    trunc_ln28_fu_258_p1 <= grp_fu_252_p2(8 - 1 downto 0);
    zext_ln19_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_149),64));
end behav;
