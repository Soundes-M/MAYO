// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_linear_combination_hls_linear_combination,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.039000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6610,HLS_SYN_LUT=4802,HLS_VERSION=2020_2}" *)

module hls_linear_combination (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vecs,
        coeffs,
        len,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state42 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] vecs;
input  [7:0] coeffs;
input  [31:0] len;
output  [7:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] accumulators_15_0;
reg   [31:0] accumulators_15_1;
reg   [31:0] accumulators_15_2;
reg   [31:0] accumulators_0_0;
reg   [31:0] accumulators_0_1;
reg   [31:0] accumulators_0_2;
reg   [31:0] accumulators_0_3;
reg   [31:0] accumulators_1_0;
reg   [31:0] accumulators_1_1;
reg   [31:0] accumulators_1_2;
reg   [31:0] accumulators_1_3;
reg   [31:0] accumulators_2_0;
reg   [31:0] accumulators_2_1;
reg   [31:0] accumulators_2_2;
reg   [31:0] accumulators_2_3;
reg   [31:0] accumulators_3_0;
reg   [31:0] accumulators_3_1;
reg   [31:0] accumulators_3_2;
reg   [31:0] accumulators_3_3;
reg   [31:0] accumulators_4_0;
reg   [31:0] accumulators_4_1;
reg   [31:0] accumulators_4_2;
reg   [31:0] accumulators_4_3;
reg   [31:0] accumulators_5_0;
reg   [31:0] accumulators_5_1;
reg   [31:0] accumulators_5_2;
reg   [31:0] accumulators_5_3;
reg   [31:0] accumulators_6_0;
reg   [31:0] accumulators_6_1;
reg   [31:0] accumulators_6_2;
reg   [31:0] accumulators_6_3;
reg   [31:0] accumulators_7_0;
reg   [31:0] accumulators_7_1;
reg   [31:0] accumulators_7_2;
reg   [31:0] accumulators_7_3;
reg   [31:0] accumulators_8_0;
reg   [31:0] accumulators_8_1;
reg   [31:0] accumulators_8_2;
reg   [31:0] accumulators_8_3;
reg   [31:0] accumulators_9_0;
reg   [31:0] accumulators_9_1;
reg   [31:0] accumulators_9_2;
reg   [31:0] accumulators_9_3;
reg   [31:0] accumulators_10_0;
reg   [31:0] accumulators_10_1;
reg   [31:0] accumulators_10_2;
reg   [31:0] accumulators_10_3;
reg   [31:0] accumulators_11_0;
reg   [31:0] accumulators_11_1;
reg   [31:0] accumulators_11_2;
reg   [31:0] accumulators_11_3;
reg   [31:0] accumulators_12_0;
reg   [31:0] accumulators_12_1;
reg   [31:0] accumulators_12_2;
reg   [31:0] accumulators_13_0;
reg   [31:0] accumulators_13_1;
reg   [31:0] accumulators_13_2;
reg   [31:0] accumulators_14_0;
reg   [31:0] accumulators_14_1;
reg   [31:0] accumulators_14_2;
reg   [5:0] i_1_reg_252;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_state6_pp1_stage0_iter2;
wire    ap_block_state7_pp1_stage0_iter3;
wire    ap_block_state8_pp1_stage0_iter4;
wire    ap_block_state9_pp1_stage0_iter5;
wire    ap_block_state10_pp1_stage0_iter6;
wire    ap_block_state11_pp1_stage0_iter7;
wire    ap_block_state12_pp1_stage0_iter8;
wire    ap_block_state13_pp1_stage0_iter9;
wire    ap_block_state14_pp1_stage0_iter10;
wire    ap_block_state15_pp1_stage0_iter11;
wire    ap_block_state16_pp1_stage0_iter12;
wire    ap_block_state17_pp1_stage0_iter13;
wire    ap_block_state18_pp1_stage0_iter14;
wire    ap_block_state19_pp1_stage0_iter15;
wire    ap_block_state20_pp1_stage0_iter16;
wire    ap_block_state21_pp1_stage0_iter17;
wire    ap_block_state22_pp1_stage0_iter18;
wire    ap_block_state23_pp1_stage0_iter19;
wire    ap_block_state24_pp1_stage0_iter20;
wire    ap_block_state25_pp1_stage0_iter21;
wire    ap_block_state26_pp1_stage0_iter22;
wire    ap_block_state27_pp1_stage0_iter23;
wire    ap_block_state28_pp1_stage0_iter24;
wire    ap_block_state29_pp1_stage0_iter25;
wire    ap_block_state30_pp1_stage0_iter26;
wire    ap_block_state31_pp1_stage0_iter27;
wire    ap_block_state32_pp1_stage0_iter28;
wire    ap_block_state33_pp1_stage0_iter29;
wire    ap_block_state34_pp1_stage0_iter30;
wire    ap_block_state35_pp1_stage0_iter31;
wire    ap_block_state36_pp1_stage0_iter32;
wire    ap_block_state37_pp1_stage0_iter33;
wire    ap_block_state38_pp1_stage0_iter34;
wire    ap_block_state39_pp1_stage0_iter35;
wire    ap_block_state40_pp1_stage0_iter36;
wire    ap_block_state41_pp1_stage0_iter37;
wire    ap_block_pp1_stage0_11001;
wire   [31:0] zext_ln12_fu_566_p1;
reg   [31:0] zext_ln12_reg_1501;
wire   [31:0] add_ln12_fu_570_p2;
wire    ap_CS_fsm_state2;
reg   [31:0] accumulators_15_0_load_1_reg_1573;
wire    ap_CS_fsm_state3;
reg   [31:0] accumulators_15_1_load_1_reg_1578;
reg   [31:0] accumulators_15_2_load_1_reg_1583;
reg   [31:0] accumulators_0_0_load_1_reg_1588;
reg   [31:0] accumulators_0_1_load_1_reg_1593;
reg   [31:0] accumulators_0_2_load_1_reg_1598;
reg   [31:0] accumulators_0_3_load_1_reg_1603;
reg   [31:0] accumulators_1_0_load_1_reg_1608;
reg   [31:0] accumulators_1_1_load_1_reg_1613;
reg   [31:0] accumulators_1_2_load_1_reg_1618;
reg   [31:0] accumulators_1_3_load_1_reg_1623;
reg   [31:0] accumulators_2_0_load_1_reg_1628;
reg   [31:0] accumulators_2_1_load_1_reg_1633;
reg   [31:0] accumulators_2_2_load_1_reg_1638;
reg   [31:0] accumulators_2_3_load_1_reg_1643;
reg   [31:0] accumulators_3_0_load_1_reg_1648;
reg   [31:0] accumulators_3_1_load_1_reg_1653;
reg   [31:0] accumulators_3_2_load_1_reg_1658;
reg   [31:0] accumulators_3_3_load_1_reg_1663;
reg   [31:0] accumulators_4_0_load_1_reg_1668;
reg   [31:0] accumulators_4_1_load_1_reg_1673;
reg   [31:0] accumulators_4_2_load_1_reg_1678;
reg   [31:0] accumulators_4_3_load_1_reg_1683;
reg   [31:0] accumulators_5_0_load_1_reg_1688;
reg   [31:0] accumulators_5_1_load_1_reg_1693;
reg   [31:0] accumulators_5_2_load_1_reg_1698;
reg   [31:0] accumulators_5_3_load_1_reg_1703;
reg   [31:0] accumulators_6_0_load_1_reg_1708;
reg   [31:0] accumulators_6_1_load_1_reg_1713;
reg   [31:0] accumulators_6_2_load_1_reg_1718;
reg   [31:0] accumulators_6_3_load_1_reg_1723;
reg   [31:0] accumulators_7_0_load_1_reg_1728;
reg   [31:0] accumulators_7_1_load_1_reg_1733;
reg   [31:0] accumulators_7_2_load_1_reg_1738;
reg   [31:0] accumulators_7_3_load_1_reg_1743;
reg   [31:0] accumulators_8_0_load_1_reg_1748;
reg   [31:0] accumulators_8_1_load_1_reg_1753;
reg   [31:0] accumulators_8_2_load_1_reg_1758;
reg   [31:0] accumulators_8_3_load_1_reg_1763;
reg   [31:0] accumulators_9_0_load_1_reg_1768;
reg   [31:0] accumulators_9_1_load_1_reg_1773;
reg   [31:0] accumulators_9_2_load_1_reg_1778;
reg   [31:0] accumulators_9_3_load_1_reg_1783;
reg   [31:0] accumulators_10_0_load_1_reg_1788;
reg   [31:0] accumulators_10_1_load_1_reg_1793;
reg   [31:0] accumulators_10_2_load_1_reg_1798;
reg   [31:0] accumulators_10_3_load_1_reg_1803;
reg   [31:0] accumulators_11_0_load_1_reg_1808;
reg   [31:0] accumulators_11_1_load_1_reg_1813;
reg   [31:0] accumulators_11_2_load_1_reg_1818;
reg   [31:0] accumulators_11_3_load_1_reg_1823;
reg   [31:0] accumulators_12_0_load_1_reg_1828;
reg   [31:0] accumulators_12_1_load_1_reg_1833;
reg   [31:0] accumulators_12_2_load_1_reg_1838;
reg   [31:0] accumulators_13_0_load_1_reg_1843;
reg   [31:0] accumulators_13_1_load_1_reg_1848;
reg   [31:0] accumulators_13_2_load_1_reg_1853;
reg   [31:0] accumulators_14_0_load_1_reg_1858;
reg   [31:0] accumulators_14_1_load_1_reg_1863;
reg   [31:0] accumulators_14_2_load_1_reg_1868;
wire   [5:0] add_ln19_fu_1241_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln19_fu_1247_p2;
reg   [0:0] icmp_ln19_reg_1878;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter1_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter2_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter3_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter4_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter5_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter6_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter7_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter8_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter9_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter10_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter11_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter12_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter13_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter14_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter15_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter16_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter17_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter18_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter19_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter20_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter21_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter22_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter23_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter24_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter25_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter26_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter27_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter28_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter29_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter30_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter31_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter32_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter33_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter34_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter35_reg;
reg   [0:0] icmp_ln19_reg_1878_pp1_iter36_reg;
wire   [3:0] trunc_ln25_fu_1253_p1;
wire   [31:0] tmp_14_fu_1267_p5;
wire   [31:0] tmp_13_fu_1276_p5;
wire   [31:0] tmp_12_fu_1285_p5;
wire   [31:0] tmp_11_fu_1294_p6;
wire   [31:0] tmp_10_fu_1304_p6;
wire   [31:0] tmp_s_fu_1314_p6;
wire   [31:0] tmp_9_fu_1324_p6;
wire   [31:0] tmp_8_fu_1334_p6;
wire   [31:0] tmp_7_fu_1344_p6;
wire   [31:0] tmp_6_fu_1354_p6;
wire   [31:0] tmp_5_fu_1364_p6;
wire   [31:0] tmp_4_fu_1374_p6;
wire   [31:0] tmp_3_fu_1384_p6;
wire   [31:0] tmp_2_fu_1394_p6;
wire   [31:0] tmp_1_fu_1404_p6;
wire   [31:0] tmp_fu_1414_p5;
wire   [0:0] empty_10_fu_1435_p2;
reg   [0:0] empty_10_reg_1966;
reg   [0:0] empty_10_reg_1966_pp1_iter2_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter3_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter4_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter5_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter6_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter7_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter8_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter9_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter10_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter11_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter12_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter13_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter14_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter15_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter16_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter17_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter18_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter19_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter20_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter21_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter22_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter23_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter24_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter25_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter26_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter27_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter28_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter29_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter30_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter31_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter32_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter33_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter34_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter35_reg;
reg   [0:0] empty_10_reg_1966_pp1_iter36_reg;
wire   [4:0] trunc_ln167_fu_1447_p1;
reg   [4:0] trunc_ln167_reg_1970;
reg   [0:0] r_sig_V_reg_1977;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter26;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg   [31:0] i_reg_241;
wire   [0:0] icmp_ln12_fu_576_p2;
wire   [31:0] ap_phi_reg_pp1_iter0_tmp_15_reg_263;
reg   [31:0] ap_phi_reg_pp1_iter1_tmp_15_reg_263;
reg   [5:0] ap_phi_mux_p_Val2_s_phi_fu_305_p4;
wire   [5:0] select_ln175_fu_1483_p3;
reg   [5:0] ap_phi_reg_pp1_iter37_p_Val2_s_reg_301;
wire   [5:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter2_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter3_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter4_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter5_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter6_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter7_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter8_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter9_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter10_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter11_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter12_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter13_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter14_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter15_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter16_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter17_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter18_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter19_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter20_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter21_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter22_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter23_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter24_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter25_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter26_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter27_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter28_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter29_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter30_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter31_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter32_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter33_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter34_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter35_p_Val2_s_reg_301;
reg   [5:0] ap_phi_reg_pp1_iter36_p_Val2_s_reg_301;
wire   [31:0] add_ln15_15_fu_746_p2;
wire   [31:0] add_ln15_31_fu_922_p2;
wire   [31:0] add_ln15_47_fu_1098_p2;
wire   [31:0] add_ln15_fu_581_p2;
wire   [31:0] add_ln15_16_fu_757_p2;
wire   [31:0] add_ln15_32_fu_933_p2;
wire   [31:0] add_ln15_48_fu_1109_p2;
wire   [31:0] add_ln15_1_fu_592_p2;
wire   [31:0] add_ln15_17_fu_768_p2;
wire   [31:0] add_ln15_33_fu_944_p2;
wire   [31:0] add_ln15_49_fu_1120_p2;
wire   [31:0] add_ln15_2_fu_603_p2;
wire   [31:0] add_ln15_18_fu_779_p2;
wire   [31:0] add_ln15_34_fu_955_p2;
wire   [31:0] add_ln15_50_fu_1131_p2;
wire   [31:0] add_ln15_3_fu_614_p2;
wire   [31:0] add_ln15_19_fu_790_p2;
wire   [31:0] add_ln15_35_fu_966_p2;
wire   [31:0] add_ln15_51_fu_1142_p2;
wire   [31:0] add_ln15_4_fu_625_p2;
wire   [31:0] add_ln15_20_fu_801_p2;
wire   [31:0] add_ln15_36_fu_977_p2;
wire   [31:0] add_ln15_52_fu_1153_p2;
wire   [31:0] add_ln15_5_fu_636_p2;
wire   [31:0] add_ln15_21_fu_812_p2;
wire   [31:0] add_ln15_37_fu_988_p2;
wire   [31:0] add_ln15_53_fu_1164_p2;
wire   [31:0] add_ln15_6_fu_647_p2;
wire   [31:0] add_ln15_22_fu_823_p2;
wire   [31:0] add_ln15_38_fu_999_p2;
wire   [31:0] add_ln15_54_fu_1175_p2;
wire   [31:0] add_ln15_7_fu_658_p2;
wire   [31:0] add_ln15_23_fu_834_p2;
wire   [31:0] add_ln15_39_fu_1010_p2;
wire   [31:0] add_ln15_55_fu_1186_p2;
wire   [31:0] add_ln15_8_fu_669_p2;
wire   [31:0] add_ln15_24_fu_845_p2;
wire   [31:0] add_ln15_40_fu_1021_p2;
wire   [31:0] add_ln15_56_fu_1197_p2;
wire   [31:0] add_ln15_9_fu_680_p2;
wire   [31:0] add_ln15_25_fu_856_p2;
wire   [31:0] add_ln15_41_fu_1032_p2;
wire   [31:0] add_ln15_57_fu_1208_p2;
wire   [31:0] add_ln15_10_fu_691_p2;
wire   [31:0] add_ln15_26_fu_867_p2;
wire   [31:0] add_ln15_42_fu_1043_p2;
wire   [31:0] add_ln15_58_fu_1219_p2;
wire   [31:0] add_ln15_11_fu_702_p2;
wire   [31:0] add_ln15_27_fu_878_p2;
wire   [31:0] add_ln15_43_fu_1054_p2;
wire   [31:0] add_ln15_59_fu_1230_p2;
wire   [31:0] add_ln15_12_fu_713_p2;
wire   [31:0] add_ln15_28_fu_889_p2;
wire   [31:0] add_ln15_44_fu_1065_p2;
wire   [31:0] add_ln15_13_fu_724_p2;
wire   [31:0] add_ln15_29_fu_900_p2;
wire   [31:0] add_ln15_45_fu_1076_p2;
wire   [31:0] add_ln15_14_fu_735_p2;
wire   [31:0] add_ln15_30_fu_911_p2;
wire   [31:0] add_ln15_46_fu_1087_p2;
wire    ap_block_pp1_stage0_01001;
wire   [7:0] mul_ln15_fu_560_p0;
wire   [7:0] mul_ln15_fu_560_p1;
wire   [15:0] mul_ln15_fu_560_p2;
wire    ap_block_pp1_stage0;
wire   [1:0] tmp_14_fu_1267_p4;
wire   [1:0] tmp_13_fu_1276_p4;
wire   [1:0] tmp_12_fu_1285_p4;
wire   [1:0] tmp_11_fu_1294_p5;
wire   [1:0] tmp_10_fu_1304_p5;
wire   [1:0] tmp_s_fu_1314_p5;
wire   [1:0] tmp_9_fu_1324_p5;
wire   [1:0] tmp_8_fu_1334_p5;
wire   [1:0] tmp_7_fu_1344_p5;
wire   [1:0] tmp_6_fu_1354_p5;
wire   [1:0] tmp_5_fu_1364_p5;
wire   [1:0] tmp_4_fu_1374_p5;
wire   [1:0] tmp_3_fu_1384_p5;
wire   [1:0] tmp_2_fu_1394_p5;
wire   [1:0] tmp_1_fu_1404_p5;
wire   [1:0] tmp_fu_1414_p4;
wire   [0:0] empty_9_fu_1429_p2;
wire   [0:0] empty_8_fu_1423_p2;
wire   [5:0] grp_fu_1441_p1;
wire   [31:0] grp_fu_1441_p2;
wire   [4:0] rem_V_1_fu_1462_p2;
wire   [4:0] rem_V_3_fu_1467_p3;
wire   [5:0] zext_ln164_fu_1473_p1;
wire   [5:0] sub_ln657_fu_1477_p2;
wire   [5:0] zext_ln159_fu_1459_p1;
wire    ap_CS_fsm_state42;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [15:0] mul_ln15_fu_560_p00;
wire   [15:0] mul_ln15_fu_560_p10;
reg    ap_condition_318;
reg    ap_condition_683;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 accumulators_15_0 = 32'd0;
#0 accumulators_15_1 = 32'd0;
#0 accumulators_15_2 = 32'd0;
#0 accumulators_0_0 = 32'd0;
#0 accumulators_0_1 = 32'd0;
#0 accumulators_0_2 = 32'd0;
#0 accumulators_0_3 = 32'd0;
#0 accumulators_1_0 = 32'd0;
#0 accumulators_1_1 = 32'd0;
#0 accumulators_1_2 = 32'd0;
#0 accumulators_1_3 = 32'd0;
#0 accumulators_2_0 = 32'd0;
#0 accumulators_2_1 = 32'd0;
#0 accumulators_2_2 = 32'd0;
#0 accumulators_2_3 = 32'd0;
#0 accumulators_3_0 = 32'd0;
#0 accumulators_3_1 = 32'd0;
#0 accumulators_3_2 = 32'd0;
#0 accumulators_3_3 = 32'd0;
#0 accumulators_4_0 = 32'd0;
#0 accumulators_4_1 = 32'd0;
#0 accumulators_4_2 = 32'd0;
#0 accumulators_4_3 = 32'd0;
#0 accumulators_5_0 = 32'd0;
#0 accumulators_5_1 = 32'd0;
#0 accumulators_5_2 = 32'd0;
#0 accumulators_5_3 = 32'd0;
#0 accumulators_6_0 = 32'd0;
#0 accumulators_6_1 = 32'd0;
#0 accumulators_6_2 = 32'd0;
#0 accumulators_6_3 = 32'd0;
#0 accumulators_7_0 = 32'd0;
#0 accumulators_7_1 = 32'd0;
#0 accumulators_7_2 = 32'd0;
#0 accumulators_7_3 = 32'd0;
#0 accumulators_8_0 = 32'd0;
#0 accumulators_8_1 = 32'd0;
#0 accumulators_8_2 = 32'd0;
#0 accumulators_8_3 = 32'd0;
#0 accumulators_9_0 = 32'd0;
#0 accumulators_9_1 = 32'd0;
#0 accumulators_9_2 = 32'd0;
#0 accumulators_9_3 = 32'd0;
#0 accumulators_10_0 = 32'd0;
#0 accumulators_10_1 = 32'd0;
#0 accumulators_10_2 = 32'd0;
#0 accumulators_10_3 = 32'd0;
#0 accumulators_11_0 = 32'd0;
#0 accumulators_11_1 = 32'd0;
#0 accumulators_11_2 = 32'd0;
#0 accumulators_11_3 = 32'd0;
#0 accumulators_12_0 = 32'd0;
#0 accumulators_12_1 = 32'd0;
#0 accumulators_12_2 = 32'd0;
#0 accumulators_13_0 = 32'd0;
#0 accumulators_13_1 = 32'd0;
#0 accumulators_13_2 = 32'd0;
#0 accumulators_14_0 = 32'd0;
#0 accumulators_14_1 = 32'd0;
#0 accumulators_14_2 = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
end

hls_linear_combination_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln15_fu_560_p0),
    .din1(mul_ln15_fu_560_p1),
    .dout(mul_ln15_fu_560_p2)
);

hls_linear_combination_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U2(
    .din0(accumulators_14_0_load_1_reg_1858),
    .din1(accumulators_14_1_load_1_reg_1863),
    .din2(accumulators_14_2_load_1_reg_1868),
    .din3(tmp_14_fu_1267_p4),
    .dout(tmp_14_fu_1267_p5)
);

hls_linear_combination_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U3(
    .din0(accumulators_13_0_load_1_reg_1843),
    .din1(accumulators_13_1_load_1_reg_1848),
    .din2(accumulators_13_2_load_1_reg_1853),
    .din3(tmp_13_fu_1276_p4),
    .dout(tmp_13_fu_1276_p5)
);

hls_linear_combination_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U4(
    .din0(accumulators_12_0_load_1_reg_1828),
    .din1(accumulators_12_1_load_1_reg_1833),
    .din2(accumulators_12_2_load_1_reg_1838),
    .din3(tmp_12_fu_1285_p4),
    .dout(tmp_12_fu_1285_p5)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U5(
    .din0(accumulators_11_0_load_1_reg_1808),
    .din1(accumulators_11_1_load_1_reg_1813),
    .din2(accumulators_11_2_load_1_reg_1818),
    .din3(accumulators_11_3_load_1_reg_1823),
    .din4(tmp_11_fu_1294_p5),
    .dout(tmp_11_fu_1294_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U6(
    .din0(accumulators_10_0_load_1_reg_1788),
    .din1(accumulators_10_1_load_1_reg_1793),
    .din2(accumulators_10_2_load_1_reg_1798),
    .din3(accumulators_10_3_load_1_reg_1803),
    .din4(tmp_10_fu_1304_p5),
    .dout(tmp_10_fu_1304_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U7(
    .din0(accumulators_9_0_load_1_reg_1768),
    .din1(accumulators_9_1_load_1_reg_1773),
    .din2(accumulators_9_2_load_1_reg_1778),
    .din3(accumulators_9_3_load_1_reg_1783),
    .din4(tmp_s_fu_1314_p5),
    .dout(tmp_s_fu_1314_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U8(
    .din0(accumulators_8_0_load_1_reg_1748),
    .din1(accumulators_8_1_load_1_reg_1753),
    .din2(accumulators_8_2_load_1_reg_1758),
    .din3(accumulators_8_3_load_1_reg_1763),
    .din4(tmp_9_fu_1324_p5),
    .dout(tmp_9_fu_1324_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U9(
    .din0(accumulators_7_0_load_1_reg_1728),
    .din1(accumulators_7_1_load_1_reg_1733),
    .din2(accumulators_7_2_load_1_reg_1738),
    .din3(accumulators_7_3_load_1_reg_1743),
    .din4(tmp_8_fu_1334_p5),
    .dout(tmp_8_fu_1334_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U10(
    .din0(accumulators_6_0_load_1_reg_1708),
    .din1(accumulators_6_1_load_1_reg_1713),
    .din2(accumulators_6_2_load_1_reg_1718),
    .din3(accumulators_6_3_load_1_reg_1723),
    .din4(tmp_7_fu_1344_p5),
    .dout(tmp_7_fu_1344_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U11(
    .din0(accumulators_5_0_load_1_reg_1688),
    .din1(accumulators_5_1_load_1_reg_1693),
    .din2(accumulators_5_2_load_1_reg_1698),
    .din3(accumulators_5_3_load_1_reg_1703),
    .din4(tmp_6_fu_1354_p5),
    .dout(tmp_6_fu_1354_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U12(
    .din0(accumulators_4_0_load_1_reg_1668),
    .din1(accumulators_4_1_load_1_reg_1673),
    .din2(accumulators_4_2_load_1_reg_1678),
    .din3(accumulators_4_3_load_1_reg_1683),
    .din4(tmp_5_fu_1364_p5),
    .dout(tmp_5_fu_1364_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U13(
    .din0(accumulators_3_0_load_1_reg_1648),
    .din1(accumulators_3_1_load_1_reg_1653),
    .din2(accumulators_3_2_load_1_reg_1658),
    .din3(accumulators_3_3_load_1_reg_1663),
    .din4(tmp_4_fu_1374_p5),
    .dout(tmp_4_fu_1374_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U14(
    .din0(accumulators_2_0_load_1_reg_1628),
    .din1(accumulators_2_1_load_1_reg_1633),
    .din2(accumulators_2_2_load_1_reg_1638),
    .din3(accumulators_2_3_load_1_reg_1643),
    .din4(tmp_3_fu_1384_p5),
    .dout(tmp_3_fu_1384_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U15(
    .din0(accumulators_1_0_load_1_reg_1608),
    .din1(accumulators_1_1_load_1_reg_1613),
    .din2(accumulators_1_2_load_1_reg_1618),
    .din3(accumulators_1_3_load_1_reg_1623),
    .din4(tmp_2_fu_1394_p5),
    .dout(tmp_2_fu_1394_p6)
);

hls_linear_combination_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U16(
    .din0(accumulators_0_0_load_1_reg_1588),
    .din1(accumulators_0_1_load_1_reg_1593),
    .din2(accumulators_0_2_load_1_reg_1598),
    .din3(accumulators_0_3_load_1_reg_1603),
    .din4(tmp_1_fu_1404_p5),
    .dout(tmp_1_fu_1404_p6)
);

hls_linear_combination_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U17(
    .din0(accumulators_15_0_load_1_reg_1573),
    .din1(accumulators_15_1_load_1_reg_1578),
    .din2(accumulators_15_2_load_1_reg_1583),
    .din3(tmp_fu_1414_p4),
    .dout(tmp_fu_1414_p5)
);

hls_linear_combination_urem_32ns_6ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
urem_32ns_6ns_32_36_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_reg_pp1_iter1_tmp_15_reg_263),
    .din1(grp_fu_1441_p1),
    .ce(1'b1),
    .dout(grp_fu_1441_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter37 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_318)) begin
        if (((trunc_ln25_fu_1253_p1 == 4'd15) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_fu_1414_p5;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd14) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_14_fu_1267_p5;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd13) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_13_fu_1276_p5;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd12) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_12_fu_1285_p5;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd11) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_11_fu_1294_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd10) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_10_fu_1304_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd9) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_s_fu_1314_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd8) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_9_fu_1324_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd7) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_8_fu_1334_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd6) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_7_fu_1344_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd5) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_6_fu_1354_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd4) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_5_fu_1364_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd3) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_4_fu_1374_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd2) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_3_fu_1384_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd1) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_2_fu_1394_p6;
        end else if (((trunc_ln25_fu_1253_p1 == 4'd0) & (icmp_ln19_fu_1247_p2 == 1'd0))) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_1_fu_1404_p6;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= ap_phi_reg_pp1_iter0_tmp_15_reg_263;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_683)) begin
        if (((empty_10_fu_1435_p2 == 1'd1) & (icmp_ln19_reg_1878 == 1'd0))) begin
            ap_phi_reg_pp1_iter2_p_Val2_s_reg_301 <= 6'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter2_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_301;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_252 <= 6'd0;
    end else if (((icmp_ln19_fu_1247_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_252 <= add_ln19_fu_1241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_241 <= 32'd0;
    end else if (((icmp_ln12_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_241 <= add_ln12_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        accumulators_0_0 <= add_ln15_fu_581_p2;
        accumulators_0_1 <= add_ln15_16_fu_757_p2;
        accumulators_0_2 <= add_ln15_32_fu_933_p2;
        accumulators_0_3 <= add_ln15_48_fu_1109_p2;
        accumulators_10_0 <= add_ln15_10_fu_691_p2;
        accumulators_10_1 <= add_ln15_26_fu_867_p2;
        accumulators_10_2 <= add_ln15_42_fu_1043_p2;
        accumulators_10_3 <= add_ln15_58_fu_1219_p2;
        accumulators_11_0 <= add_ln15_11_fu_702_p2;
        accumulators_11_1 <= add_ln15_27_fu_878_p2;
        accumulators_11_2 <= add_ln15_43_fu_1054_p2;
        accumulators_11_3 <= add_ln15_59_fu_1230_p2;
        accumulators_12_0 <= add_ln15_12_fu_713_p2;
        accumulators_12_1 <= add_ln15_28_fu_889_p2;
        accumulators_12_2 <= add_ln15_44_fu_1065_p2;
        accumulators_13_0 <= add_ln15_13_fu_724_p2;
        accumulators_13_1 <= add_ln15_29_fu_900_p2;
        accumulators_13_2 <= add_ln15_45_fu_1076_p2;
        accumulators_14_0 <= add_ln15_14_fu_735_p2;
        accumulators_14_1 <= add_ln15_30_fu_911_p2;
        accumulators_14_2 <= add_ln15_46_fu_1087_p2;
        accumulators_15_0 <= add_ln15_15_fu_746_p2;
        accumulators_15_1 <= add_ln15_31_fu_922_p2;
        accumulators_15_2 <= add_ln15_47_fu_1098_p2;
        accumulators_1_0 <= add_ln15_1_fu_592_p2;
        accumulators_1_1 <= add_ln15_17_fu_768_p2;
        accumulators_1_2 <= add_ln15_33_fu_944_p2;
        accumulators_1_3 <= add_ln15_49_fu_1120_p2;
        accumulators_2_0 <= add_ln15_2_fu_603_p2;
        accumulators_2_1 <= add_ln15_18_fu_779_p2;
        accumulators_2_2 <= add_ln15_34_fu_955_p2;
        accumulators_2_3 <= add_ln15_50_fu_1131_p2;
        accumulators_3_0 <= add_ln15_3_fu_614_p2;
        accumulators_3_1 <= add_ln15_19_fu_790_p2;
        accumulators_3_2 <= add_ln15_35_fu_966_p2;
        accumulators_3_3 <= add_ln15_51_fu_1142_p2;
        accumulators_4_0 <= add_ln15_4_fu_625_p2;
        accumulators_4_1 <= add_ln15_20_fu_801_p2;
        accumulators_4_2 <= add_ln15_36_fu_977_p2;
        accumulators_4_3 <= add_ln15_52_fu_1153_p2;
        accumulators_5_0 <= add_ln15_5_fu_636_p2;
        accumulators_5_1 <= add_ln15_21_fu_812_p2;
        accumulators_5_2 <= add_ln15_37_fu_988_p2;
        accumulators_5_3 <= add_ln15_53_fu_1164_p2;
        accumulators_6_0 <= add_ln15_6_fu_647_p2;
        accumulators_6_1 <= add_ln15_22_fu_823_p2;
        accumulators_6_2 <= add_ln15_38_fu_999_p2;
        accumulators_6_3 <= add_ln15_54_fu_1175_p2;
        accumulators_7_0 <= add_ln15_7_fu_658_p2;
        accumulators_7_1 <= add_ln15_23_fu_834_p2;
        accumulators_7_2 <= add_ln15_39_fu_1010_p2;
        accumulators_7_3 <= add_ln15_55_fu_1186_p2;
        accumulators_8_0 <= add_ln15_8_fu_669_p2;
        accumulators_8_1 <= add_ln15_24_fu_845_p2;
        accumulators_8_2 <= add_ln15_40_fu_1021_p2;
        accumulators_8_3 <= add_ln15_56_fu_1197_p2;
        accumulators_9_0 <= add_ln15_9_fu_680_p2;
        accumulators_9_1 <= add_ln15_25_fu_856_p2;
        accumulators_9_2 <= add_ln15_41_fu_1032_p2;
        accumulators_9_3 <= add_ln15_57_fu_1208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        accumulators_0_0_load_1_reg_1588 <= accumulators_0_0;
        accumulators_0_1_load_1_reg_1593 <= accumulators_0_1;
        accumulators_0_2_load_1_reg_1598 <= accumulators_0_2;
        accumulators_0_3_load_1_reg_1603 <= accumulators_0_3;
        accumulators_10_0_load_1_reg_1788 <= accumulators_10_0;
        accumulators_10_1_load_1_reg_1793 <= accumulators_10_1;
        accumulators_10_2_load_1_reg_1798 <= accumulators_10_2;
        accumulators_10_3_load_1_reg_1803 <= accumulators_10_3;
        accumulators_11_0_load_1_reg_1808 <= accumulators_11_0;
        accumulators_11_1_load_1_reg_1813 <= accumulators_11_1;
        accumulators_11_2_load_1_reg_1818 <= accumulators_11_2;
        accumulators_11_3_load_1_reg_1823 <= accumulators_11_3;
        accumulators_12_0_load_1_reg_1828 <= accumulators_12_0;
        accumulators_12_1_load_1_reg_1833 <= accumulators_12_1;
        accumulators_12_2_load_1_reg_1838 <= accumulators_12_2;
        accumulators_13_0_load_1_reg_1843 <= accumulators_13_0;
        accumulators_13_1_load_1_reg_1848 <= accumulators_13_1;
        accumulators_13_2_load_1_reg_1853 <= accumulators_13_2;
        accumulators_14_0_load_1_reg_1858 <= accumulators_14_0;
        accumulators_14_1_load_1_reg_1863 <= accumulators_14_1;
        accumulators_14_2_load_1_reg_1868 <= accumulators_14_2;
        accumulators_15_0_load_1_reg_1573 <= accumulators_15_0;
        accumulators_15_1_load_1_reg_1578 <= accumulators_15_1;
        accumulators_15_2_load_1_reg_1583 <= accumulators_15_2;
        accumulators_1_0_load_1_reg_1608 <= accumulators_1_0;
        accumulators_1_1_load_1_reg_1613 <= accumulators_1_1;
        accumulators_1_2_load_1_reg_1618 <= accumulators_1_2;
        accumulators_1_3_load_1_reg_1623 <= accumulators_1_3;
        accumulators_2_0_load_1_reg_1628 <= accumulators_2_0;
        accumulators_2_1_load_1_reg_1633 <= accumulators_2_1;
        accumulators_2_2_load_1_reg_1638 <= accumulators_2_2;
        accumulators_2_3_load_1_reg_1643 <= accumulators_2_3;
        accumulators_3_0_load_1_reg_1648 <= accumulators_3_0;
        accumulators_3_1_load_1_reg_1653 <= accumulators_3_1;
        accumulators_3_2_load_1_reg_1658 <= accumulators_3_2;
        accumulators_3_3_load_1_reg_1663 <= accumulators_3_3;
        accumulators_4_0_load_1_reg_1668 <= accumulators_4_0;
        accumulators_4_1_load_1_reg_1673 <= accumulators_4_1;
        accumulators_4_2_load_1_reg_1678 <= accumulators_4_2;
        accumulators_4_3_load_1_reg_1683 <= accumulators_4_3;
        accumulators_5_0_load_1_reg_1688 <= accumulators_5_0;
        accumulators_5_1_load_1_reg_1693 <= accumulators_5_1;
        accumulators_5_2_load_1_reg_1698 <= accumulators_5_2;
        accumulators_5_3_load_1_reg_1703 <= accumulators_5_3;
        accumulators_6_0_load_1_reg_1708 <= accumulators_6_0;
        accumulators_6_1_load_1_reg_1713 <= accumulators_6_1;
        accumulators_6_2_load_1_reg_1718 <= accumulators_6_2;
        accumulators_6_3_load_1_reg_1723 <= accumulators_6_3;
        accumulators_7_0_load_1_reg_1728 <= accumulators_7_0;
        accumulators_7_1_load_1_reg_1733 <= accumulators_7_1;
        accumulators_7_2_load_1_reg_1738 <= accumulators_7_2;
        accumulators_7_3_load_1_reg_1743 <= accumulators_7_3;
        accumulators_8_0_load_1_reg_1748 <= accumulators_8_0;
        accumulators_8_1_load_1_reg_1753 <= accumulators_8_1;
        accumulators_8_2_load_1_reg_1758 <= accumulators_8_2;
        accumulators_8_3_load_1_reg_1763 <= accumulators_8_3;
        accumulators_9_0_load_1_reg_1768 <= accumulators_9_0;
        accumulators_9_1_load_1_reg_1773 <= accumulators_9_1;
        accumulators_9_2_load_1_reg_1778 <= accumulators_9_2;
        accumulators_9_3_load_1_reg_1783 <= accumulators_9_3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter9 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter10_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter9_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter11_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter10_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter12_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter11_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter13_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter12_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter13 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter14_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter13_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter15_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter14_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter15 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter16_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter15_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter17_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter16_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter17 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter18_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter17_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter18 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter19_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter18_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter1_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter19 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter20_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter19_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter20 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter21_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter20_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter21 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter22_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter21_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter22 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter23_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter22_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter23 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter24_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter23_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter24 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter25_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter24_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter25 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter26_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter25_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter26 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter27_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter26_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter27 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter28_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter27_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter28 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter29_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter28_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter29 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter30_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter29_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter30 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter31_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter30_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter31 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter32_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter31_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter32 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter33_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter32_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter33 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter34_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter33_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter34 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter35_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter34_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter35 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter36_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter35_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter36 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter37_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter36_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter3_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter2_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter4_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter3_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter5_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter4_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter6_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter5_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter6 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter7_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter6_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter7 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter8_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter7_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_phi_reg_pp1_iter9_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter8_p_Val2_s_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1878 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_10_reg_1966 <= empty_10_fu_1435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        empty_10_reg_1966_pp1_iter10_reg <= empty_10_reg_1966_pp1_iter9_reg;
        empty_10_reg_1966_pp1_iter11_reg <= empty_10_reg_1966_pp1_iter10_reg;
        empty_10_reg_1966_pp1_iter12_reg <= empty_10_reg_1966_pp1_iter11_reg;
        empty_10_reg_1966_pp1_iter13_reg <= empty_10_reg_1966_pp1_iter12_reg;
        empty_10_reg_1966_pp1_iter14_reg <= empty_10_reg_1966_pp1_iter13_reg;
        empty_10_reg_1966_pp1_iter15_reg <= empty_10_reg_1966_pp1_iter14_reg;
        empty_10_reg_1966_pp1_iter16_reg <= empty_10_reg_1966_pp1_iter15_reg;
        empty_10_reg_1966_pp1_iter17_reg <= empty_10_reg_1966_pp1_iter16_reg;
        empty_10_reg_1966_pp1_iter18_reg <= empty_10_reg_1966_pp1_iter17_reg;
        empty_10_reg_1966_pp1_iter19_reg <= empty_10_reg_1966_pp1_iter18_reg;
        empty_10_reg_1966_pp1_iter20_reg <= empty_10_reg_1966_pp1_iter19_reg;
        empty_10_reg_1966_pp1_iter21_reg <= empty_10_reg_1966_pp1_iter20_reg;
        empty_10_reg_1966_pp1_iter22_reg <= empty_10_reg_1966_pp1_iter21_reg;
        empty_10_reg_1966_pp1_iter23_reg <= empty_10_reg_1966_pp1_iter22_reg;
        empty_10_reg_1966_pp1_iter24_reg <= empty_10_reg_1966_pp1_iter23_reg;
        empty_10_reg_1966_pp1_iter25_reg <= empty_10_reg_1966_pp1_iter24_reg;
        empty_10_reg_1966_pp1_iter26_reg <= empty_10_reg_1966_pp1_iter25_reg;
        empty_10_reg_1966_pp1_iter27_reg <= empty_10_reg_1966_pp1_iter26_reg;
        empty_10_reg_1966_pp1_iter28_reg <= empty_10_reg_1966_pp1_iter27_reg;
        empty_10_reg_1966_pp1_iter29_reg <= empty_10_reg_1966_pp1_iter28_reg;
        empty_10_reg_1966_pp1_iter2_reg <= empty_10_reg_1966;
        empty_10_reg_1966_pp1_iter30_reg <= empty_10_reg_1966_pp1_iter29_reg;
        empty_10_reg_1966_pp1_iter31_reg <= empty_10_reg_1966_pp1_iter30_reg;
        empty_10_reg_1966_pp1_iter32_reg <= empty_10_reg_1966_pp1_iter31_reg;
        empty_10_reg_1966_pp1_iter33_reg <= empty_10_reg_1966_pp1_iter32_reg;
        empty_10_reg_1966_pp1_iter34_reg <= empty_10_reg_1966_pp1_iter33_reg;
        empty_10_reg_1966_pp1_iter35_reg <= empty_10_reg_1966_pp1_iter34_reg;
        empty_10_reg_1966_pp1_iter36_reg <= empty_10_reg_1966_pp1_iter35_reg;
        empty_10_reg_1966_pp1_iter3_reg <= empty_10_reg_1966_pp1_iter2_reg;
        empty_10_reg_1966_pp1_iter4_reg <= empty_10_reg_1966_pp1_iter3_reg;
        empty_10_reg_1966_pp1_iter5_reg <= empty_10_reg_1966_pp1_iter4_reg;
        empty_10_reg_1966_pp1_iter6_reg <= empty_10_reg_1966_pp1_iter5_reg;
        empty_10_reg_1966_pp1_iter7_reg <= empty_10_reg_1966_pp1_iter6_reg;
        empty_10_reg_1966_pp1_iter8_reg <= empty_10_reg_1966_pp1_iter7_reg;
        empty_10_reg_1966_pp1_iter9_reg <= empty_10_reg_1966_pp1_iter8_reg;
        icmp_ln19_reg_1878_pp1_iter10_reg <= icmp_ln19_reg_1878_pp1_iter9_reg;
        icmp_ln19_reg_1878_pp1_iter11_reg <= icmp_ln19_reg_1878_pp1_iter10_reg;
        icmp_ln19_reg_1878_pp1_iter12_reg <= icmp_ln19_reg_1878_pp1_iter11_reg;
        icmp_ln19_reg_1878_pp1_iter13_reg <= icmp_ln19_reg_1878_pp1_iter12_reg;
        icmp_ln19_reg_1878_pp1_iter14_reg <= icmp_ln19_reg_1878_pp1_iter13_reg;
        icmp_ln19_reg_1878_pp1_iter15_reg <= icmp_ln19_reg_1878_pp1_iter14_reg;
        icmp_ln19_reg_1878_pp1_iter16_reg <= icmp_ln19_reg_1878_pp1_iter15_reg;
        icmp_ln19_reg_1878_pp1_iter17_reg <= icmp_ln19_reg_1878_pp1_iter16_reg;
        icmp_ln19_reg_1878_pp1_iter18_reg <= icmp_ln19_reg_1878_pp1_iter17_reg;
        icmp_ln19_reg_1878_pp1_iter19_reg <= icmp_ln19_reg_1878_pp1_iter18_reg;
        icmp_ln19_reg_1878_pp1_iter20_reg <= icmp_ln19_reg_1878_pp1_iter19_reg;
        icmp_ln19_reg_1878_pp1_iter21_reg <= icmp_ln19_reg_1878_pp1_iter20_reg;
        icmp_ln19_reg_1878_pp1_iter22_reg <= icmp_ln19_reg_1878_pp1_iter21_reg;
        icmp_ln19_reg_1878_pp1_iter23_reg <= icmp_ln19_reg_1878_pp1_iter22_reg;
        icmp_ln19_reg_1878_pp1_iter24_reg <= icmp_ln19_reg_1878_pp1_iter23_reg;
        icmp_ln19_reg_1878_pp1_iter25_reg <= icmp_ln19_reg_1878_pp1_iter24_reg;
        icmp_ln19_reg_1878_pp1_iter26_reg <= icmp_ln19_reg_1878_pp1_iter25_reg;
        icmp_ln19_reg_1878_pp1_iter27_reg <= icmp_ln19_reg_1878_pp1_iter26_reg;
        icmp_ln19_reg_1878_pp1_iter28_reg <= icmp_ln19_reg_1878_pp1_iter27_reg;
        icmp_ln19_reg_1878_pp1_iter29_reg <= icmp_ln19_reg_1878_pp1_iter28_reg;
        icmp_ln19_reg_1878_pp1_iter2_reg <= icmp_ln19_reg_1878_pp1_iter1_reg;
        icmp_ln19_reg_1878_pp1_iter30_reg <= icmp_ln19_reg_1878_pp1_iter29_reg;
        icmp_ln19_reg_1878_pp1_iter31_reg <= icmp_ln19_reg_1878_pp1_iter30_reg;
        icmp_ln19_reg_1878_pp1_iter32_reg <= icmp_ln19_reg_1878_pp1_iter31_reg;
        icmp_ln19_reg_1878_pp1_iter33_reg <= icmp_ln19_reg_1878_pp1_iter32_reg;
        icmp_ln19_reg_1878_pp1_iter34_reg <= icmp_ln19_reg_1878_pp1_iter33_reg;
        icmp_ln19_reg_1878_pp1_iter35_reg <= icmp_ln19_reg_1878_pp1_iter34_reg;
        icmp_ln19_reg_1878_pp1_iter36_reg <= icmp_ln19_reg_1878_pp1_iter35_reg;
        icmp_ln19_reg_1878_pp1_iter3_reg <= icmp_ln19_reg_1878_pp1_iter2_reg;
        icmp_ln19_reg_1878_pp1_iter4_reg <= icmp_ln19_reg_1878_pp1_iter3_reg;
        icmp_ln19_reg_1878_pp1_iter5_reg <= icmp_ln19_reg_1878_pp1_iter4_reg;
        icmp_ln19_reg_1878_pp1_iter6_reg <= icmp_ln19_reg_1878_pp1_iter5_reg;
        icmp_ln19_reg_1878_pp1_iter7_reg <= icmp_ln19_reg_1878_pp1_iter6_reg;
        icmp_ln19_reg_1878_pp1_iter8_reg <= icmp_ln19_reg_1878_pp1_iter7_reg;
        icmp_ln19_reg_1878_pp1_iter9_reg <= icmp_ln19_reg_1878_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln19_reg_1878 <= icmp_ln19_fu_1247_p2;
        icmp_ln19_reg_1878_pp1_iter1_reg <= icmp_ln19_reg_1878;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_10_reg_1966_pp1_iter35_reg == 1'd0) & (icmp_ln19_reg_1878_pp1_iter35_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        r_sig_V_reg_1977 <= grp_fu_1441_p2[32'd4];
        trunc_ln167_reg_1970 <= trunc_ln167_fu_1447_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln12_reg_1501[15 : 0] <= zext_ln12_fu_566_p1[15 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_1247_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_10_reg_1966_pp1_iter36_reg == 1'd0) & (icmp_ln19_reg_1878_pp1_iter36_reg == 1'd0))) begin
        ap_phi_mux_p_Val2_s_phi_fu_305_p4 = select_ln175_fu_1483_p3;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_305_p4 = ap_phi_reg_pp1_iter37_p_Val2_s_reg_301;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter37 == 1'b1) & (icmp_ln19_reg_1878_pp1_iter36_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln19_fu_1247_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter37 == 1'b1) & (ap_enable_reg_pp1_iter36 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter37 == 1'b1) & (ap_enable_reg_pp1_iter36 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln19_fu_1247_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_570_p2 = (i_reg_241 + 32'd1);

assign add_ln15_10_fu_691_p2 = (accumulators_10_0 + zext_ln12_reg_1501);

assign add_ln15_11_fu_702_p2 = (accumulators_11_0 + zext_ln12_reg_1501);

assign add_ln15_12_fu_713_p2 = (accumulators_12_0 + zext_ln12_reg_1501);

assign add_ln15_13_fu_724_p2 = (accumulators_13_0 + zext_ln12_reg_1501);

assign add_ln15_14_fu_735_p2 = (accumulators_14_0 + zext_ln12_reg_1501);

assign add_ln15_15_fu_746_p2 = (accumulators_15_0 + zext_ln12_reg_1501);

assign add_ln15_16_fu_757_p2 = (accumulators_0_1 + zext_ln12_reg_1501);

assign add_ln15_17_fu_768_p2 = (accumulators_1_1 + zext_ln12_reg_1501);

assign add_ln15_18_fu_779_p2 = (accumulators_2_1 + zext_ln12_reg_1501);

assign add_ln15_19_fu_790_p2 = (accumulators_3_1 + zext_ln12_reg_1501);

assign add_ln15_1_fu_592_p2 = (accumulators_1_0 + zext_ln12_reg_1501);

assign add_ln15_20_fu_801_p2 = (accumulators_4_1 + zext_ln12_reg_1501);

assign add_ln15_21_fu_812_p2 = (accumulators_5_1 + zext_ln12_reg_1501);

assign add_ln15_22_fu_823_p2 = (accumulators_6_1 + zext_ln12_reg_1501);

assign add_ln15_23_fu_834_p2 = (accumulators_7_1 + zext_ln12_reg_1501);

assign add_ln15_24_fu_845_p2 = (accumulators_8_1 + zext_ln12_reg_1501);

assign add_ln15_25_fu_856_p2 = (accumulators_9_1 + zext_ln12_reg_1501);

assign add_ln15_26_fu_867_p2 = (accumulators_10_1 + zext_ln12_reg_1501);

assign add_ln15_27_fu_878_p2 = (accumulators_11_1 + zext_ln12_reg_1501);

assign add_ln15_28_fu_889_p2 = (accumulators_12_1 + zext_ln12_reg_1501);

assign add_ln15_29_fu_900_p2 = (accumulators_13_1 + zext_ln12_reg_1501);

assign add_ln15_2_fu_603_p2 = (accumulators_2_0 + zext_ln12_reg_1501);

assign add_ln15_30_fu_911_p2 = (accumulators_14_1 + zext_ln12_reg_1501);

assign add_ln15_31_fu_922_p2 = (accumulators_15_1 + zext_ln12_reg_1501);

assign add_ln15_32_fu_933_p2 = (accumulators_0_2 + zext_ln12_reg_1501);

assign add_ln15_33_fu_944_p2 = (accumulators_1_2 + zext_ln12_reg_1501);

assign add_ln15_34_fu_955_p2 = (accumulators_2_2 + zext_ln12_reg_1501);

assign add_ln15_35_fu_966_p2 = (accumulators_3_2 + zext_ln12_reg_1501);

assign add_ln15_36_fu_977_p2 = (accumulators_4_2 + zext_ln12_reg_1501);

assign add_ln15_37_fu_988_p2 = (accumulators_5_2 + zext_ln12_reg_1501);

assign add_ln15_38_fu_999_p2 = (accumulators_6_2 + zext_ln12_reg_1501);

assign add_ln15_39_fu_1010_p2 = (accumulators_7_2 + zext_ln12_reg_1501);

assign add_ln15_3_fu_614_p2 = (accumulators_3_0 + zext_ln12_reg_1501);

assign add_ln15_40_fu_1021_p2 = (accumulators_8_2 + zext_ln12_reg_1501);

assign add_ln15_41_fu_1032_p2 = (accumulators_9_2 + zext_ln12_reg_1501);

assign add_ln15_42_fu_1043_p2 = (accumulators_10_2 + zext_ln12_reg_1501);

assign add_ln15_43_fu_1054_p2 = (accumulators_11_2 + zext_ln12_reg_1501);

assign add_ln15_44_fu_1065_p2 = (accumulators_12_2 + zext_ln12_reg_1501);

assign add_ln15_45_fu_1076_p2 = (accumulators_13_2 + zext_ln12_reg_1501);

assign add_ln15_46_fu_1087_p2 = (accumulators_14_2 + zext_ln12_reg_1501);

assign add_ln15_47_fu_1098_p2 = (accumulators_15_2 + zext_ln12_reg_1501);

assign add_ln15_48_fu_1109_p2 = (accumulators_0_3 + zext_ln12_reg_1501);

assign add_ln15_49_fu_1120_p2 = (accumulators_1_3 + zext_ln12_reg_1501);

assign add_ln15_4_fu_625_p2 = (accumulators_4_0 + zext_ln12_reg_1501);

assign add_ln15_50_fu_1131_p2 = (accumulators_2_3 + zext_ln12_reg_1501);

assign add_ln15_51_fu_1142_p2 = (accumulators_3_3 + zext_ln12_reg_1501);

assign add_ln15_52_fu_1153_p2 = (accumulators_4_3 + zext_ln12_reg_1501);

assign add_ln15_53_fu_1164_p2 = (accumulators_5_3 + zext_ln12_reg_1501);

assign add_ln15_54_fu_1175_p2 = (accumulators_6_3 + zext_ln12_reg_1501);

assign add_ln15_55_fu_1186_p2 = (accumulators_7_3 + zext_ln12_reg_1501);

assign add_ln15_56_fu_1197_p2 = (accumulators_8_3 + zext_ln12_reg_1501);

assign add_ln15_57_fu_1208_p2 = (accumulators_9_3 + zext_ln12_reg_1501);

assign add_ln15_58_fu_1219_p2 = (accumulators_10_3 + zext_ln12_reg_1501);

assign add_ln15_59_fu_1230_p2 = (accumulators_11_3 + zext_ln12_reg_1501);

assign add_ln15_5_fu_636_p2 = (accumulators_5_0 + zext_ln12_reg_1501);

assign add_ln15_6_fu_647_p2 = (accumulators_6_0 + zext_ln12_reg_1501);

assign add_ln15_7_fu_658_p2 = (accumulators_7_0 + zext_ln12_reg_1501);

assign add_ln15_8_fu_669_p2 = (accumulators_8_0 + zext_ln12_reg_1501);

assign add_ln15_9_fu_680_p2 = (accumulators_9_0 + zext_ln12_reg_1501);

assign add_ln15_fu_581_p2 = (accumulators_0_0 + zext_ln12_reg_1501);

assign add_ln19_fu_1241_p2 = (i_1_reg_252 + 6'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_318 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

always @ (*) begin
    ap_condition_683 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_301 = 'bx;

assign ap_phi_reg_pp1_iter0_tmp_15_reg_263 = 'bx;

assign empty_10_fu_1435_p2 = (empty_9_fu_1429_p2 | empty_8_fu_1423_p2);

assign empty_8_fu_1423_p2 = ((ap_phi_reg_pp1_iter1_tmp_15_reg_263 == 32'd31) ? 1'b1 : 1'b0);

assign empty_9_fu_1429_p2 = ((ap_phi_reg_pp1_iter1_tmp_15_reg_263 == 32'd0) ? 1'b1 : 1'b0);

assign grp_fu_1441_p1 = 32'd31;

assign icmp_ln12_fu_576_p2 = ((i_reg_241 == len) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_1247_p2 = ((i_1_reg_252 == 6'd60) ? 1'b1 : 1'b0);

assign mul_ln15_fu_560_p0 = mul_ln15_fu_560_p00;

assign mul_ln15_fu_560_p00 = vecs;

assign mul_ln15_fu_560_p1 = mul_ln15_fu_560_p10;

assign mul_ln15_fu_560_p10 = coeffs;

assign out_r = $signed(ap_phi_mux_p_Val2_s_phi_fu_305_p4);

assign rem_V_1_fu_1462_p2 = (trunc_ln167_reg_1970 ^ 5'd31);

assign rem_V_3_fu_1467_p3 = ((r_sig_V_reg_1977[0:0] == 1'b1) ? rem_V_1_fu_1462_p2 : trunc_ln167_reg_1970);

assign select_ln175_fu_1483_p3 = ((r_sig_V_reg_1977[0:0] == 1'b1) ? sub_ln657_fu_1477_p2 : zext_ln159_fu_1459_p1);

assign sub_ln657_fu_1477_p2 = (6'd0 - zext_ln164_fu_1473_p1);

assign tmp_10_fu_1304_p5 = {{i_1_reg_252[5:4]}};

assign tmp_11_fu_1294_p5 = {{i_1_reg_252[5:4]}};

assign tmp_12_fu_1285_p4 = {{i_1_reg_252[5:4]}};

assign tmp_13_fu_1276_p4 = {{i_1_reg_252[5:4]}};

assign tmp_14_fu_1267_p4 = {{i_1_reg_252[5:4]}};

assign tmp_1_fu_1404_p5 = {{i_1_reg_252[5:4]}};

assign tmp_2_fu_1394_p5 = {{i_1_reg_252[5:4]}};

assign tmp_3_fu_1384_p5 = {{i_1_reg_252[5:4]}};

assign tmp_4_fu_1374_p5 = {{i_1_reg_252[5:4]}};

assign tmp_5_fu_1364_p5 = {{i_1_reg_252[5:4]}};

assign tmp_6_fu_1354_p5 = {{i_1_reg_252[5:4]}};

assign tmp_7_fu_1344_p5 = {{i_1_reg_252[5:4]}};

assign tmp_8_fu_1334_p5 = {{i_1_reg_252[5:4]}};

assign tmp_9_fu_1324_p5 = {{i_1_reg_252[5:4]}};

assign tmp_fu_1414_p4 = {{i_1_reg_252[5:4]}};

assign tmp_s_fu_1314_p5 = {{i_1_reg_252[5:4]}};

assign trunc_ln167_fu_1447_p1 = grp_fu_1441_p2[4:0];

assign trunc_ln25_fu_1253_p1 = i_1_reg_252[3:0];

assign zext_ln12_fu_566_p1 = mul_ln15_fu_560_p2;

assign zext_ln159_fu_1459_p1 = trunc_ln167_reg_1970;

assign zext_ln164_fu_1473_p1 = rem_V_3_fu_1467_p3;

always @ (posedge ap_clk) begin
    zext_ln12_reg_1501[31:16] <= 16'b0000000000000000;
end

endmodule //hls_linear_combination
