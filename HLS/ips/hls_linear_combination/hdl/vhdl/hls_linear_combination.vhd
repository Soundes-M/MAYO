-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_linear_combination is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vecs : IN STD_LOGIC_VECTOR (7 downto 0);
    coeffs : IN STD_LOGIC_VECTOR (7 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_linear_combination is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_linear_combination_hls_linear_combination,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.039000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6610,HLS_SYN_LUT=4802,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal accumulators_15_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_15_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_15_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_0_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_0_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_0_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_0_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_1_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_1_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_2_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_2_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_2_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_2_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_3_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_3_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_3_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_3_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_4_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_4_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_4_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_4_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_5_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_5_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_5_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_5_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_6_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_6_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_6_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_6_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_7_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_7_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_7_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_7_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_8_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_8_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_8_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_8_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_9_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_9_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_9_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_9_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_10_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_10_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_10_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_10_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_11_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_11_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_11_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_11_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_12_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_12_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_12_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_13_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_13_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_13_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_14_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_14_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal accumulators_14_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_1_reg_252 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal zext_ln12_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal accumulators_15_0_load_1_reg_1573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal accumulators_15_1_load_1_reg_1578 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_15_2_load_1_reg_1583 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_0_load_1_reg_1588 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_1_load_1_reg_1593 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_2_load_1_reg_1598 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_0_3_load_1_reg_1603 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_0_load_1_reg_1608 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_1_load_1_reg_1613 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_2_load_1_reg_1618 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_1_3_load_1_reg_1623 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_0_load_1_reg_1628 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_1_load_1_reg_1633 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_2_load_1_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_2_3_load_1_reg_1643 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_0_load_1_reg_1648 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_1_load_1_reg_1653 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_2_load_1_reg_1658 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_3_3_load_1_reg_1663 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_0_load_1_reg_1668 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_1_load_1_reg_1673 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_2_load_1_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_4_3_load_1_reg_1683 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_0_load_1_reg_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_1_load_1_reg_1693 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_2_load_1_reg_1698 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_5_3_load_1_reg_1703 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_0_load_1_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_1_load_1_reg_1713 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_2_load_1_reg_1718 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_6_3_load_1_reg_1723 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_0_load_1_reg_1728 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_1_load_1_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_2_load_1_reg_1738 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_7_3_load_1_reg_1743 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_0_load_1_reg_1748 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_1_load_1_reg_1753 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_2_load_1_reg_1758 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_8_3_load_1_reg_1763 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_0_load_1_reg_1768 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_1_load_1_reg_1773 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_2_load_1_reg_1778 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_9_3_load_1_reg_1783 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_0_load_1_reg_1788 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_1_load_1_reg_1793 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_2_load_1_reg_1798 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_10_3_load_1_reg_1803 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_0_load_1_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_1_load_1_reg_1813 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_2_load_1_reg_1818 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_11_3_load_1_reg_1823 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_0_load_1_reg_1828 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_1_load_1_reg_1833 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_12_2_load_1_reg_1838 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_0_load_1_reg_1843 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_1_load_1_reg_1848 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_13_2_load_1_reg_1853 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_0_load_1_reg_1858 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_1_load_1_reg_1863 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulators_14_2_load_1_reg_1868 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_fu_1241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln19_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1878_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_fu_1253_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_1267_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1276_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1285_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1294_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1304_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1314_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1324_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1334_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1344_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1354_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1364_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1374_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1384_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1394_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1404_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1414_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_fu_1435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_reg_1966_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln167_fu_1447_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln167_reg_1970 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_sig_V_reg_1977 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal i_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln12_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter0_tmp_15_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_tmp_15_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_305_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln175_fu_1483_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter37_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter0_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter1_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter2_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter3_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter4_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter5_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter6_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter7_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter8_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter9_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter10_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter11_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter12_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter13_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter14_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter15_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter16_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter17_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter18_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter19_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter20_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter21_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter22_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter23_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter24_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter25_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter26_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter27_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter28_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter29_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter30_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter31_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter32_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter33_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter34_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter35_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp1_iter36_p_Val2_s_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln15_15_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_31_fu_922_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_47_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_16_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_32_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_48_fu_1109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_1_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_17_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_33_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_49_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_2_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_18_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_34_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_50_fu_1131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_3_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_19_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_35_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_51_fu_1142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_4_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_20_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_36_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_52_fu_1153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_5_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_21_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_37_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_53_fu_1164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_6_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_22_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_38_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_54_fu_1175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_7_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_23_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_39_fu_1010_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_55_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_8_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_24_fu_845_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_40_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_56_fu_1197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_9_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_25_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_41_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_57_fu_1208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_10_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_26_fu_867_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_42_fu_1043_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_58_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_11_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_27_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_43_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_59_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_12_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_28_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_44_fu_1065_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_13_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_29_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_45_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_14_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_30_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_46_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal mul_ln15_fu_560_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln15_fu_560_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln15_fu_560_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_14_fu_1267_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_1276_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_1285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_1294_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_1304_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_1314_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1324_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1334_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1344_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1354_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_1364_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_1374_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1384_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1394_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1404_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_1414_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_9_fu_1429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_8_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1441_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_V_1_fu_1462_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal rem_V_3_fu_1467_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln164_fu_1473_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln657_fu_1477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln159_fu_1459_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln15_fu_560_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln15_fu_560_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_318 : BOOLEAN;
    signal ap_condition_683 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hls_linear_combination_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component hls_linear_combination_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_linear_combination_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_linear_combination_urem_32ns_6ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_1_1_U1 : component hls_linear_combination_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln15_fu_560_p0,
        din1 => mul_ln15_fu_560_p1,
        dout => mul_ln15_fu_560_p2);

    mux_32_32_1_1_U2 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_14_0_load_1_reg_1858,
        din1 => accumulators_14_1_load_1_reg_1863,
        din2 => accumulators_14_2_load_1_reg_1868,
        din3 => tmp_14_fu_1267_p4,
        dout => tmp_14_fu_1267_p5);

    mux_32_32_1_1_U3 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_13_0_load_1_reg_1843,
        din1 => accumulators_13_1_load_1_reg_1848,
        din2 => accumulators_13_2_load_1_reg_1853,
        din3 => tmp_13_fu_1276_p4,
        dout => tmp_13_fu_1276_p5);

    mux_32_32_1_1_U4 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_12_0_load_1_reg_1828,
        din1 => accumulators_12_1_load_1_reg_1833,
        din2 => accumulators_12_2_load_1_reg_1838,
        din3 => tmp_12_fu_1285_p4,
        dout => tmp_12_fu_1285_p5);

    mux_42_32_1_1_U5 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_11_0_load_1_reg_1808,
        din1 => accumulators_11_1_load_1_reg_1813,
        din2 => accumulators_11_2_load_1_reg_1818,
        din3 => accumulators_11_3_load_1_reg_1823,
        din4 => tmp_11_fu_1294_p5,
        dout => tmp_11_fu_1294_p6);

    mux_42_32_1_1_U6 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_10_0_load_1_reg_1788,
        din1 => accumulators_10_1_load_1_reg_1793,
        din2 => accumulators_10_2_load_1_reg_1798,
        din3 => accumulators_10_3_load_1_reg_1803,
        din4 => tmp_10_fu_1304_p5,
        dout => tmp_10_fu_1304_p6);

    mux_42_32_1_1_U7 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_9_0_load_1_reg_1768,
        din1 => accumulators_9_1_load_1_reg_1773,
        din2 => accumulators_9_2_load_1_reg_1778,
        din3 => accumulators_9_3_load_1_reg_1783,
        din4 => tmp_s_fu_1314_p5,
        dout => tmp_s_fu_1314_p6);

    mux_42_32_1_1_U8 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_8_0_load_1_reg_1748,
        din1 => accumulators_8_1_load_1_reg_1753,
        din2 => accumulators_8_2_load_1_reg_1758,
        din3 => accumulators_8_3_load_1_reg_1763,
        din4 => tmp_9_fu_1324_p5,
        dout => tmp_9_fu_1324_p6);

    mux_42_32_1_1_U9 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_7_0_load_1_reg_1728,
        din1 => accumulators_7_1_load_1_reg_1733,
        din2 => accumulators_7_2_load_1_reg_1738,
        din3 => accumulators_7_3_load_1_reg_1743,
        din4 => tmp_8_fu_1334_p5,
        dout => tmp_8_fu_1334_p6);

    mux_42_32_1_1_U10 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_6_0_load_1_reg_1708,
        din1 => accumulators_6_1_load_1_reg_1713,
        din2 => accumulators_6_2_load_1_reg_1718,
        din3 => accumulators_6_3_load_1_reg_1723,
        din4 => tmp_7_fu_1344_p5,
        dout => tmp_7_fu_1344_p6);

    mux_42_32_1_1_U11 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_5_0_load_1_reg_1688,
        din1 => accumulators_5_1_load_1_reg_1693,
        din2 => accumulators_5_2_load_1_reg_1698,
        din3 => accumulators_5_3_load_1_reg_1703,
        din4 => tmp_6_fu_1354_p5,
        dout => tmp_6_fu_1354_p6);

    mux_42_32_1_1_U12 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_4_0_load_1_reg_1668,
        din1 => accumulators_4_1_load_1_reg_1673,
        din2 => accumulators_4_2_load_1_reg_1678,
        din3 => accumulators_4_3_load_1_reg_1683,
        din4 => tmp_5_fu_1364_p5,
        dout => tmp_5_fu_1364_p6);

    mux_42_32_1_1_U13 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_3_0_load_1_reg_1648,
        din1 => accumulators_3_1_load_1_reg_1653,
        din2 => accumulators_3_2_load_1_reg_1658,
        din3 => accumulators_3_3_load_1_reg_1663,
        din4 => tmp_4_fu_1374_p5,
        dout => tmp_4_fu_1374_p6);

    mux_42_32_1_1_U14 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_2_0_load_1_reg_1628,
        din1 => accumulators_2_1_load_1_reg_1633,
        din2 => accumulators_2_2_load_1_reg_1638,
        din3 => accumulators_2_3_load_1_reg_1643,
        din4 => tmp_3_fu_1384_p5,
        dout => tmp_3_fu_1384_p6);

    mux_42_32_1_1_U15 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_1_0_load_1_reg_1608,
        din1 => accumulators_1_1_load_1_reg_1613,
        din2 => accumulators_1_2_load_1_reg_1618,
        din3 => accumulators_1_3_load_1_reg_1623,
        din4 => tmp_2_fu_1394_p5,
        dout => tmp_2_fu_1394_p6);

    mux_42_32_1_1_U16 : component hls_linear_combination_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_0_0_load_1_reg_1588,
        din1 => accumulators_0_1_load_1_reg_1593,
        din2 => accumulators_0_2_load_1_reg_1598,
        din3 => accumulators_0_3_load_1_reg_1603,
        din4 => tmp_1_fu_1404_p5,
        dout => tmp_1_fu_1404_p6);

    mux_32_32_1_1_U17 : component hls_linear_combination_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => accumulators_15_0_load_1_reg_1573,
        din1 => accumulators_15_1_load_1_reg_1578,
        din2 => accumulators_15_2_load_1_reg_1583,
        din3 => tmp_fu_1414_p4,
        dout => tmp_fu_1414_p5);

    urem_32ns_6ns_32_36_1_U18 : component hls_linear_combination_urem_32ns_6ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp1_iter1_tmp_15_reg_263,
        din1 => grp_fu_1441_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1441_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp1_iter1_tmp_15_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_318)) then
                if (((trunc_ln25_fu_1253_p1 = ap_const_lv4_F) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_fu_1414_p5;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_E) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_14_fu_1267_p5;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_D) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_13_fu_1276_p5;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_C) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_12_fu_1285_p5;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_B) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_11_fu_1294_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_A) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_10_fu_1304_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_9) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_s_fu_1314_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_8) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_9_fu_1324_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_7) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_8_fu_1334_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_6) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_7_fu_1344_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_5) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_6_fu_1354_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_4) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_5_fu_1364_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_3) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_4_fu_1374_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_2) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_3_fu_1384_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_1) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_2_fu_1394_p6;
                elsif (((trunc_ln25_fu_1253_p1 = ap_const_lv4_0) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= tmp_1_fu_1404_p6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter1_tmp_15_reg_263 <= ap_phi_reg_pp1_iter0_tmp_15_reg_263;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp1_iter2_p_Val2_s_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_683)) then
                if (((empty_10_fu_1435_p2 = ap_const_lv1_1) and (icmp_ln19_reg_1878 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter2_p_Val2_s_reg_301 <= ap_const_lv6_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter2_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_301;
                end if;
            end if; 
        end if;
    end process;

    i_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_252 <= ap_const_lv6_0;
            elsif (((icmp_ln19_fu_1247_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_252 <= add_ln19_fu_1241_p2;
            end if; 
        end if;
    end process;

    i_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_241 <= ap_const_lv32_0;
            elsif (((icmp_ln12_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_241 <= add_ln12_fu_570_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                accumulators_0_0 <= add_ln15_fu_581_p2;
                accumulators_0_1 <= add_ln15_16_fu_757_p2;
                accumulators_0_2 <= add_ln15_32_fu_933_p2;
                accumulators_0_3 <= add_ln15_48_fu_1109_p2;
                accumulators_10_0 <= add_ln15_10_fu_691_p2;
                accumulators_10_1 <= add_ln15_26_fu_867_p2;
                accumulators_10_2 <= add_ln15_42_fu_1043_p2;
                accumulators_10_3 <= add_ln15_58_fu_1219_p2;
                accumulators_11_0 <= add_ln15_11_fu_702_p2;
                accumulators_11_1 <= add_ln15_27_fu_878_p2;
                accumulators_11_2 <= add_ln15_43_fu_1054_p2;
                accumulators_11_3 <= add_ln15_59_fu_1230_p2;
                accumulators_12_0 <= add_ln15_12_fu_713_p2;
                accumulators_12_1 <= add_ln15_28_fu_889_p2;
                accumulators_12_2 <= add_ln15_44_fu_1065_p2;
                accumulators_13_0 <= add_ln15_13_fu_724_p2;
                accumulators_13_1 <= add_ln15_29_fu_900_p2;
                accumulators_13_2 <= add_ln15_45_fu_1076_p2;
                accumulators_14_0 <= add_ln15_14_fu_735_p2;
                accumulators_14_1 <= add_ln15_30_fu_911_p2;
                accumulators_14_2 <= add_ln15_46_fu_1087_p2;
                accumulators_15_0 <= add_ln15_15_fu_746_p2;
                accumulators_15_1 <= add_ln15_31_fu_922_p2;
                accumulators_15_2 <= add_ln15_47_fu_1098_p2;
                accumulators_1_0 <= add_ln15_1_fu_592_p2;
                accumulators_1_1 <= add_ln15_17_fu_768_p2;
                accumulators_1_2 <= add_ln15_33_fu_944_p2;
                accumulators_1_3 <= add_ln15_49_fu_1120_p2;
                accumulators_2_0 <= add_ln15_2_fu_603_p2;
                accumulators_2_1 <= add_ln15_18_fu_779_p2;
                accumulators_2_2 <= add_ln15_34_fu_955_p2;
                accumulators_2_3 <= add_ln15_50_fu_1131_p2;
                accumulators_3_0 <= add_ln15_3_fu_614_p2;
                accumulators_3_1 <= add_ln15_19_fu_790_p2;
                accumulators_3_2 <= add_ln15_35_fu_966_p2;
                accumulators_3_3 <= add_ln15_51_fu_1142_p2;
                accumulators_4_0 <= add_ln15_4_fu_625_p2;
                accumulators_4_1 <= add_ln15_20_fu_801_p2;
                accumulators_4_2 <= add_ln15_36_fu_977_p2;
                accumulators_4_3 <= add_ln15_52_fu_1153_p2;
                accumulators_5_0 <= add_ln15_5_fu_636_p2;
                accumulators_5_1 <= add_ln15_21_fu_812_p2;
                accumulators_5_2 <= add_ln15_37_fu_988_p2;
                accumulators_5_3 <= add_ln15_53_fu_1164_p2;
                accumulators_6_0 <= add_ln15_6_fu_647_p2;
                accumulators_6_1 <= add_ln15_22_fu_823_p2;
                accumulators_6_2 <= add_ln15_38_fu_999_p2;
                accumulators_6_3 <= add_ln15_54_fu_1175_p2;
                accumulators_7_0 <= add_ln15_7_fu_658_p2;
                accumulators_7_1 <= add_ln15_23_fu_834_p2;
                accumulators_7_2 <= add_ln15_39_fu_1010_p2;
                accumulators_7_3 <= add_ln15_55_fu_1186_p2;
                accumulators_8_0 <= add_ln15_8_fu_669_p2;
                accumulators_8_1 <= add_ln15_24_fu_845_p2;
                accumulators_8_2 <= add_ln15_40_fu_1021_p2;
                accumulators_8_3 <= add_ln15_56_fu_1197_p2;
                accumulators_9_0 <= add_ln15_9_fu_680_p2;
                accumulators_9_1 <= add_ln15_25_fu_856_p2;
                accumulators_9_2 <= add_ln15_41_fu_1032_p2;
                accumulators_9_3 <= add_ln15_57_fu_1208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                accumulators_0_0_load_1_reg_1588 <= accumulators_0_0;
                accumulators_0_1_load_1_reg_1593 <= accumulators_0_1;
                accumulators_0_2_load_1_reg_1598 <= accumulators_0_2;
                accumulators_0_3_load_1_reg_1603 <= accumulators_0_3;
                accumulators_10_0_load_1_reg_1788 <= accumulators_10_0;
                accumulators_10_1_load_1_reg_1793 <= accumulators_10_1;
                accumulators_10_2_load_1_reg_1798 <= accumulators_10_2;
                accumulators_10_3_load_1_reg_1803 <= accumulators_10_3;
                accumulators_11_0_load_1_reg_1808 <= accumulators_11_0;
                accumulators_11_1_load_1_reg_1813 <= accumulators_11_1;
                accumulators_11_2_load_1_reg_1818 <= accumulators_11_2;
                accumulators_11_3_load_1_reg_1823 <= accumulators_11_3;
                accumulators_12_0_load_1_reg_1828 <= accumulators_12_0;
                accumulators_12_1_load_1_reg_1833 <= accumulators_12_1;
                accumulators_12_2_load_1_reg_1838 <= accumulators_12_2;
                accumulators_13_0_load_1_reg_1843 <= accumulators_13_0;
                accumulators_13_1_load_1_reg_1848 <= accumulators_13_1;
                accumulators_13_2_load_1_reg_1853 <= accumulators_13_2;
                accumulators_14_0_load_1_reg_1858 <= accumulators_14_0;
                accumulators_14_1_load_1_reg_1863 <= accumulators_14_1;
                accumulators_14_2_load_1_reg_1868 <= accumulators_14_2;
                accumulators_15_0_load_1_reg_1573 <= accumulators_15_0;
                accumulators_15_1_load_1_reg_1578 <= accumulators_15_1;
                accumulators_15_2_load_1_reg_1583 <= accumulators_15_2;
                accumulators_1_0_load_1_reg_1608 <= accumulators_1_0;
                accumulators_1_1_load_1_reg_1613 <= accumulators_1_1;
                accumulators_1_2_load_1_reg_1618 <= accumulators_1_2;
                accumulators_1_3_load_1_reg_1623 <= accumulators_1_3;
                accumulators_2_0_load_1_reg_1628 <= accumulators_2_0;
                accumulators_2_1_load_1_reg_1633 <= accumulators_2_1;
                accumulators_2_2_load_1_reg_1638 <= accumulators_2_2;
                accumulators_2_3_load_1_reg_1643 <= accumulators_2_3;
                accumulators_3_0_load_1_reg_1648 <= accumulators_3_0;
                accumulators_3_1_load_1_reg_1653 <= accumulators_3_1;
                accumulators_3_2_load_1_reg_1658 <= accumulators_3_2;
                accumulators_3_3_load_1_reg_1663 <= accumulators_3_3;
                accumulators_4_0_load_1_reg_1668 <= accumulators_4_0;
                accumulators_4_1_load_1_reg_1673 <= accumulators_4_1;
                accumulators_4_2_load_1_reg_1678 <= accumulators_4_2;
                accumulators_4_3_load_1_reg_1683 <= accumulators_4_3;
                accumulators_5_0_load_1_reg_1688 <= accumulators_5_0;
                accumulators_5_1_load_1_reg_1693 <= accumulators_5_1;
                accumulators_5_2_load_1_reg_1698 <= accumulators_5_2;
                accumulators_5_3_load_1_reg_1703 <= accumulators_5_3;
                accumulators_6_0_load_1_reg_1708 <= accumulators_6_0;
                accumulators_6_1_load_1_reg_1713 <= accumulators_6_1;
                accumulators_6_2_load_1_reg_1718 <= accumulators_6_2;
                accumulators_6_3_load_1_reg_1723 <= accumulators_6_3;
                accumulators_7_0_load_1_reg_1728 <= accumulators_7_0;
                accumulators_7_1_load_1_reg_1733 <= accumulators_7_1;
                accumulators_7_2_load_1_reg_1738 <= accumulators_7_2;
                accumulators_7_3_load_1_reg_1743 <= accumulators_7_3;
                accumulators_8_0_load_1_reg_1748 <= accumulators_8_0;
                accumulators_8_1_load_1_reg_1753 <= accumulators_8_1;
                accumulators_8_2_load_1_reg_1758 <= accumulators_8_2;
                accumulators_8_3_load_1_reg_1763 <= accumulators_8_3;
                accumulators_9_0_load_1_reg_1768 <= accumulators_9_0;
                accumulators_9_1_load_1_reg_1773 <= accumulators_9_1;
                accumulators_9_2_load_1_reg_1778 <= accumulators_9_2;
                accumulators_9_3_load_1_reg_1783 <= accumulators_9_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter10_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter9_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter11_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter10_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter12_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter11_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter13_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter12_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter14_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter13_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter15_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter14_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter16_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter15_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter17_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter16_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter18_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter17_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter19_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter18_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter1_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter20_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter19_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter21_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter20_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter22_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter21_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter23_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter22_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter24_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter23_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter25_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter24_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter26_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter25_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter27_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter26_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter28_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter27_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter29_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter28_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter30_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter29_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter31_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter30_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter31 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter32_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter31_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter33_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter32_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter33 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter34_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter33_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter35_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter34_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter35 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter36_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter35_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter36 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter37_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter36_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter3_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter2_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter4_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter3_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter5_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter4_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter6_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter5_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter7_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter6_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter8_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter7_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter9_p_Val2_s_reg_301 <= ap_phi_reg_pp1_iter8_p_Val2_s_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                empty_10_reg_1966 <= empty_10_fu_1435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                empty_10_reg_1966_pp1_iter10_reg <= empty_10_reg_1966_pp1_iter9_reg;
                empty_10_reg_1966_pp1_iter11_reg <= empty_10_reg_1966_pp1_iter10_reg;
                empty_10_reg_1966_pp1_iter12_reg <= empty_10_reg_1966_pp1_iter11_reg;
                empty_10_reg_1966_pp1_iter13_reg <= empty_10_reg_1966_pp1_iter12_reg;
                empty_10_reg_1966_pp1_iter14_reg <= empty_10_reg_1966_pp1_iter13_reg;
                empty_10_reg_1966_pp1_iter15_reg <= empty_10_reg_1966_pp1_iter14_reg;
                empty_10_reg_1966_pp1_iter16_reg <= empty_10_reg_1966_pp1_iter15_reg;
                empty_10_reg_1966_pp1_iter17_reg <= empty_10_reg_1966_pp1_iter16_reg;
                empty_10_reg_1966_pp1_iter18_reg <= empty_10_reg_1966_pp1_iter17_reg;
                empty_10_reg_1966_pp1_iter19_reg <= empty_10_reg_1966_pp1_iter18_reg;
                empty_10_reg_1966_pp1_iter20_reg <= empty_10_reg_1966_pp1_iter19_reg;
                empty_10_reg_1966_pp1_iter21_reg <= empty_10_reg_1966_pp1_iter20_reg;
                empty_10_reg_1966_pp1_iter22_reg <= empty_10_reg_1966_pp1_iter21_reg;
                empty_10_reg_1966_pp1_iter23_reg <= empty_10_reg_1966_pp1_iter22_reg;
                empty_10_reg_1966_pp1_iter24_reg <= empty_10_reg_1966_pp1_iter23_reg;
                empty_10_reg_1966_pp1_iter25_reg <= empty_10_reg_1966_pp1_iter24_reg;
                empty_10_reg_1966_pp1_iter26_reg <= empty_10_reg_1966_pp1_iter25_reg;
                empty_10_reg_1966_pp1_iter27_reg <= empty_10_reg_1966_pp1_iter26_reg;
                empty_10_reg_1966_pp1_iter28_reg <= empty_10_reg_1966_pp1_iter27_reg;
                empty_10_reg_1966_pp1_iter29_reg <= empty_10_reg_1966_pp1_iter28_reg;
                empty_10_reg_1966_pp1_iter2_reg <= empty_10_reg_1966;
                empty_10_reg_1966_pp1_iter30_reg <= empty_10_reg_1966_pp1_iter29_reg;
                empty_10_reg_1966_pp1_iter31_reg <= empty_10_reg_1966_pp1_iter30_reg;
                empty_10_reg_1966_pp1_iter32_reg <= empty_10_reg_1966_pp1_iter31_reg;
                empty_10_reg_1966_pp1_iter33_reg <= empty_10_reg_1966_pp1_iter32_reg;
                empty_10_reg_1966_pp1_iter34_reg <= empty_10_reg_1966_pp1_iter33_reg;
                empty_10_reg_1966_pp1_iter35_reg <= empty_10_reg_1966_pp1_iter34_reg;
                empty_10_reg_1966_pp1_iter36_reg <= empty_10_reg_1966_pp1_iter35_reg;
                empty_10_reg_1966_pp1_iter3_reg <= empty_10_reg_1966_pp1_iter2_reg;
                empty_10_reg_1966_pp1_iter4_reg <= empty_10_reg_1966_pp1_iter3_reg;
                empty_10_reg_1966_pp1_iter5_reg <= empty_10_reg_1966_pp1_iter4_reg;
                empty_10_reg_1966_pp1_iter6_reg <= empty_10_reg_1966_pp1_iter5_reg;
                empty_10_reg_1966_pp1_iter7_reg <= empty_10_reg_1966_pp1_iter6_reg;
                empty_10_reg_1966_pp1_iter8_reg <= empty_10_reg_1966_pp1_iter7_reg;
                empty_10_reg_1966_pp1_iter9_reg <= empty_10_reg_1966_pp1_iter8_reg;
                icmp_ln19_reg_1878_pp1_iter10_reg <= icmp_ln19_reg_1878_pp1_iter9_reg;
                icmp_ln19_reg_1878_pp1_iter11_reg <= icmp_ln19_reg_1878_pp1_iter10_reg;
                icmp_ln19_reg_1878_pp1_iter12_reg <= icmp_ln19_reg_1878_pp1_iter11_reg;
                icmp_ln19_reg_1878_pp1_iter13_reg <= icmp_ln19_reg_1878_pp1_iter12_reg;
                icmp_ln19_reg_1878_pp1_iter14_reg <= icmp_ln19_reg_1878_pp1_iter13_reg;
                icmp_ln19_reg_1878_pp1_iter15_reg <= icmp_ln19_reg_1878_pp1_iter14_reg;
                icmp_ln19_reg_1878_pp1_iter16_reg <= icmp_ln19_reg_1878_pp1_iter15_reg;
                icmp_ln19_reg_1878_pp1_iter17_reg <= icmp_ln19_reg_1878_pp1_iter16_reg;
                icmp_ln19_reg_1878_pp1_iter18_reg <= icmp_ln19_reg_1878_pp1_iter17_reg;
                icmp_ln19_reg_1878_pp1_iter19_reg <= icmp_ln19_reg_1878_pp1_iter18_reg;
                icmp_ln19_reg_1878_pp1_iter20_reg <= icmp_ln19_reg_1878_pp1_iter19_reg;
                icmp_ln19_reg_1878_pp1_iter21_reg <= icmp_ln19_reg_1878_pp1_iter20_reg;
                icmp_ln19_reg_1878_pp1_iter22_reg <= icmp_ln19_reg_1878_pp1_iter21_reg;
                icmp_ln19_reg_1878_pp1_iter23_reg <= icmp_ln19_reg_1878_pp1_iter22_reg;
                icmp_ln19_reg_1878_pp1_iter24_reg <= icmp_ln19_reg_1878_pp1_iter23_reg;
                icmp_ln19_reg_1878_pp1_iter25_reg <= icmp_ln19_reg_1878_pp1_iter24_reg;
                icmp_ln19_reg_1878_pp1_iter26_reg <= icmp_ln19_reg_1878_pp1_iter25_reg;
                icmp_ln19_reg_1878_pp1_iter27_reg <= icmp_ln19_reg_1878_pp1_iter26_reg;
                icmp_ln19_reg_1878_pp1_iter28_reg <= icmp_ln19_reg_1878_pp1_iter27_reg;
                icmp_ln19_reg_1878_pp1_iter29_reg <= icmp_ln19_reg_1878_pp1_iter28_reg;
                icmp_ln19_reg_1878_pp1_iter2_reg <= icmp_ln19_reg_1878_pp1_iter1_reg;
                icmp_ln19_reg_1878_pp1_iter30_reg <= icmp_ln19_reg_1878_pp1_iter29_reg;
                icmp_ln19_reg_1878_pp1_iter31_reg <= icmp_ln19_reg_1878_pp1_iter30_reg;
                icmp_ln19_reg_1878_pp1_iter32_reg <= icmp_ln19_reg_1878_pp1_iter31_reg;
                icmp_ln19_reg_1878_pp1_iter33_reg <= icmp_ln19_reg_1878_pp1_iter32_reg;
                icmp_ln19_reg_1878_pp1_iter34_reg <= icmp_ln19_reg_1878_pp1_iter33_reg;
                icmp_ln19_reg_1878_pp1_iter35_reg <= icmp_ln19_reg_1878_pp1_iter34_reg;
                icmp_ln19_reg_1878_pp1_iter36_reg <= icmp_ln19_reg_1878_pp1_iter35_reg;
                icmp_ln19_reg_1878_pp1_iter3_reg <= icmp_ln19_reg_1878_pp1_iter2_reg;
                icmp_ln19_reg_1878_pp1_iter4_reg <= icmp_ln19_reg_1878_pp1_iter3_reg;
                icmp_ln19_reg_1878_pp1_iter5_reg <= icmp_ln19_reg_1878_pp1_iter4_reg;
                icmp_ln19_reg_1878_pp1_iter6_reg <= icmp_ln19_reg_1878_pp1_iter5_reg;
                icmp_ln19_reg_1878_pp1_iter7_reg <= icmp_ln19_reg_1878_pp1_iter6_reg;
                icmp_ln19_reg_1878_pp1_iter8_reg <= icmp_ln19_reg_1878_pp1_iter7_reg;
                icmp_ln19_reg_1878_pp1_iter9_reg <= icmp_ln19_reg_1878_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln19_reg_1878 <= icmp_ln19_fu_1247_p2;
                icmp_ln19_reg_1878_pp1_iter1_reg <= icmp_ln19_reg_1878;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_10_reg_1966_pp1_iter35_reg = ap_const_lv1_0) and (icmp_ln19_reg_1878_pp1_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                r_sig_V_reg_1977 <= grp_fu_1441_p2(4 downto 4);
                trunc_ln167_reg_1970 <= trunc_ln167_fu_1447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln12_reg_1501(15 downto 0) <= zext_ln12_fu_566_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_1501(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln19_fu_1247_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, icmp_ln12_fu_576_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter37 = ap_const_logic_1) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter37 = ap_const_logic_1) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln19_fu_1247_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln12_fu_570_p2 <= std_logic_vector(unsigned(i_reg_241) + unsigned(ap_const_lv32_1));
    add_ln15_10_fu_691_p2 <= std_logic_vector(unsigned(accumulators_10_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_11_fu_702_p2 <= std_logic_vector(unsigned(accumulators_11_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_12_fu_713_p2 <= std_logic_vector(unsigned(accumulators_12_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_13_fu_724_p2 <= std_logic_vector(unsigned(accumulators_13_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_14_fu_735_p2 <= std_logic_vector(unsigned(accumulators_14_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_15_fu_746_p2 <= std_logic_vector(unsigned(accumulators_15_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_16_fu_757_p2 <= std_logic_vector(unsigned(accumulators_0_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_17_fu_768_p2 <= std_logic_vector(unsigned(accumulators_1_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_18_fu_779_p2 <= std_logic_vector(unsigned(accumulators_2_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_19_fu_790_p2 <= std_logic_vector(unsigned(accumulators_3_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_1_fu_592_p2 <= std_logic_vector(unsigned(accumulators_1_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_20_fu_801_p2 <= std_logic_vector(unsigned(accumulators_4_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_21_fu_812_p2 <= std_logic_vector(unsigned(accumulators_5_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_22_fu_823_p2 <= std_logic_vector(unsigned(accumulators_6_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_23_fu_834_p2 <= std_logic_vector(unsigned(accumulators_7_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_24_fu_845_p2 <= std_logic_vector(unsigned(accumulators_8_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_25_fu_856_p2 <= std_logic_vector(unsigned(accumulators_9_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_26_fu_867_p2 <= std_logic_vector(unsigned(accumulators_10_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_27_fu_878_p2 <= std_logic_vector(unsigned(accumulators_11_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_28_fu_889_p2 <= std_logic_vector(unsigned(accumulators_12_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_29_fu_900_p2 <= std_logic_vector(unsigned(accumulators_13_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_2_fu_603_p2 <= std_logic_vector(unsigned(accumulators_2_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_30_fu_911_p2 <= std_logic_vector(unsigned(accumulators_14_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_31_fu_922_p2 <= std_logic_vector(unsigned(accumulators_15_1) + unsigned(zext_ln12_reg_1501));
    add_ln15_32_fu_933_p2 <= std_logic_vector(unsigned(accumulators_0_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_33_fu_944_p2 <= std_logic_vector(unsigned(accumulators_1_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_34_fu_955_p2 <= std_logic_vector(unsigned(accumulators_2_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_35_fu_966_p2 <= std_logic_vector(unsigned(accumulators_3_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_36_fu_977_p2 <= std_logic_vector(unsigned(accumulators_4_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_37_fu_988_p2 <= std_logic_vector(unsigned(accumulators_5_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_38_fu_999_p2 <= std_logic_vector(unsigned(accumulators_6_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_39_fu_1010_p2 <= std_logic_vector(unsigned(accumulators_7_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_3_fu_614_p2 <= std_logic_vector(unsigned(accumulators_3_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_40_fu_1021_p2 <= std_logic_vector(unsigned(accumulators_8_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_41_fu_1032_p2 <= std_logic_vector(unsigned(accumulators_9_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_42_fu_1043_p2 <= std_logic_vector(unsigned(accumulators_10_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_43_fu_1054_p2 <= std_logic_vector(unsigned(accumulators_11_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_44_fu_1065_p2 <= std_logic_vector(unsigned(accumulators_12_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_45_fu_1076_p2 <= std_logic_vector(unsigned(accumulators_13_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_46_fu_1087_p2 <= std_logic_vector(unsigned(accumulators_14_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_47_fu_1098_p2 <= std_logic_vector(unsigned(accumulators_15_2) + unsigned(zext_ln12_reg_1501));
    add_ln15_48_fu_1109_p2 <= std_logic_vector(unsigned(accumulators_0_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_49_fu_1120_p2 <= std_logic_vector(unsigned(accumulators_1_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_4_fu_625_p2 <= std_logic_vector(unsigned(accumulators_4_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_50_fu_1131_p2 <= std_logic_vector(unsigned(accumulators_2_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_51_fu_1142_p2 <= std_logic_vector(unsigned(accumulators_3_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_52_fu_1153_p2 <= std_logic_vector(unsigned(accumulators_4_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_53_fu_1164_p2 <= std_logic_vector(unsigned(accumulators_5_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_54_fu_1175_p2 <= std_logic_vector(unsigned(accumulators_6_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_55_fu_1186_p2 <= std_logic_vector(unsigned(accumulators_7_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_56_fu_1197_p2 <= std_logic_vector(unsigned(accumulators_8_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_57_fu_1208_p2 <= std_logic_vector(unsigned(accumulators_9_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_58_fu_1219_p2 <= std_logic_vector(unsigned(accumulators_10_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_59_fu_1230_p2 <= std_logic_vector(unsigned(accumulators_11_3) + unsigned(zext_ln12_reg_1501));
    add_ln15_5_fu_636_p2 <= std_logic_vector(unsigned(accumulators_5_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_6_fu_647_p2 <= std_logic_vector(unsigned(accumulators_6_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_7_fu_658_p2 <= std_logic_vector(unsigned(accumulators_7_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_8_fu_669_p2 <= std_logic_vector(unsigned(accumulators_8_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_9_fu_680_p2 <= std_logic_vector(unsigned(accumulators_9_0) + unsigned(zext_ln12_reg_1501));
    add_ln15_fu_581_p2 <= std_logic_vector(unsigned(accumulators_0_0) + unsigned(zext_ln12_reg_1501));
    add_ln19_fu_1241_p2 <= std_logic_vector(unsigned(i_1_reg_252) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state42 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_318_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
                ap_condition_318 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001));
    end process;


    ap_condition_683_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
                ap_condition_683 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001));
    end process;


    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln19_fu_1247_p2)
    begin
        if ((icmp_ln19_fu_1247_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37)
    begin
        if (((ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_305_p4_assign_proc : process(icmp_ln19_reg_1878_pp1_iter36_reg, empty_10_reg_1966_pp1_iter36_reg, select_ln175_fu_1483_p3, ap_phi_reg_pp1_iter37_p_Val2_s_reg_301)
    begin
        if (((empty_10_reg_1966_pp1_iter36_reg = ap_const_lv1_0) and (icmp_ln19_reg_1878_pp1_iter36_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_Val2_s_phi_fu_305_p4 <= select_ln175_fu_1483_p3;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_305_p4 <= ap_phi_reg_pp1_iter37_p_Val2_s_reg_301;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_p_Val2_s_reg_301 <= "XXXXXX";
    ap_phi_reg_pp1_iter0_tmp_15_reg_263 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_1435_p2 <= (empty_9_fu_1429_p2 or empty_8_fu_1423_p2);
    empty_8_fu_1423_p2 <= "1" when (ap_phi_reg_pp1_iter1_tmp_15_reg_263 = ap_const_lv32_1F) else "0";
    empty_9_fu_1429_p2 <= "1" when (ap_phi_reg_pp1_iter1_tmp_15_reg_263 = ap_const_lv32_0) else "0";
    grp_fu_1441_p1 <= ap_const_lv32_1F(6 - 1 downto 0);
    icmp_ln12_fu_576_p2 <= "1" when (i_reg_241 = len) else "0";
    icmp_ln19_fu_1247_p2 <= "1" when (i_1_reg_252 = ap_const_lv6_3C) else "0";
    mul_ln15_fu_560_p0 <= mul_ln15_fu_560_p00(8 - 1 downto 0);
    mul_ln15_fu_560_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vecs),16));
    mul_ln15_fu_560_p1 <= mul_ln15_fu_560_p10(8 - 1 downto 0);
    mul_ln15_fu_560_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coeffs),16));
        out_r <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_Val2_s_phi_fu_305_p4),8));


    out_r_ap_vld_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln19_reg_1878_pp1_iter36_reg, ap_enable_reg_pp1_iter37)
    begin
        if (((ap_enable_reg_pp1_iter37 = ap_const_logic_1) and (icmp_ln19_reg_1878_pp1_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rem_V_1_fu_1462_p2 <= (trunc_ln167_reg_1970 xor ap_const_lv5_1F);
    rem_V_3_fu_1467_p3 <= 
        rem_V_1_fu_1462_p2 when (r_sig_V_reg_1977(0) = '1') else 
        trunc_ln167_reg_1970;
    select_ln175_fu_1483_p3 <= 
        sub_ln657_fu_1477_p2 when (r_sig_V_reg_1977(0) = '1') else 
        zext_ln159_fu_1459_p1;
    sub_ln657_fu_1477_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln164_fu_1473_p1));
    tmp_10_fu_1304_p5 <= i_1_reg_252(5 downto 4);
    tmp_11_fu_1294_p5 <= i_1_reg_252(5 downto 4);
    tmp_12_fu_1285_p4 <= i_1_reg_252(5 downto 4);
    tmp_13_fu_1276_p4 <= i_1_reg_252(5 downto 4);
    tmp_14_fu_1267_p4 <= i_1_reg_252(5 downto 4);
    tmp_1_fu_1404_p5 <= i_1_reg_252(5 downto 4);
    tmp_2_fu_1394_p5 <= i_1_reg_252(5 downto 4);
    tmp_3_fu_1384_p5 <= i_1_reg_252(5 downto 4);
    tmp_4_fu_1374_p5 <= i_1_reg_252(5 downto 4);
    tmp_5_fu_1364_p5 <= i_1_reg_252(5 downto 4);
    tmp_6_fu_1354_p5 <= i_1_reg_252(5 downto 4);
    tmp_7_fu_1344_p5 <= i_1_reg_252(5 downto 4);
    tmp_8_fu_1334_p5 <= i_1_reg_252(5 downto 4);
    tmp_9_fu_1324_p5 <= i_1_reg_252(5 downto 4);
    tmp_fu_1414_p4 <= i_1_reg_252(5 downto 4);
    tmp_s_fu_1314_p5 <= i_1_reg_252(5 downto 4);
    trunc_ln167_fu_1447_p1 <= grp_fu_1441_p2(5 - 1 downto 0);
    trunc_ln25_fu_1253_p1 <= i_1_reg_252(4 - 1 downto 0);
    zext_ln12_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_fu_560_p2),32));
    zext_ln159_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_reg_1970),6));
    zext_ln164_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rem_V_3_fu_1467_p3),6));
end behav;
