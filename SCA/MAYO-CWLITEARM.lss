
MAYO-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026bc  080026bc  00020ec0  2**0
                  CONTENTS
  4 .ARM          00000000  080026bc  080026bc  00020ec0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026bc  080026bc  00020ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ec0  20000000  080026c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000ec0  08003584  00020ec0  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000f54  08003584  00020f54  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020ec0  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00020eea  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003595  00000000  00000000  00020f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000862  00000000  00000000  000244b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000d48  00000000  00000000  00024d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000198  00000000  00000000  00025a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000128  00000000  00000000  00025bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019ee  00000000  00000000  00025d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000013fe  00000000  00000000  0002770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000560  00000000  00000000  00028b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00029068  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  000291ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000ec0 	.word	0x20000ec0
 800019c:	20000ec0 	.word	0x20000ec0
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000ec0 	.word	0x20000ec0
 80001c0:	20000ec0 	.word	0x20000ec0
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000ec0 	.word	0x20000ec0
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08002688 	.word	0x08002688

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000ec4 	.word	0x20000ec4
 800020c:	08002688 	.word	0x08002688

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000222:	3401      	adds	r4, #1
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f002 fa2a 	bl	8002688 <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	f855 3b04 	ldr.w	r3, [r5], #4
 800023e:	3401      	adds	r4, #1
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	080026bc 	.word	0x080026bc
 800024c:	080026bc 	.word	0x080026bc
 8000250:	080026c0 	.word	0x080026c0
 8000254:	080026bc 	.word	0x080026bc

08000258 <memset>:
 8000258:	0783      	lsls	r3, r0, #30
 800025a:	b530      	push	{r4, r5, lr}
 800025c:	d048      	beq.n	80002f0 <memset+0x98>
 800025e:	1e54      	subs	r4, r2, #1
 8000260:	2a00      	cmp	r2, #0
 8000262:	d03f      	beq.n	80002e4 <memset+0x8c>
 8000264:	b2ca      	uxtb	r2, r1
 8000266:	4603      	mov	r3, r0
 8000268:	e001      	b.n	800026e <memset+0x16>
 800026a:	3c01      	subs	r4, #1
 800026c:	d33a      	bcc.n	80002e4 <memset+0x8c>
 800026e:	f803 2b01 	strb.w	r2, [r3], #1
 8000272:	079d      	lsls	r5, r3, #30
 8000274:	d1f9      	bne.n	800026a <memset+0x12>
 8000276:	2c03      	cmp	r4, #3
 8000278:	d92d      	bls.n	80002d6 <memset+0x7e>
 800027a:	b2cd      	uxtb	r5, r1
 800027c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000280:	2c0f      	cmp	r4, #15
 8000282:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000286:	d936      	bls.n	80002f6 <memset+0x9e>
 8000288:	f1a4 0210 	sub.w	r2, r4, #16
 800028c:	f022 0c0f 	bic.w	ip, r2, #15
 8000290:	f103 0e20 	add.w	lr, r3, #32
 8000294:	44e6      	add	lr, ip
 8000296:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800029a:	f103 0210 	add.w	r2, r3, #16
 800029e:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002a2:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002a6:	3210      	adds	r2, #16
 80002a8:	4572      	cmp	r2, lr
 80002aa:	d1f8      	bne.n	800029e <memset+0x46>
 80002ac:	f10c 0201 	add.w	r2, ip, #1
 80002b0:	f014 0f0c 	tst.w	r4, #12
 80002b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002b8:	f004 0c0f 	and.w	ip, r4, #15
 80002bc:	d013      	beq.n	80002e6 <memset+0x8e>
 80002be:	f1ac 0304 	sub.w	r3, ip, #4
 80002c2:	f023 0303 	bic.w	r3, r3, #3
 80002c6:	3304      	adds	r3, #4
 80002c8:	4413      	add	r3, r2
 80002ca:	f842 5b04 	str.w	r5, [r2], #4
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d1fb      	bne.n	80002ca <memset+0x72>
 80002d2:	f00c 0403 	and.w	r4, ip, #3
 80002d6:	b12c      	cbz	r4, 80002e4 <memset+0x8c>
 80002d8:	b2ca      	uxtb	r2, r1
 80002da:	441c      	add	r4, r3
 80002dc:	f803 2b01 	strb.w	r2, [r3], #1
 80002e0:	429c      	cmp	r4, r3
 80002e2:	d1fb      	bne.n	80002dc <memset+0x84>
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	4664      	mov	r4, ip
 80002e8:	4613      	mov	r3, r2
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	d1f4      	bne.n	80002d8 <memset+0x80>
 80002ee:	e7f9      	b.n	80002e4 <memset+0x8c>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4614      	mov	r4, r2
 80002f4:	e7bf      	b.n	8000276 <memset+0x1e>
 80002f6:	461a      	mov	r2, r3
 80002f8:	46a4      	mov	ip, r4
 80002fa:	e7e0      	b.n	80002be <memset+0x66>

080002fc <putString>:

extern uint32_t trigger;


void putString(const unsigned char *string, const unsigned int length)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
    for(int i=0; i<length; i++)
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e009      	b.n	8000320 <putString+0x24>
         putch(string[i]);
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fa0b 	bl	8000730 <putch>
    for(int i=0; i<length; i++)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3301      	adds	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	683a      	ldr	r2, [r7, #0]
 8000324:	429a      	cmp	r2, r3
 8000326:	d8f1      	bhi.n	800030c <putString+0x10>
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	0000      	movs	r0, r0

08000334 <_linear_combination>:
	{
		out[i] = (((uint16_t) v1[i]) + ((uint16_t) v2[i])) % PRIME;
	}
}

void _linear_combination(const unsigned char* vecs, const unsigned char* coeffs, int len, unsigned char *out){
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b0c5      	sub	sp, #276	; 0x114
 8000338:	af00      	add	r7, sp, #0
 800033a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800033e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8000342:	6020      	str	r0, [r4, #0]
 8000344:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000348:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800034c:	6001      	str	r1, [r0, #0]
 800034e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000352:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000356:	600a      	str	r2, [r1, #0]
 8000358:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800035c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000360:	6013      	str	r3, [r2, #0]
	uint32_t accumulators[M] = {0};
 8000362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000366:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800036a:	4618      	mov	r0, r3
 800036c:	23f0      	movs	r3, #240	; 0xf0
 800036e:	461a      	mov	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f7ff ff71 	bl	8000258 <memset>


    
    for (int i = 0; i < len; ++i)
 8000376:	2300      	movs	r3, #0
 8000378:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800037c:	e054      	b.n	8000428 <_linear_combination+0xf4>
	{ 
        char c = 'A';
 800037e:	2341      	movs	r3, #65	; 0x41
 8000380:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        // stall until ready to trace 
        while ((c != 'g'))
 8000384:	e004      	b.n	8000390 <_linear_combination+0x5c>
        {
            c = getch();
 8000386:	f000 f9b5 	bl	80006f4 <getch>
 800038a:	4603      	mov	r3, r0
 800038c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        while ((c != 'g'))
 8000390:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000394:	2b67      	cmp	r3, #103	; 0x67
 8000396:	d1f6      	bne.n	8000386 <_linear_combination+0x52>
        }
        trigger_high();
 8000398:	f000 f996 	bl	80006c8 <trigger_high>

		for(int j=0; j< M; j++){
 800039c:	2300      	movs	r3, #0
 800039e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80003a2:	e033      	b.n	800040c <_linear_combination+0xd8>
			accumulators[j] += ((uint32_t) vecs[i*M + j]) * ((uint32_t) coeffs[i]);
 80003a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80003ac:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80003b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003b4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80003b8:	4613      	mov	r3, r2
 80003ba:	011b      	lsls	r3, r3, #4
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	461a      	mov	r2, r3
 80003c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80003c6:	4413      	add	r3, r2
 80003c8:	461a      	mov	r2, r3
 80003ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4413      	add	r3, r2
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80003de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e6:	6812      	ldr	r2, [r2, #0]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	fb00 f303 	mul.w	r3, r0, r3
 80003f0:	4419      	add	r1, r3
 80003f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80003fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80003fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j=0; j< M; j++){
 8000402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000406:	3301      	adds	r3, #1
 8000408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800040c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000410:	2b3b      	cmp	r3, #59	; 0x3b
 8000412:	ddc7      	ble.n	80003a4 <_linear_combination+0x70>
		} 

        
        trigger_low();
 8000414:	f000 f963 	bl	80006de <trigger_low>
        putch('r');
 8000418:	2072      	movs	r0, #114	; 0x72
 800041a:	f000 f989 	bl	8000730 <putch>
    for (int i = 0; i < len; ++i)
 800041e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000422:	3301      	adds	r3, #1
 8000424:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000430:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	429a      	cmp	r2, r3
 8000438:	dba1      	blt.n	800037e <_linear_combination+0x4a>
        
	}



	for (int i = 0; i < M; ++i)
 800043a:	2300      	movs	r3, #0
 800043c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000440:	e021      	b.n	8000486 <_linear_combination+0x152>
	{
		out[i] = (unsigned char) (accumulators[i] % PRIME);
 8000442:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000446:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800044a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800044e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <_linear_combination+0x168>)
 8000454:	fba3 1302 	umull	r1, r3, r3, r2
 8000458:	1ad1      	subs	r1, r2, r3
 800045a:	0849      	lsrs	r1, r1, #1
 800045c:	440b      	add	r3, r1
 800045e:	0919      	lsrs	r1, r3, #4
 8000460:	460b      	mov	r3, r1
 8000462:	015b      	lsls	r3, r3, #5
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	1ad1      	subs	r1, r2, r3
 8000468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800046c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000470:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	4413      	add	r3, r2
 8000478:	b2ca      	uxtb	r2, r1
 800047a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < M; ++i)
 800047c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000480:	3301      	adds	r3, #1
 8000482:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000486:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800048a:	2b3b      	cmp	r3, #59	; 0x3b
 800048c:	ddd9      	ble.n	8000442 <_linear_combination+0x10e>
	}


}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000496:	46bd      	mov	sp, r7
 8000498:	bd90      	pop	{r4, r7, pc}
 800049a:	bf00      	nop
 800049c:	08421085 	.word	0x08421085

080004a0 <mayo_trace>:
// uint8_t uov_trace(uint8_t *in)
// {

// uint8_t uov_trace(uint8_t* pw, uint8_t len)
uint8_t mayo_trace()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b092      	sub	sp, #72	; 0x48
 80004a4:	af00      	add	r7, sp, #0
    // C = 10;
    unsigned char out[M] = {0};
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	2238      	movs	r2, #56	; 0x38
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fed0 	bl	8000258 <memset>


    // define P1 in .h file, hardcoded
    const unsigned char *ptr_P1;
    ptr_P1 = P1;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <mayo_trace+0x3c>)
 80004ba:	647b      	str	r3, [r7, #68]	; 0x44


    const unsigned char *ptr_oilspace;
    ptr_oilspace = oilspace;
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <mayo_trace+0x40>)
 80004be:	643b      	str	r3, [r7, #64]	; 0x40


    //for (_ in range(10))
    //{
    _linear_combination(P1, oilspace, N-O, out);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2238      	movs	r2, #56	; 0x38
 80004c4:	4906      	ldr	r1, [pc, #24]	; (80004e0 <mayo_trace+0x40>)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <mayo_trace+0x3c>)
 80004c8:	f7ff ff34 	bl	8000334 <_linear_combination>
    //}
    
    
    // send 'e' for end of trace
    putch('e');
 80004cc:	2065      	movs	r0, #101	; 0x65
 80004ce:	f000 f92f 	bl	8000730 <putch>
    
    //putString(y, _O1_BYTE);

    return 1;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3748      	adds	r7, #72	; 0x48
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000e88 	.word	0x20000e88

080004e4 <main>:

int main(void)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
    platform_init();
 80004ea:	f000 f81f 	bl	800052c <platform_init>
    init_uart();
 80004ee:	f000 f86f 	bl	80005d0 <init_uart>
    trigger_setup();
 80004f2:	f000 f8bd 	bl	8000670 <trigger_setup>

    unsigned char Hello[] = "Hello from the other side!";
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x44>)
 80004f8:	1d3c      	adds	r4, r7, #4
 80004fa:	461d      	mov	r5, r3
 80004fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000504:	c403      	stmia	r4!, {r0, r1}
 8000506:	8022      	strh	r2, [r4, #0]
 8000508:	3402      	adds	r4, #2
 800050a:	0c13      	lsrs	r3, r2, #16
 800050c:	7023      	strb	r3, [r4, #0]
    putString(Hello, 26);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	211a      	movs	r1, #26
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fef2 	bl	80002fc <putString>

    // simpleserial_init();

    //for n in range(256)
    mayo_trace();
 8000518:	f7ff ffc2 	bl	80004a0 <mayo_trace>
 800051c:	2300      	movs	r3, #0


    // while (1)
    //     simpleserial_get();
}
 800051e:	4618      	mov	r0, r3
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bdb0      	pop	{r4, r5, r7, pc}
 8000526:	bf00      	nop
 8000528:	080026a0 	.word	0x080026a0

0800052c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000532:	2303      	movs	r3, #3
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000536:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800053c:	2300      	movs	r3, #0
 800053e:	63fb      	str	r3, [r7, #60]	; 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f925 	bl	8000798 <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800054e:	230f      	movs	r3, #15
 8000550:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000552:	2301      	movs	r3, #1
 8000554:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
     uint32_t flash_latency = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	657b      	str	r3, [r7, #84]	; 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800056c:	4618      	mov	r0, r3
 800056e:	f001 f929 	bl	80017c4 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <platform_init+0x9c>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <platform_init+0x9c>)
 8000578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <platform_init+0x9c>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 800058a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800058e:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000598:	2303      	movs	r3, #3
 800059a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <platform_init+0xa0>)
 80005a2:	f001 fa99 	bl	8001ad8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <platform_init+0xa0>)
 80005ae:	f001 fc11 	bl	8001dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <platform_init+0xa0>)
 80005ba:	f001 fc0b 	bl	8001dd4 <HAL_GPIO_WritePin>
#endif
}
 80005be:	bf00      	nop
 80005c0:	3758      	adds	r7, #88	; 0x58
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000800 	.word	0x48000800

080005d0 <init_uart>:

void init_uart(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80005d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005da:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 80005e8:	2307      	movs	r3, #7
 80005ea:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <init_uart+0x94>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <init_uart+0x94>)
 80005f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <init_uart+0x94>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f001 fa63 	bl	8001ad8 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <init_uart+0x98>)
 8000614:	4a15      	ldr	r2, [pc, #84]	; (800066c <init_uart+0x9c>)
 8000616:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <init_uart+0x98>)
 800061a:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800061e:	605a      	str	r2, [r3, #4]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <init_uart+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <init_uart+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <init_uart+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <init_uart+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <init_uart+0x98>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <init_uart+0x94>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <init_uart+0x94>)
 8000644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <init_uart+0x94>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <init_uart+0x98>)
 8000658:	f001 fe1d 	bl	8002296 <HAL_UART_Init>
}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	20000edc 	.word	0x20000edc
 800066c:	40013800 	.word	0x40013800

08000670 <trigger_setup>:

void trigger_setup(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <trigger_setup+0x54>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <trigger_setup+0x54>)
 800067c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <trigger_setup+0x54>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f001 fa16 	bl	8001ad8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f001 fb8d 	bl	8001dd4 <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <trigger_high>:

void trigger_high(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f001 fb7d 	bl	8001dd4 <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <trigger_low>:

void trigger_low(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f001 fb72 	bl	8001dd4 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <getch>:

char getch(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80006fa:	e005      	b.n	8000708 <getch+0x14>
    USART1->ICR |= (1 << 3);
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <getch+0x34>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <getch+0x34>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000708:	1df9      	adds	r1, r7, #7
 800070a:	f241 3388 	movw	r3, #5000	; 0x1388
 800070e:	2201      	movs	r2, #1
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <getch+0x38>)
 8000712:	f001 fede 	bl	80024d2 <HAL_UART_Receive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1ef      	bne.n	80006fc <getch+0x8>
  //putch(d);
  return d;
 800071c:	79fb      	ldrb	r3, [r7, #7]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40013800 	.word	0x40013800
 800072c:	20000edc 	.word	0x20000edc

08000730 <putch>:

void putch(char c)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800073e:	f107 010f 	add.w	r1, r7, #15
 8000742:	f241 3388 	movw	r3, #5000	; 0x1388
 8000746:	2201      	movs	r2, #1
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <putch+0x28>)
 800074a:	f001 fe35 	bl	80023b8 <HAL_UART_Transmit>
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000edc 	.word	0x20000edc

0800075c <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <HAL_GetTick+0x18>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	4903      	ldr	r1, [pc, #12]	; (8000774 <HAL_GetTick+0x18>)
 8000768:	600a      	str	r2, [r1, #0]
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000f4c 	.word	0x20000f4c

08000778 <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	return F_CPU;
 800077c:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	return F_CPU;
 800078c:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800079e:	af00      	add	r7, sp, #0
 80007a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80007a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80007a8:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80007b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f000 8180 	beq.w	8000ac6 <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007c6:	4bbe      	ldr	r3, [pc, #760]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f003 030c 	and.w	r3, r3, #12
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d00c      	beq.n	80007ec <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d2:	4bbb      	ldr	r3, [pc, #748]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f003 030c 	and.w	r3, r3, #12
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d15d      	bne.n	800089a <HAL_RCC_OscConfig+0x102>
 80007de:	4bb8      	ldr	r3, [pc, #736]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ea:	d156      	bne.n	800089a <HAL_RCC_OscConfig+0x102>
 80007ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80007f8:	fa93 f3a3 	rbit	r3, r3
 80007fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000800:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000804:	fab3 f383 	clz	r3, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	095b      	lsrs	r3, r3, #5
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b01      	cmp	r3, #1
 8000816:	d102      	bne.n	800081e <HAL_RCC_OscConfig+0x86>
 8000818:	4ba9      	ldr	r3, [pc, #676]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	e015      	b.n	800084a <HAL_RCC_OscConfig+0xb2>
 800081e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000822:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000826:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800082a:	fa93 f3a3 	rbit	r3, r3
 800082e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000836:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800083a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800083e:	fa93 f3a3 	rbit	r3, r3
 8000842:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000846:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800084e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000852:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000856:	fa92 f2a2 	rbit	r2, r2
 800085a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800085e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000862:	fab2 f282 	clz	r2, r2
 8000866:	b252      	sxtb	r2, r2
 8000868:	f042 0220 	orr.w	r2, r2, #32
 800086c:	b252      	sxtb	r2, r2
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	f002 021f 	and.w	r2, r2, #31
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	f000 8121 	beq.w	8000ac4 <HAL_RCC_OscConfig+0x32c>
 8000882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8118 	bne.w	8000ac4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	f000 bf8c 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800089e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008aa:	d106      	bne.n	80008ba <HAL_RCC_OscConfig+0x122>
 80008ac:	4b84      	ldr	r3, [pc, #528]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a83      	ldr	r2, [pc, #524]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	e036      	b.n	8000928 <HAL_RCC_OscConfig+0x190>
 80008ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10c      	bne.n	80008e4 <HAL_RCC_OscConfig+0x14c>
 80008ca:	4b7d      	ldr	r3, [pc, #500]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a7c      	ldr	r2, [pc, #496]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	4b7a      	ldr	r3, [pc, #488]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a79      	ldr	r2, [pc, #484]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e021      	b.n	8000928 <HAL_RCC_OscConfig+0x190>
 80008e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008f4:	d10c      	bne.n	8000910 <HAL_RCC_OscConfig+0x178>
 80008f6:	4b72      	ldr	r3, [pc, #456]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a71      	ldr	r2, [pc, #452]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a6e      	ldr	r2, [pc, #440]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	e00b      	b.n	8000928 <HAL_RCC_OscConfig+0x190>
 8000910:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a6a      	ldr	r2, [pc, #424]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a67      	ldr	r2, [pc, #412]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000926:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000928:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	f023 020f 	bic.w	r2, r3, #15
 8000930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	4960      	ldr	r1, [pc, #384]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800093e:	4313      	orrs	r3, r2
 8000940:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d05a      	beq.n	8000a08 <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000952:	f7ff ff03 	bl	800075c <HAL_GetTick>
 8000956:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	e00a      	b.n	8000972 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095c:	f7ff fefe 	bl	800075c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	2b64      	cmp	r3, #100	; 0x64
 800096a:	d902      	bls.n	8000972 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 800096c:	2303      	movs	r3, #3
 800096e:	f000 bf20 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
 8000972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000976:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800097e:	fa93 f3a3 	rbit	r3, r3
 8000982:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000986:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	095b      	lsrs	r3, r3, #5
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d102      	bne.n	80009a4 <HAL_RCC_OscConfig+0x20c>
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	e015      	b.n	80009d0 <HAL_RCC_OscConfig+0x238>
 80009a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009b0:	fa93 f3a3 	rbit	r3, r3
 80009b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80009b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009c4:	fa93 f3a3 	rbit	r3, r3
 80009c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009cc:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009d8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009dc:	fa92 f2a2 	rbit	r2, r2
 80009e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b252      	sxtb	r2, r2
 80009ee:	f042 0220 	orr.w	r2, r2, #32
 80009f2:	b252      	sxtb	r2, r2
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	f002 021f 	and.w	r2, r2, #31
 80009fa:	2101      	movs	r1, #1
 80009fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0aa      	beq.n	800095c <HAL_RCC_OscConfig+0x1c4>
 8000a06:	e05e      	b.n	8000ac6 <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a08:	f7ff fea8 	bl	800075c <HAL_GetTick>
 8000a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a10:	e00a      	b.n	8000a28 <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a12:	f7ff fea3 	bl	800075c <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b64      	cmp	r3, #100	; 0x64
 8000a20:	d902      	bls.n	8000a28 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8000a22:	2303      	movs	r3, #3
 8000a24:	f000 bec5 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
 8000a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a34:	fa93 f3a3 	rbit	r3, r3
 8000a38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a40:	fab3 f383 	clz	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d102      	bne.n	8000a5a <HAL_RCC_OscConfig+0x2c2>
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	e015      	b.n	8000a86 <HAL_RCC_OscConfig+0x2ee>
 8000a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a66:	fa93 f3a3 	rbit	r3, r3
 8000a6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a92:	fa92 f2a2 	rbit	r2, r2
 8000a96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	b252      	sxtb	r2, r2
 8000aa4:	f042 0220 	orr.w	r2, r2, #32
 8000aa8:	b252      	sxtb	r2, r2
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	f002 021f 	and.w	r2, r2, #31
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1aa      	bne.n	8000a12 <HAL_RCC_OscConfig+0x27a>
 8000abc:	e003      	b.n	8000ac6 <HAL_RCC_OscConfig+0x32e>
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 817e 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000adc:	4ba6      	ldr	r3, [pc, #664]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 030c 	and.w	r3, r3, #12
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ae8:	4ba3      	ldr	r3, [pc, #652]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d173      	bne.n	8000bdc <HAL_RCC_OscConfig+0x444>
 8000af4:	4ba0      	ldr	r3, [pc, #640]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d16d      	bne.n	8000bdc <HAL_RCC_OscConfig+0x444>
 8000b00:	2302      	movs	r3, #2
 8000b02:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b06:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b0a:	fa93 f3a3 	rbit	r3, r3
 8000b0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000b12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b16:	fab3 f383 	clz	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	095b      	lsrs	r3, r3, #5
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d102      	bne.n	8000b30 <HAL_RCC_OscConfig+0x398>
 8000b2a:	4b93      	ldr	r3, [pc, #588]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	e013      	b.n	8000b58 <HAL_RCC_OscConfig+0x3c0>
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b3a:	fa93 f3a3 	rbit	r3, r3
 8000b3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b48:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b54:	4b88      	ldr	r3, [pc, #544]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	2202      	movs	r2, #2
 8000b5a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b5e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b62:	fa92 f2a2 	rbit	r2, r2
 8000b66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	b252      	sxtb	r2, r2
 8000b74:	f042 0220 	orr.w	r2, r2, #32
 8000b78:	b252      	sxtb	r2, r2
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	f002 021f 	and.w	r2, r2, #31
 8000b80:	2101      	movs	r1, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x40a>
 8000b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d002      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f000 be08 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba2:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6959      	ldr	r1, [r3, #20]
 8000bb6:	23f8      	movs	r3, #248	; 0xf8
 8000bb8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000bc0:	fa93 f3a3 	rbit	r3, r3
 8000bc4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000bc8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000bcc:	fab3 f383 	clz	r3, r3
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4968      	ldr	r1, [pc, #416]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bda:	e0fd      	b.n	8000dd8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 8088 	beq.w	8000cfe <HAL_RCC_OscConfig+0x566>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000c00:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c04:	fab3 f383 	clz	r3, r3
 8000c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	461a      	mov	r2, r3
 8000c14:	2301      	movs	r3, #1
 8000c16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fda0 	bl	800075c <HAL_GetTick>
 8000c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c20:	e00a      	b.n	8000c38 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fd9b 	bl	800075c <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d902      	bls.n	8000c38 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	f000 bdbd 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4e:	fab3 f383 	clz	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d102      	bne.n	8000c68 <HAL_RCC_OscConfig+0x4d0>
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	e013      	b.n	8000c90 <HAL_RCC_OscConfig+0x4f8>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c80:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	2202      	movs	r2, #2
 8000c92:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c96:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c9a:	fa92 f2a2 	rbit	r2, r2
 8000c9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000ca2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	b252      	sxtb	r2, r2
 8000cac:	f042 0220 	orr.w	r2, r2, #32
 8000cb0:	b252      	sxtb	r2, r2
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	f002 021f 	and.w	r2, r2, #31
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0ae      	beq.n	8000c22 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6959      	ldr	r1, [r3, #20]
 8000cd8:	23f8      	movs	r3, #248	; 0xf8
 8000cda:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000cea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	4920      	ldr	r1, [pc, #128]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
 8000cfc:	e06c      	b.n	8000dd8 <HAL_RCC_OscConfig+0x640>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000d10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d14:	fab3 f383 	clz	r3, r3
 8000d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	461a      	mov	r2, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fd18 	bl	800075c <HAL_GetTick>
 8000d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d30:	e00a      	b.n	8000d48 <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fd13 	bl	800075c <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d902      	bls.n	8000d48 <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f000 bd35 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d104      	bne.n	8000d7c <HAL_RCC_OscConfig+0x5e4>
 8000d72:	4b01      	ldr	r3, [pc, #4]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	e015      	b.n	8000da4 <HAL_RCC_OscConfig+0x60c>
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000da0:	4bc5      	ldr	r3, [pc, #788]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	2202      	movs	r2, #2
 8000da6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000daa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000dae:	fa92 f2a2 	rbit	r2, r2
 8000db2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000db6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000dba:	fab2 f282 	clz	r2, r2
 8000dbe:	b252      	sxtb	r2, r2
 8000dc0:	f042 0220 	orr.w	r2, r2, #32
 8000dc4:	b252      	sxtb	r2, r2
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	f002 021f 	and.w	r2, r2, #31
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1ac      	bne.n	8000d32 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ddc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 810a 	beq.w	8001002 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d073      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x74e>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e08:	fa93 f3a3 	rbit	r3, r3
 8000e0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4ba8      	ldr	r3, [pc, #672]	; (80010bc <HAL_RCC_OscConfig+0x924>)
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	461a      	mov	r2, r3
 8000e22:	2301      	movs	r3, #1
 8000e24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e26:	f7ff fc99 	bl	800075c <HAL_GetTick>
 8000e2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	e00a      	b.n	8000e46 <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc94 	bl	800075c <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d902      	bls.n	8000e46 <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f000 bcb6 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e58:	2302      	movs	r3, #2
 8000e5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e62:	fa93 f2a3 	rbit	r2, r3
 8000e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e78:	2202      	movs	r2, #2
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	fa93 f2a3 	rbit	r2, r3
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e94:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 8000e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	6019      	str	r1, [r3, #0]
 8000ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	fa93 f1a3 	rbit	r1, r3
 8000eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000eba:	6019      	str	r1, [r3, #0]
  return(result);
 8000ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	fab3 f383 	clz	r3, r3
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0a5      	beq.n	8000e30 <HAL_RCC_OscConfig+0x698>
 8000ee4:	e08d      	b.n	8001002 <HAL_RCC_OscConfig+0x86a>
 8000ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	fa93 f2a3 	rbit	r2, r3
 8000f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f08:	601a      	str	r2, [r3, #0]
  return(result);
 8000f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f14:	fab3 f383 	clz	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <HAL_RCC_OscConfig+0x924>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	461a      	mov	r2, r3
 8000f22:	2300      	movs	r3, #0
 8000f24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fc19 	bl	800075c <HAL_GetTick>
 8000f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2e:	e00a      	b.n	8000f46 <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc14 	bl	800075c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d902      	bls.n	8000f46 <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f000 bc36 	b.w	80017b2 <HAL_RCC_OscConfig+0x101a>
 8000f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000f4e:	2202      	movs	r2, #2
 8000f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	fa93 f2a3 	rbit	r2, r3
 8000f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f6e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f72:	2202      	movs	r2, #2
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f7a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	fa93 f2a3 	rbit	r2, r3
 8000f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f96:	2202      	movs	r2, #2
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	fa93 f2a3 	rbit	r2, r3
 8000fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 8000fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	6019      	str	r1, [r3, #0]
 8000fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	fa93 f1a3 	rbit	r1, r3
 8000fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fd8:	6019      	str	r1, [r3, #0]
  return(result);
 8000fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d196      	bne.n	8000f30 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 81a4 	beq.w	8001360 <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800103e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001042:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001050:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001052:	2301      	movs	r3, #1
 8001054:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_RCC_OscConfig+0x928>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11a      	bne.n	800109a <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_RCC_OscConfig+0x928>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <HAL_RCC_OscConfig+0x928>)
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001070:	f7ff fb74 	bl	800075c <HAL_GetTick>
 8001074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	e009      	b.n	800108e <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107a:	f7ff fb6f 	bl	800075c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e391      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_RCC_OscConfig+0x928>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0ef      	beq.n	800107a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x92c>
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a02      	ldr	r2, [pc, #8]	; (80010b8 <HAL_RCC_OscConfig+0x920>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	e03b      	b.n	8001130 <HAL_RCC_OscConfig+0x998>
 80010b8:	40021000 	.word	0x40021000
 80010bc:	10908120 	.word	0x10908120
 80010c0:	40007000 	.word	0x40007000
 80010c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x956>
 80010d4:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a7b      	ldr	r2, [pc, #492]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80010e6:	f023 0304 	bic.w	r3, r3, #4
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e020      	b.n	8001130 <HAL_RCC_OscConfig+0x998>
 80010ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x980>
 80010fe:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a74      	ldr	r2, [pc, #464]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a71      	ldr	r2, [pc, #452]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x998>
 8001118:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a6d      	ldr	r2, [pc, #436]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b6b      	ldr	r3, [pc, #428]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 800112a:	f023 0304 	bic.w	r3, r3, #4
 800112e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8082 	beq.w	8001246 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff fb0b 	bl	800075c <HAL_GetTick>
 8001146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114c:	f7ff fb06 	bl	800075c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	f241 3288 	movw	r2, #5000	; 0x1388
 800115c:	4293      	cmp	r3, r2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e326      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
 8001164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001168:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800116c:	2202      	movs	r2, #2
 800116e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001174:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	fa93 f2a3 	rbit	r2, r3
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001190:	2202      	movs	r2, #2
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001198:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	fa93 f2a3 	rbit	r2, r3
 80011a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80011aa:	601a      	str	r2, [r3, #0]
  return(result);
 80011ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80011b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0xa38>
 80011ca:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	e013      	b.n	80011f8 <HAL_RCC_OscConfig+0xa60>
 80011d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011d8:	2202      	movs	r2, #2
 80011da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	fa93 f2a3 	rbit	r2, r3
 80011ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011fc:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8001200:	2102      	movs	r1, #2
 8001202:	6011      	str	r1, [r2, #0]
 8001204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001208:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	fa92 f1a2 	rbit	r1, r2
 8001212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001216:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800121a:	6011      	str	r1, [r2, #0]
  return(result);
 800121c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001220:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b252      	sxtb	r2, r2
 800122c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001230:	b252      	sxtb	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f002 021f 	and.w	r2, r2, #31
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d083      	beq.n	800114c <HAL_RCC_OscConfig+0x9b4>
 8001244:	e082      	b.n	800134c <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fa89 	bl	800075c <HAL_GetTick>
 800124a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001250:	f7ff fa84 	bl	800075c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e2a4      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
 8001268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001270:	2202      	movs	r2, #2
 8001272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001278:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	fa93 f2a3 	rbit	r2, r3
 8001282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001286:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001290:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001294:	2202      	movs	r2, #2
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	fa93 f2a3 	rbit	r2, r3
 80012a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80012ae:	601a      	str	r2, [r3, #0]
  return(result);
 80012b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80012b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	095b      	lsrs	r3, r3, #5
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d104      	bne.n	80012d8 <HAL_RCC_OscConfig+0xb40>
 80012ce:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <HAL_RCC_OscConfig+0xb3c>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	e015      	b.n	8001300 <HAL_RCC_OscConfig+0xb68>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80012e0:	2202      	movs	r2, #2
 80012e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	fa93 f2a3 	rbit	r2, r3
 80012f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	4bad      	ldr	r3, [pc, #692]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001304:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8001308:	2102      	movs	r1, #2
 800130a:	6011      	str	r1, [r2, #0]
 800130c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001310:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	fa92 f1a2 	rbit	r1, r2
 800131a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800131e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001322:	6011      	str	r1, [r2, #0]
  return(result);
 8001324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001328:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b252      	sxtb	r2, r2
 8001334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001338:	b252      	sxtb	r2, r2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f002 021f 	and.w	r2, r2, #31
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d181      	bne.n	8001250 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800134c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001354:	4b97      	ldr	r3, [pc, #604]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	4a96      	ldr	r2, [pc, #600]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 800135a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 821f 	beq.w	80017b0 <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001372:	4b90      	ldr	r3, [pc, #576]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b08      	cmp	r3, #8
 800137c:	f000 8216 	beq.w	80017ac <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	2b02      	cmp	r3, #2
 800138e:	f040 8166 	bne.w	800165e <HAL_RCC_OscConfig+0xec6>
 8001392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001396:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800139a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800139e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	fa93 f2a3 	rbit	r2, r3
 80013ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80013b6:	601a      	str	r2, [r3, #0]
  return(result);
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80013c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	461a      	mov	r2, r3
 80013d2:	2300      	movs	r3, #0
 80013d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff f9c1 	bl	800075c <HAL_GetTick>
 80013da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f9bc 	bl	800075c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a72      	ldr	r2, [pc, #456]	; (80015b8 <HAL_RCC_OscConfig+0xe20>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1dd      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
 80013f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80013fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800141a:	601a      	str	r2, [r3, #0]
  return(result);
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001424:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <HAL_RCC_OscConfig+0xca8>
 800143a:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	e027      	b.n	8001490 <HAL_RCC_OscConfig+0xcf8>
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800144c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800146e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001494:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8001498:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800149c:	6011      	str	r1, [r2, #0]
 800149e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014a2:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	fa92 f1a2 	rbit	r1, r2
 80014ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80014b4:	6011      	str	r1, [r2, #0]
  return(result);
 80014b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	fab2 f282 	clz	r2, r2
 80014c4:	b252      	sxtb	r2, r2
 80014c6:	f042 0220 	orr.w	r2, r2, #32
 80014ca:	b252      	sxtb	r2, r2
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	f002 021f 	and.w	r2, r2, #31
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d180      	bne.n	80013e0 <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	430b      	orrs	r3, r1
 8001500:	492c      	ldr	r1, [pc, #176]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800150e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800152a:	601a      	str	r2, [r3, #0]
  return(result);
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001534:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800153e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	461a      	mov	r2, r3
 8001546:	2301      	movs	r3, #1
 8001548:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff f907 	bl	800075c <HAL_GetTick>
 800154e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff f902 	bl	800075c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_RCC_OscConfig+0xe20>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e123      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800158e:	601a      	str	r2, [r3, #0]
  return(result);
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001598:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0xe24>
 80015ae:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <HAL_RCC_OscConfig+0xe1c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	e02b      	b.n	800160c <HAL_RCC_OscConfig+0xe74>
 80015b4:	40021000 	.word	0x40021000
 80015b8:	00030d40 	.word	0x00030d40
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80015c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f2a3 	rbit	r2, r3
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80015ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x1024>)
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001610:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8001614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001618:	6011      	str	r1, [r2, #0]
 800161a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800161e:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	fa92 f1a2 	rbit	r1, r2
 8001628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800162c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001630:	6011      	str	r1, [r2, #0]
  return(result);
 8001632:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001636:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	fab2 f282 	clz	r2, r2
 8001640:	b252      	sxtb	r2, r2
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	b252      	sxtb	r2, r2
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	f43f af7c 	beq.w	8001554 <HAL_RCC_OscConfig+0xdbc>
 800165c:	e0a8      	b.n	80017b0 <HAL_RCC_OscConfig+0x1018>
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001666:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800166a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001682:	601a      	str	r2, [r3, #0]
  return(result);
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800168c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001696:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	461a      	mov	r2, r3
 800169e:	2300      	movs	r3, #0
 80016a0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff f85b 	bl	800075c <HAL_GetTick>
 80016a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff f856 	bl	800075c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x1028>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e077      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80016ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80016e6:	601a      	str	r2, [r3, #0]
  return(result);
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80016f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	095b      	lsrs	r3, r3, #5
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_RCC_OscConfig+0xf74>
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x1024>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	e027      	b.n	800175c <HAL_RCC_OscConfig+0xfc4>
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800173a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fa93 f2a3 	rbit	r2, r3
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_RCC_OscConfig+0x1024>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001760:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8001764:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001768:	6011      	str	r1, [r2, #0]
 800176a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800176e:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	fa92 f1a2 	rbit	r1, r2
 8001778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800177c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001780:	6011      	str	r1, [r2, #0]
  return(result);
 8001782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001786:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	fab2 f282 	clz	r2, r2
 8001790:	b252      	sxtb	r2, r2
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	b252      	sxtb	r2, r2
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	f002 021f 	and.w	r2, r2, #31
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d180      	bne.n	80016ac <HAL_RCC_OscConfig+0xf14>
 80017aa:	e001      	b.n	80017b0 <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	00030d40 	.word	0x00030d40

080017c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09c      	sub	sp, #112	; 0x70
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017d2:	4b98      	ldr	r3, [pc, #608]	; (8001a34 <HAL_RCC_ClockConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d910      	bls.n	8001802 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e0:	4b94      	ldr	r3, [pc, #592]	; (8001a34 <HAL_RCC_ClockConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0207 	bic.w	r2, r3, #7
 80017e8:	4992      	ldr	r1, [pc, #584]	; (8001a34 <HAL_RCC_ClockConfig+0x270>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f0:	4b90      	ldr	r3, [pc, #576]	; (8001a34 <HAL_RCC_ClockConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e15a      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180e:	4b8a      	ldr	r3, [pc, #552]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4987      	ldr	r1, [pc, #540]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 810d 	beq.w	8001a48 <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d13d      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xee>
 8001836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <HAL_RCC_ClockConfig+0x9c>
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	e00f      	b.n	8001880 <HAL_RCC_ClockConfig+0xbc>
 8001860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800186e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001872:	65bb      	str	r3, [r7, #88]	; 0x58
 8001874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
 800187c:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001884:	653a      	str	r2, [r7, #80]	; 0x50
 8001886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001888:	fa92 f2a2 	rbit	r2, r2
 800188c:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 800188e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001890:	fab2 f282 	clz	r2, r2
 8001894:	b252      	sxtb	r2, r2
 8001896:	f042 0220 	orr.w	r2, r2, #32
 800189a:	b252      	sxtb	r2, r2
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f002 021f 	and.w	r2, r2, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d17d      	bne.n	80019aa <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e102      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d13d      	bne.n	8001936 <HAL_RCC_ClockConfig+0x172>
 80018ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80018c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x120>
 80018de:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	e00f      	b.n	8001904 <HAL_RCC_ClockConfig+0x140>
 80018e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	633a      	str	r2, [r7, #48]	; 0x30
 800190a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800190c:	fa92 f2a2 	rbit	r2, r2
 8001910:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 8001912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001914:	fab2 f282 	clz	r2, r2
 8001918:	b252      	sxtb	r2, r2
 800191a:	f042 0220 	orr.w	r2, r2, #32
 800191e:	b252      	sxtb	r2, r2
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f002 021f 	and.w	r2, r2, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13b      	bne.n	80019aa <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0c0      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
 8001936:	2302      	movs	r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d102      	bne.n	800195e <HAL_RCC_ClockConfig+0x19a>
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	e00d      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
 800195e:	2302      	movs	r3, #2
 8001960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	2202      	movs	r2, #2
 800197c:	613a      	str	r2, [r7, #16]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	fa92 f2a2 	rbit	r2, r2
 8001984:	60fa      	str	r2, [r7, #12]
  return(result);
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	fab2 f282 	clz	r2, r2
 800198c:	b252      	sxtb	r2, r2
 800198e:	f042 0220 	orr.w	r2, r2, #32
 8001992:	b252      	sxtb	r2, r2
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f002 021f 	and.w	r2, r2, #31
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e086      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4920      	ldr	r1, [pc, #128]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7fe fece 	bl	800075c <HAL_GetTick>
 80019c0:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7fe fec6 	bl	800075c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e06a      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d1ee      	bne.n	80019cc <HAL_RCC_ClockConfig+0x208>
 80019ee:	e02b      	b.n	8001a48 <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d121      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7fe feaf 	bl	800075c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e053      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x274>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d1ee      	bne.n	80019fa <HAL_RCC_ClockConfig+0x236>
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1e:	f7fe fe9d 	bl	800075c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d905      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e041      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x2fc>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ea      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_ClockConfig+0x300>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d210      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_ClockConfig+0x300>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0207 	bic.w	r2, r3, #7
 8001a5e:	4919      	ldr	r1, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x300>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCC_ClockConfig+0x300>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e01f      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x2fc>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <HAL_RCC_ClockConfig+0x2fc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_RCC_ClockConfig+0x2fc>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_ClockConfig+0x2fc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3770      	adds	r7, #112	; 0x70
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 8001acc:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001aee:	e154      	b.n	8001d9a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8146 	beq.w	8001d94 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x40>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	6939      	ldr	r1, [r7, #16]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_GPIO_Init+0xdc>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba8:	2b11      	cmp	r3, #17
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 0201 	and.w	r2, r3, #1
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a0 	beq.w	8001d94 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <HAL_GPIO_Init+0x2e0>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_GPIO_Init+0x2e0>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <HAL_GPIO_Init+0x2e0>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c6c:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c96:	d019      	beq.n	8001ccc <HAL_GPIO_Init+0x1f4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_Init+0x1f0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a48      	ldr	r2, [pc, #288]	; (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a46      	ldr	r2, [pc, #280]	; (8001dcc <HAL_GPIO_Init+0x2f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_Init+0x1e4>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e008      	b.n	8001cce <HAL_GPIO_Init+0x1f6>
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_Init+0x1f6>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e004      	b.n	8001cce <HAL_GPIO_Init+0x1f6>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_Init+0x1f6>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_GPIO_Init+0x1f6>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	f002 0203 	and.w	r2, r2, #3
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	4093      	lsls	r3, r2
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cde:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d3a:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f aea3 	bne.w	8001af0 <HAL_GPIO_Init+0x18>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	48000c00 	.word	0x48000c00
 8001dcc:	48001000 	.word	0x48001000
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	0000      	movs	r0, r0

08001e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001e10:	2310      	movs	r3, #16
 8001e12:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e42:	f023 030c 	bic.w	r3, r3, #12
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	68f9      	ldr	r1, [r7, #12]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4aa1      	ldr	r2, [pc, #644]	; (8002110 <UART_SetConfig+0x30c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d120      	bne.n	8001ed2 <UART_SetConfig+0xce>
 8001e90:	4ba0      	ldr	r3, [pc, #640]	; (8002114 <UART_SetConfig+0x310>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d817      	bhi.n	8001ecc <UART_SetConfig+0xc8>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <UART_SetConfig+0xa0>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001eb5 	.word	0x08001eb5
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	08001ec7 	.word	0x08001ec7
 8001eb0:	08001ebb 	.word	0x08001ebb
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	75fb      	strb	r3, [r7, #23]
 8001eb8:	e0b5      	b.n	8002026 <UART_SetConfig+0x222>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	75fb      	strb	r3, [r7, #23]
 8001ebe:	e0b2      	b.n	8002026 <UART_SetConfig+0x222>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	75fb      	strb	r3, [r7, #23]
 8001ec4:	e0af      	b.n	8002026 <UART_SetConfig+0x222>
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	75fb      	strb	r3, [r7, #23]
 8001eca:	e0ac      	b.n	8002026 <UART_SetConfig+0x222>
 8001ecc:	2310      	movs	r3, #16
 8001ece:	75fb      	strb	r3, [r7, #23]
 8001ed0:	e0a9      	b.n	8002026 <UART_SetConfig+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a90      	ldr	r2, [pc, #576]	; (8002118 <UART_SetConfig+0x314>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d124      	bne.n	8001f26 <UART_SetConfig+0x122>
 8001edc:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <UART_SetConfig+0x310>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ee8:	d011      	beq.n	8001f0e <UART_SetConfig+0x10a>
 8001eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001eee:	d817      	bhi.n	8001f20 <UART_SetConfig+0x11c>
 8001ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ef4:	d011      	beq.n	8001f1a <UART_SetConfig+0x116>
 8001ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001efa:	d811      	bhi.n	8001f20 <UART_SetConfig+0x11c>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <UART_SetConfig+0x104>
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d006      	beq.n	8001f14 <UART_SetConfig+0x110>
 8001f06:	e00b      	b.n	8001f20 <UART_SetConfig+0x11c>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]
 8001f0c:	e08b      	b.n	8002026 <UART_SetConfig+0x222>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	75fb      	strb	r3, [r7, #23]
 8001f12:	e088      	b.n	8002026 <UART_SetConfig+0x222>
 8001f14:	2304      	movs	r3, #4
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	e085      	b.n	8002026 <UART_SetConfig+0x222>
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	75fb      	strb	r3, [r7, #23]
 8001f1e:	e082      	b.n	8002026 <UART_SetConfig+0x222>
 8001f20:	2310      	movs	r3, #16
 8001f22:	75fb      	strb	r3, [r7, #23]
 8001f24:	e07f      	b.n	8002026 <UART_SetConfig+0x222>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7c      	ldr	r2, [pc, #496]	; (800211c <UART_SetConfig+0x318>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d124      	bne.n	8001f7a <UART_SetConfig+0x176>
 8001f30:	4b78      	ldr	r3, [pc, #480]	; (8002114 <UART_SetConfig+0x310>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001f38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f3c:	d011      	beq.n	8001f62 <UART_SetConfig+0x15e>
 8001f3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f42:	d817      	bhi.n	8001f74 <UART_SetConfig+0x170>
 8001f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f48:	d011      	beq.n	8001f6e <UART_SetConfig+0x16a>
 8001f4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f4e:	d811      	bhi.n	8001f74 <UART_SetConfig+0x170>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <UART_SetConfig+0x158>
 8001f54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f58:	d006      	beq.n	8001f68 <UART_SetConfig+0x164>
 8001f5a:	e00b      	b.n	8001f74 <UART_SetConfig+0x170>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]
 8001f60:	e061      	b.n	8002026 <UART_SetConfig+0x222>
 8001f62:	2302      	movs	r3, #2
 8001f64:	75fb      	strb	r3, [r7, #23]
 8001f66:	e05e      	b.n	8002026 <UART_SetConfig+0x222>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	75fb      	strb	r3, [r7, #23]
 8001f6c:	e05b      	b.n	8002026 <UART_SetConfig+0x222>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	75fb      	strb	r3, [r7, #23]
 8001f72:	e058      	b.n	8002026 <UART_SetConfig+0x222>
 8001f74:	2310      	movs	r3, #16
 8001f76:	75fb      	strb	r3, [r7, #23]
 8001f78:	e055      	b.n	8002026 <UART_SetConfig+0x222>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a68      	ldr	r2, [pc, #416]	; (8002120 <UART_SetConfig+0x31c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d124      	bne.n	8001fce <UART_SetConfig+0x1ca>
 8001f84:	4b63      	ldr	r3, [pc, #396]	; (8002114 <UART_SetConfig+0x310>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f90:	d011      	beq.n	8001fb6 <UART_SetConfig+0x1b2>
 8001f92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f96:	d817      	bhi.n	8001fc8 <UART_SetConfig+0x1c4>
 8001f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f9c:	d011      	beq.n	8001fc2 <UART_SetConfig+0x1be>
 8001f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fa2:	d811      	bhi.n	8001fc8 <UART_SetConfig+0x1c4>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <UART_SetConfig+0x1ac>
 8001fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fac:	d006      	beq.n	8001fbc <UART_SetConfig+0x1b8>
 8001fae:	e00b      	b.n	8001fc8 <UART_SetConfig+0x1c4>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]
 8001fb4:	e037      	b.n	8002026 <UART_SetConfig+0x222>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	75fb      	strb	r3, [r7, #23]
 8001fba:	e034      	b.n	8002026 <UART_SetConfig+0x222>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	75fb      	strb	r3, [r7, #23]
 8001fc0:	e031      	b.n	8002026 <UART_SetConfig+0x222>
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	75fb      	strb	r3, [r7, #23]
 8001fc6:	e02e      	b.n	8002026 <UART_SetConfig+0x222>
 8001fc8:	2310      	movs	r3, #16
 8001fca:	75fb      	strb	r3, [r7, #23]
 8001fcc:	e02b      	b.n	8002026 <UART_SetConfig+0x222>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a54      	ldr	r2, [pc, #336]	; (8002124 <UART_SetConfig+0x320>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d124      	bne.n	8002022 <UART_SetConfig+0x21e>
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <UART_SetConfig+0x310>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fe4:	d011      	beq.n	800200a <UART_SetConfig+0x206>
 8001fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fea:	d817      	bhi.n	800201c <UART_SetConfig+0x218>
 8001fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ff0:	d011      	beq.n	8002016 <UART_SetConfig+0x212>
 8001ff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ff6:	d811      	bhi.n	800201c <UART_SetConfig+0x218>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <UART_SetConfig+0x200>
 8001ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002000:	d006      	beq.n	8002010 <UART_SetConfig+0x20c>
 8002002:	e00b      	b.n	800201c <UART_SetConfig+0x218>
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
 8002008:	e00d      	b.n	8002026 <UART_SetConfig+0x222>
 800200a:	2302      	movs	r3, #2
 800200c:	75fb      	strb	r3, [r7, #23]
 800200e:	e00a      	b.n	8002026 <UART_SetConfig+0x222>
 8002010:	2304      	movs	r3, #4
 8002012:	75fb      	strb	r3, [r7, #23]
 8002014:	e007      	b.n	8002026 <UART_SetConfig+0x222>
 8002016:	2308      	movs	r3, #8
 8002018:	75fb      	strb	r3, [r7, #23]
 800201a:	e004      	b.n	8002026 <UART_SetConfig+0x222>
 800201c:	2310      	movs	r3, #16
 800201e:	75fb      	strb	r3, [r7, #23]
 8002020:	e001      	b.n	8002026 <UART_SetConfig+0x222>
 8002022:	2310      	movs	r3, #16
 8002024:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202e:	d17b      	bne.n	8002128 <UART_SetConfig+0x324>
  {
    switch (clocksource)
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d856      	bhi.n	80020e4 <UART_SetConfig+0x2e0>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <UART_SetConfig+0x238>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	08002061 	.word	0x08002061
 8002040:	0800207d 	.word	0x0800207d
 8002044:	08002099 	.word	0x08002099
 8002048:	080020e5 	.word	0x080020e5
 800204c:	080020b3 	.word	0x080020b3
 8002050:	080020e5 	.word	0x080020e5
 8002054:	080020e5 	.word	0x080020e5
 8002058:	080020e5 	.word	0x080020e5
 800205c:	080020cf 	.word	0x080020cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002060:	f7fe fb92 	bl	8000788 <HAL_RCC_GetPCLK1Freq>
 8002064:	4603      	mov	r3, r0
 8002066:	005a      	lsls	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	441a      	add	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	82bb      	strh	r3, [r7, #20]
        break;
 800207a:	e036      	b.n	80020ea <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800207c:	f7ff fd24 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002080:	4603      	mov	r3, r0
 8002082:	005a      	lsls	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	441a      	add	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	82bb      	strh	r3, [r7, #20]
        break;
 8002096:	e028      	b.n	80020ea <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80020a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6852      	ldr	r2, [r2, #4]
 80020aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ae:	82bb      	strh	r3, [r7, #20]
        break;
 80020b0:	e01b      	b.n	80020ea <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020b2:	f7fe fb61 	bl	8000778 <HAL_RCC_GetSysClockFreq>
 80020b6:	4603      	mov	r3, r0
 80020b8:	005a      	lsls	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	82bb      	strh	r3, [r7, #20]
        break;
 80020cc:	e00d      	b.n	80020ea <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	82bb      	strh	r3, [r7, #20]
        break;
 80020e2:	e002      	b.n	80020ea <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	74fb      	strb	r3, [r7, #19]
        break;
 80020e8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80020ea:	8abb      	ldrh	r3, [r7, #20]
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020f2:	8abb      	ldrh	r3, [r7, #20]
 80020f4:	105b      	asrs	r3, r3, #1
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	897b      	ldrh	r3, [r7, #10]
 8002100:	4313      	orrs	r3, r2
 8002102:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	897a      	ldrh	r2, [r7, #10]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e075      	b.n	80021fa <UART_SetConfig+0x3f6>
 800210e:	bf00      	nop
 8002110:	40013800 	.word	0x40013800
 8002114:	40021000 	.word	0x40021000
 8002118:	40004400 	.word	0x40004400
 800211c:	40004800 	.word	0x40004800
 8002120:	40004c00 	.word	0x40004c00
 8002124:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d862      	bhi.n	80021f4 <UART_SetConfig+0x3f0>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <UART_SetConfig+0x330>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002159 	.word	0x08002159
 8002138:	08002179 	.word	0x08002179
 800213c:	08002199 	.word	0x08002199
 8002140:	080021f5 	.word	0x080021f5
 8002144:	080021b9 	.word	0x080021b9
 8002148:	080021f5 	.word	0x080021f5
 800214c:	080021f5 	.word	0x080021f5
 8002150:	080021f5 	.word	0x080021f5
 8002154:	080021d9 	.word	0x080021d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002158:	f7fe fb16 	bl	8000788 <HAL_RCC_GetPCLK1Freq>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60da      	str	r2, [r3, #12]
        break;
 8002176:	e040      	b.n	80021fa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002178:	f7ff fca6 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 800217c:	4602      	mov	r2, r0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	441a      	add	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60da      	str	r2, [r3, #12]
        break;
 8002196:	e030      	b.n	80021fa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80021a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6852      	ldr	r2, [r2, #4]
 80021aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60da      	str	r2, [r3, #12]
        break;
 80021b6:	e020      	b.n	80021fa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021b8:	f7fe fade 	bl	8000778 <HAL_RCC_GetSysClockFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60da      	str	r2, [r3, #12]
        break;
 80021d6:	e010      	b.n	80021fa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60da      	str	r2, [r3, #12]
        break;
 80021f2:	e002      	b.n	80021fa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	74fb      	strb	r3, [r7, #19]
        break;
 80021f8:	bf00      	nop
    }
  }

  return ret;
 80021fa:	7cfb      	ldrb	r3, [r7, #19]

}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002216:	f7fe faa1 	bl	800075c <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d10e      	bne.n	8002248 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800222a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f873 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e022      	b.n	800228e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b04      	cmp	r3, #4
 8002254:	d10e      	bne.n	8002274 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002256:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f85d 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e00c      	b.n	800228e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e039      	b.n	800231c <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d103      	bne.n	80022bc <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fd95 	bl	8001e04 <UART_SetConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01b      	b.n	800231c <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002302:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff75 	bl	8002204 <UART_CheckIdleState>
 800231a:	4603      	mov	r3, r0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002334:	e02c      	b.n	8002390 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233c:	d028      	beq.n	8002390 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <UART_WaitOnFlagUntilTimeout+0x30>
 8002344:	f7fe fa0a 	bl	800075c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	d21d      	bcs.n	8002390 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002362:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e00f      	b.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d0c3      	beq.n	8002336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d177      	bne.n	80024c8 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_UART_Transmit+0x2c>
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e070      	b.n	80024ca <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Transmit+0x3e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e069      	b.n	80024ca <HAL_UART_Transmit+0x112>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2221      	movs	r2, #33	; 0x21
 8002408:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800240c:	f7fe f9a6 	bl	800075c <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002422:	e034      	b.n	800248e <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2200      	movs	r2, #0
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff ff6f 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e03c      	b.n	80024ca <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d111      	bne.n	800247e <HAL_UART_Transmit+0xc6>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002472:	b292      	uxth	r2, r2
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3302      	adds	r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	e007      	b.n	800248e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	60ba      	str	r2, [r7, #8]
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b292      	uxth	r2, r2
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1c4      	bne.n	8002424 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff ff3d 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e00a      	b.n	80024ca <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b08a      	sub	sp, #40	; 0x28
 80024d6:	af02      	add	r7, sp, #8
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 809f 	bne.w	8002632 <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_UART_Receive+0x2e>
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e097      	b.n	8002634 <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_UART_Receive+0x40>
 800250e:	2302      	movs	r3, #2
 8002510:	e090      	b.n	8002634 <HAL_UART_Receive+0x162>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002522:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2222      	movs	r2, #34	; 0x22
 800252e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002532:	f7fe f913 	bl	800075c <HAL_GetTick>
 8002536:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	d10e      	bne.n	8002570 <HAL_UART_Receive+0x9e>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_UART_Receive+0x94>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002564:	e015      	b.n	8002592 <HAL_UART_Receive+0xc0>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800256e:	e010      	b.n	8002592 <HAL_UART_Receive+0xc0>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10c      	bne.n	8002592 <HAL_UART_Receive+0xc0>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_UART_Receive+0xb8>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002588:	e003      	b.n	8002592 <HAL_UART_Receive+0xc0>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	227f      	movs	r2, #127	; 0x7f
 800258e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002598:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800259a:	e03a      	b.n	8002612 <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2200      	movs	r2, #0
 80025b6:	2120      	movs	r1, #32
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff feb3 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e035      	b.n	8002634 <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d0:	d112      	bne.n	80025f8 <HAL_UART_Receive+0x126>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10e      	bne.n	80025f8 <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	8b7b      	ldrh	r3, [r7, #26]
 80025e8:	4013      	ands	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	3302      	adds	r3, #2
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	e00c      	b.n	8002612 <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b2d9      	uxtb	r1, r3
 8002602:	8b7b      	ldrh	r3, [r7, #26]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c58      	adds	r0, r3, #1
 800260a:	60b8      	str	r0, [r7, #8]
 800260c:	400a      	ands	r2, r1
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1be      	bne.n	800259c <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <Reset_Handler>:
 800263c:	2100      	movs	r1, #0
 800263e:	e003      	b.n	8002648 <LoopCopyDataInit>

08002640 <CopyDataInit>:
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <LoopForever+0x2>)
 8002642:	585b      	ldr	r3, [r3, r1]
 8002644:	5043      	str	r3, [r0, r1]
 8002646:	3104      	adds	r1, #4

08002648 <LoopCopyDataInit>:
 8002648:	480a      	ldr	r0, [pc, #40]	; (8002674 <LoopForever+0x6>)
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <LoopForever+0xa>)
 800264c:	1842      	adds	r2, r0, r1
 800264e:	429a      	cmp	r2, r3
 8002650:	d3f6      	bcc.n	8002640 <CopyDataInit>
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <LoopForever+0xe>)
 8002654:	e002      	b.n	800265c <LoopFillZerobss>

08002656 <FillZerobss>:
 8002656:	2300      	movs	r3, #0
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	3204      	adds	r2, #4

0800265c <LoopFillZerobss>:
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <LoopForever+0x12>)
 800265e:	429a      	cmp	r2, r3
 8002660:	d3f9      	bcc.n	8002656 <FillZerobss>
 8002662:	f3af 8000 	nop.w
 8002666:	f7fd fdd3 	bl	8000210 <__libc_init_array>
 800266a:	f7fd ff3b 	bl	80004e4 <main>

0800266e <LoopForever>:
 800266e:	e7fe      	b.n	800266e <LoopForever>
 8002670:	080026c4 	.word	0x080026c4
 8002674:	20000000 	.word	0x20000000
 8002678:	20000ec0 	.word	0x20000ec0
 800267c:	20000ec0 	.word	0x20000ec0
 8002680:	20000f54 	.word	0x20000f54

08002684 <BusFault_Handler>:
 8002684:	e7fe      	b.n	8002684 <BusFault_Handler>
 8002686:	0000      	movs	r0, r0

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
