
MAYO-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00023d94  2**0
                  CONTENTS
  4 .ARM          00000000  08003390  08003390  00023d94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003390  08003390  00023d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003d94  20000000  08003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20003d94  0800712c  00023d94  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20003f30  0800712c  00023f30  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00023d94  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00023dbe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003eb6  00000000  00000000  00023df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a94  00000000  00000000  00027ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001170  00000000  00000000  0002873b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000238  00000000  00000000  000298b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001c8  00000000  00000000  00029ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002340  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001627  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000760  00000000  00000000  0002d618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0002dd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0002debc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20003d94 	.word	0x20003d94
 800019c:	20003d94 	.word	0x20003d94
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20003d94 	.word	0x20003d94
 80001c0:	20003d94 	.word	0x20003d94
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20003d94 	.word	0x20003d94
 80001e8:	00000000 	.word	0x00000000
 80001ec:	0800335c 	.word	0x0800335c

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20003d98 	.word	0x20003d98
 800020c:	0800335c 	.word	0x0800335c

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000222:	3401      	adds	r4, #1
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f003 f894 	bl	800335c <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	f855 3b04 	ldr.w	r3, [r5], #4
 800023e:	3401      	adds	r4, #1
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	08003390 	.word	0x08003390
 800024c:	08003390 	.word	0x08003390
 8000250:	08003394 	.word	0x08003394
 8000254:	08003390 	.word	0x08003390

08000258 <memcpy>:
 8000258:	4684      	mov	ip, r0
 800025a:	ea41 0300 	orr.w	r3, r1, r0
 800025e:	f013 0303 	ands.w	r3, r3, #3
 8000262:	d16d      	bne.n	8000340 <memcpy+0xe8>
 8000264:	3a40      	subs	r2, #64	; 0x40
 8000266:	d341      	bcc.n	80002ec <memcpy+0x94>
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	3a40      	subs	r2, #64	; 0x40
 80002ea:	d2bd      	bcs.n	8000268 <memcpy+0x10>
 80002ec:	3230      	adds	r2, #48	; 0x30
 80002ee:	d311      	bcc.n	8000314 <memcpy+0xbc>
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	3a10      	subs	r2, #16
 8000312:	d2ed      	bcs.n	80002f0 <memcpy+0x98>
 8000314:	320c      	adds	r2, #12
 8000316:	d305      	bcc.n	8000324 <memcpy+0xcc>
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	3a04      	subs	r2, #4
 8000322:	d2f9      	bcs.n	8000318 <memcpy+0xc0>
 8000324:	3204      	adds	r2, #4
 8000326:	d008      	beq.n	800033a <memcpy+0xe2>
 8000328:	07d2      	lsls	r2, r2, #31
 800032a:	bf1c      	itt	ne
 800032c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000330:	f800 3b01 	strbne.w	r3, [r0], #1
 8000334:	d301      	bcc.n	800033a <memcpy+0xe2>
 8000336:	880b      	ldrh	r3, [r1, #0]
 8000338:	8003      	strh	r3, [r0, #0]
 800033a:	4660      	mov	r0, ip
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	2a08      	cmp	r2, #8
 8000342:	d313      	bcc.n	800036c <memcpy+0x114>
 8000344:	078b      	lsls	r3, r1, #30
 8000346:	d08d      	beq.n	8000264 <memcpy+0xc>
 8000348:	f010 0303 	ands.w	r3, r0, #3
 800034c:	d08a      	beq.n	8000264 <memcpy+0xc>
 800034e:	f1c3 0304 	rsb	r3, r3, #4
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	07db      	lsls	r3, r3, #31
 8000356:	bf1c      	itt	ne
 8000358:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800035c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000360:	d380      	bcc.n	8000264 <memcpy+0xc>
 8000362:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000366:	f820 3b02 	strh.w	r3, [r0], #2
 800036a:	e77b      	b.n	8000264 <memcpy+0xc>
 800036c:	3a04      	subs	r2, #4
 800036e:	d3d9      	bcc.n	8000324 <memcpy+0xcc>
 8000370:	3a01      	subs	r2, #1
 8000372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000376:	f800 3b01 	strb.w	r3, [r0], #1
 800037a:	d2f9      	bcs.n	8000370 <memcpy+0x118>
 800037c:	780b      	ldrb	r3, [r1, #0]
 800037e:	7003      	strb	r3, [r0, #0]
 8000380:	784b      	ldrb	r3, [r1, #1]
 8000382:	7043      	strb	r3, [r0, #1]
 8000384:	788b      	ldrb	r3, [r1, #2]
 8000386:	7083      	strb	r3, [r0, #2]
 8000388:	4660      	mov	r0, ip
 800038a:	4770      	bx	lr

0800038c <memset>:
 800038c:	0783      	lsls	r3, r0, #30
 800038e:	b530      	push	{r4, r5, lr}
 8000390:	d048      	beq.n	8000424 <memset+0x98>
 8000392:	1e54      	subs	r4, r2, #1
 8000394:	2a00      	cmp	r2, #0
 8000396:	d03f      	beq.n	8000418 <memset+0x8c>
 8000398:	b2ca      	uxtb	r2, r1
 800039a:	4603      	mov	r3, r0
 800039c:	e001      	b.n	80003a2 <memset+0x16>
 800039e:	3c01      	subs	r4, #1
 80003a0:	d33a      	bcc.n	8000418 <memset+0x8c>
 80003a2:	f803 2b01 	strb.w	r2, [r3], #1
 80003a6:	079d      	lsls	r5, r3, #30
 80003a8:	d1f9      	bne.n	800039e <memset+0x12>
 80003aa:	2c03      	cmp	r4, #3
 80003ac:	d92d      	bls.n	800040a <memset+0x7e>
 80003ae:	b2cd      	uxtb	r5, r1
 80003b0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003b4:	2c0f      	cmp	r4, #15
 80003b6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003ba:	d936      	bls.n	800042a <memset+0x9e>
 80003bc:	f1a4 0210 	sub.w	r2, r4, #16
 80003c0:	f022 0c0f 	bic.w	ip, r2, #15
 80003c4:	f103 0e20 	add.w	lr, r3, #32
 80003c8:	44e6      	add	lr, ip
 80003ca:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003ce:	f103 0210 	add.w	r2, r3, #16
 80003d2:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003d6:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003da:	3210      	adds	r2, #16
 80003dc:	4572      	cmp	r2, lr
 80003de:	d1f8      	bne.n	80003d2 <memset+0x46>
 80003e0:	f10c 0201 	add.w	r2, ip, #1
 80003e4:	f014 0f0c 	tst.w	r4, #12
 80003e8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003ec:	f004 0c0f 	and.w	ip, r4, #15
 80003f0:	d013      	beq.n	800041a <memset+0x8e>
 80003f2:	f1ac 0304 	sub.w	r3, ip, #4
 80003f6:	f023 0303 	bic.w	r3, r3, #3
 80003fa:	3304      	adds	r3, #4
 80003fc:	4413      	add	r3, r2
 80003fe:	f842 5b04 	str.w	r5, [r2], #4
 8000402:	4293      	cmp	r3, r2
 8000404:	d1fb      	bne.n	80003fe <memset+0x72>
 8000406:	f00c 0403 	and.w	r4, ip, #3
 800040a:	b12c      	cbz	r4, 8000418 <memset+0x8c>
 800040c:	b2ca      	uxtb	r2, r1
 800040e:	441c      	add	r4, r3
 8000410:	f803 2b01 	strb.w	r2, [r3], #1
 8000414:	429c      	cmp	r4, r3
 8000416:	d1fb      	bne.n	8000410 <memset+0x84>
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	4664      	mov	r4, ip
 800041c:	4613      	mov	r3, r2
 800041e:	2c00      	cmp	r4, #0
 8000420:	d1f4      	bne.n	800040c <memset+0x80>
 8000422:	e7f9      	b.n	8000418 <memset+0x8c>
 8000424:	4603      	mov	r3, r0
 8000426:	4614      	mov	r4, r2
 8000428:	e7bf      	b.n	80003aa <memset+0x1e>
 800042a:	461a      	mov	r2, r3
 800042c:	46a4      	mov	ip, r4
 800042e:	e7e0      	b.n	80003f2 <memset+0x66>

08000430 <putString>:

extern uint32_t trigger;


void putString(const unsigned char *string, const unsigned int length)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
    for(int i=0; i<length; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e009      	b.n	8000454 <putString+0x24>
         putch(string[i]);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 ffdb 	bl	8001404 <putch>
    for(int i=0; i<length; i++)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	429a      	cmp	r2, r3
 800045a:	d8f1      	bhi.n	8000440 <putString+0x10>
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	0000      	movs	r0, r0

08000468 <add_vectors>:

void add_vectors(const unsigned char *v1, const unsigned char *v2, unsigned char *out){
 8000468:	b480      	push	{r7}
 800046a:	b087      	sub	sp, #28
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < M; ++i)
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	e01c      	b.n	80004b4 <add_vectors+0x4c>
	{
		out[i] = (((uint16_t) v1[i]) + ((uint16_t) v2[i])) % PRIME;
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	4413      	add	r3, r2
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	4619      	mov	r1, r3
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	18ca      	adds	r2, r1, r3
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <add_vectors+0x60>)
 8000490:	fb83 1302 	smull	r1, r3, r3, r2
 8000494:	4413      	add	r3, r2
 8000496:	1119      	asrs	r1, r3, #4
 8000498:	17d3      	asrs	r3, r2, #31
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	460b      	mov	r3, r1
 800049e:	015b      	lsls	r3, r3, #5
 80004a0:	1a5b      	subs	r3, r3, r1
 80004a2:	1ad1      	subs	r1, r2, r3
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	b2ca      	uxtb	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < M; ++i)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	2b1d      	cmp	r3, #29
 80004b8:	dddf      	ble.n	800047a <add_vectors+0x12>
	}
}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	371c      	adds	r7, #28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	84210843 	.word	0x84210843

080004cc <negate>:

void negate(unsigned char* v, int len){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; ++i)
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	e018      	b.n	800050e <negate+0x42>
	{
		v[i] = (PRIME - v[i]) % PRIME;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	f1c3 021f 	rsb	r2, r3, #31
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <negate+0x58>)
 80004ea:	fb83 1302 	smull	r1, r3, r3, r2
 80004ee:	4413      	add	r3, r2
 80004f0:	1119      	asrs	r1, r3, #4
 80004f2:	17d3      	asrs	r3, r2, #31
 80004f4:	1ac9      	subs	r1, r1, r3
 80004f6:	460b      	mov	r3, r1
 80004f8:	015b      	lsls	r3, r3, #5
 80004fa:	1a5b      	subs	r3, r3, r1
 80004fc:	1ad1      	subs	r1, r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	b2ca      	uxtb	r2, r1
 8000506:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; ++i)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3301      	adds	r3, #1
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	dbe2      	blt.n	80004dc <negate+0x10>
	}
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	84210843 	.word	0x84210843

08000528 <_linear_combination>:

void _linear_combination(const unsigned char* vecs, const unsigned char* coeffs, int len, unsigned char *out){
 8000528:	b580      	push	{r7, lr}
 800052a:	b0a6      	sub	sp, #152	; 0x98
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
	uint32_t accumulators[M] = {0};
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	2278      	movs	r2, #120	; 0x78
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff24 	bl	800038c <memset>

    // i runs through the entries of coeffs
    for (int i = 0; i < len; ++i)
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800054a:	e05a      	b.n	8000602 <_linear_combination+0xda>
	{ 
        // j runs through the  of vecs which contains the coefficients of the different equations
        // each entry in coeefs gets multiplied with m entries in vecs, the intermediate result is stored in accumulators

		if(trigger == 1 && i==0)
 800054c:	4b44      	ldr	r3, [pc, #272]	; (8000660 <_linear_combination+0x138>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d112      	bne.n	800057a <_linear_combination+0x52>
 8000554:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000558:	2b00      	cmp	r3, #0
 800055a:	d10e      	bne.n	800057a <_linear_combination+0x52>
		{
			char c = 'A';
 800055c:	2341      	movs	r3, #65	; 0x41
 800055e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				// stall until ready to trace 
			while ((c != 'g'))
 8000562:	e004      	b.n	800056e <_linear_combination+0x46>
			{
				c = getch();
 8000564:	f000 ff30 	bl	80013c8 <getch>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			while ((c != 'g'))
 800056e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000572:	2b67      	cmp	r3, #103	; 0x67
 8000574:	d1f6      	bne.n	8000564 <_linear_combination+0x3c>
			}
			trigger_high();
 8000576:	f000 ff11 	bl	800139c <trigger_high>
		}
		for(int j=0; j< M; j++){
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000580:	e029      	b.n	80005d6 <_linear_combination+0xae>
			accumulators[j] += ((uint32_t) vecs[i*M + j]) * ((uint32_t) coeffs[i]);
 8000582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	3398      	adds	r3, #152	; 0x98
 800058a:	443b      	add	r3, r7
 800058c:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8000590:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000594:	4613      	mov	r3, r2
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	461a      	mov	r2, r3
 800059e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005a2:	4413      	add	r3, r2
 80005a4:	461a      	mov	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	fb00 f303 	mul.w	r3, r0, r3
 80005bc:	18ca      	adds	r2, r1, r3
 80005be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	3398      	adds	r3, #152	; 0x98
 80005c6:	443b      	add	r3, r7
 80005c8:	f843 2c88 	str.w	r2, [r3, #-136]
		for(int j=0; j< M; j++){
 80005cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005d0:	3301      	adds	r3, #1
 80005d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80005d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005da:	2b1d      	cmp	r3, #29
 80005dc:	ddd1      	ble.n	8000582 <_linear_combination+0x5a>
		} 
		if(trigger == 1 && i==0)
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <_linear_combination+0x138>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d108      	bne.n	80005f8 <_linear_combination+0xd0>
 80005e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d104      	bne.n	80005f8 <_linear_combination+0xd0>
		{			
			trigger_low();
 80005ee:	f000 fee0 	bl	80013b2 <trigger_low>
			putch('r');
 80005f2:	2072      	movs	r0, #114	; 0x72
 80005f4:	f000 ff06 	bl	8001404 <putch>
    for (int i = 0; i < len; ++i)
 80005f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005fc:	3301      	adds	r3, #1
 80005fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000602:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	db9f      	blt.n	800054c <_linear_combination+0x24>
		}
	}

	for (int i = 0; i < M; ++i)
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000612:	e01c      	b.n	800064e <_linear_combination+0x126>
	{
		out[i] = (unsigned char) (accumulators[i] % PRIME);
 8000614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	3398      	adds	r3, #152	; 0x98
 800061c:	443b      	add	r3, r7
 800061e:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <_linear_combination+0x13c>)
 8000624:	fba3 1302 	umull	r1, r3, r3, r2
 8000628:	1ad1      	subs	r1, r2, r3
 800062a:	0849      	lsrs	r1, r1, #1
 800062c:	440b      	add	r3, r1
 800062e:	0919      	lsrs	r1, r3, #4
 8000630:	460b      	mov	r3, r1
 8000632:	015b      	lsls	r3, r3, #5
 8000634:	1a5b      	subs	r3, r3, r1
 8000636:	1ad1      	subs	r1, r2, r3
 8000638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	4413      	add	r3, r2
 8000640:	b2ca      	uxtb	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < M; ++i)
 8000644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000648:	3301      	adds	r3, #1
 800064a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800064e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000652:	2b1d      	cmp	r3, #29
 8000654:	ddde      	ble.n	8000614 <_linear_combination+0xec>
	}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3798      	adds	r7, #152	; 0x98
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20003db0 	.word	0x20003db0
 8000664:	08421085 	.word	0x08421085

08000668 <computeP2>:

void computeP2(const unsigned char* oil_space, const unsigned char* P1, unsigned char* P2){
 8000668:	b580      	push	{r7, lr}
 800066a:	f5ad 5da7 	sub.w	sp, sp, #5344	; 0x14e0
 800066e:	af00      	add	r7, sp, #0
 8000670:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000674:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8000678:	6018      	str	r0, [r3, #0]
 800067a:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800067e:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8000682:	6019      	str	r1, [r3, #0]
 8000684:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000688:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800068c:	601a      	str	r2, [r3, #0]
	// P2 = - O*P1*O^t - O*P1'

	// first compute Temp = P1*O^t + P1'
	unsigned char temp[M*(N-O)*O] = {0};
 800068e:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8000692:	f6a3 235c 	subw	r3, r3, #2652	; 0xa5c
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	3304      	adds	r3, #4
 800069c:	f640 222e 	movw	r2, #2606	; 0xa2e
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fe72 	bl	800038c <memset>

	int	p1_counter = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80006ae:	f102 021c 	add.w	r2, r2, #28
 80006b2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < N-O; ++i)
 80006b4:	2300      	movs	r3, #0
 80006b6:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80006ba:	f102 0218 	add.w	r2, r2, #24
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	e0af      	b.n	8000822 <computeP2+0x1ba>
	{
		// P1*O^t part
		for (int j = 0; j < O; ++j)
 80006c2:	2300      	movs	r3, #0
 80006c4:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80006c8:	f102 0214 	add.w	r2, r2, #20
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e083      	b.n	80007d8 <computeP2+0x170>
		{
			if(j==0 && i==0) trigger=1;
 80006d0:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80006d4:	f103 0314 	add.w	r3, r3, #20
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d109      	bne.n	80006f2 <computeP2+0x8a>
 80006de:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80006e2:	f103 0318 	add.w	r3, r3, #24
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <computeP2+0x8a>
 80006ec:	4bd3      	ldr	r3, [pc, #844]	; (8000a3c <computeP2+0x3d4>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
			unsigned char vec[M];
			_linear_combination(P1 + p1_counter*M, oil_space + (j*(N-O) + i), N-O-i, vec);
 80006f2:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80006f6:	f103 031c 	add.w	r3, r3, #28
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4613      	mov	r3, r2
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	461a      	mov	r2, r3
 8000706:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800070a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	1898      	adds	r0, r3, r2
 8000712:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000716:	f103 0314 	add.w	r3, r3, #20
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	441a      	add	r2, r3
 8000726:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800072a:	f103 0318 	add.w	r3, r3, #24
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	461a      	mov	r2, r3
 8000734:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000738:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	1899      	adds	r1, r3, r2
 8000740:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000744:	f103 0318 	add.w	r3, r3, #24
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f1c3 021d 	rsb	r2, r3, #29
 800074e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000752:	3b10      	subs	r3, #16
 8000754:	f7ff fee8 	bl	8000528 <_linear_combination>
			add_vectors(temp + (i*O + j)*M, vec,temp + (i*O + j)*M);
 8000758:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800075c:	f103 0318 	add.w	r3, r3, #24
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	441a      	add	r2, r3
 8000768:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800076c:	f103 0314 	add.w	r3, r3, #20
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	441a      	add	r2, r3
 8000774:	4613      	mov	r3, r2
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	461a      	mov	r2, r3
 800077e:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 8000782:	1898      	adds	r0, r3, r2
 8000784:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000788:	f103 0318 	add.w	r3, r3, #24
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	441a      	add	r2, r3
 8000794:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000798:	f103 0314 	add.w	r3, r3, #20
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	441a      	add	r2, r3
 80007a0:	4613      	mov	r3, r2
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	461a      	mov	r2, r3
 80007aa:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 80007ae:	441a      	add	r2, r3
 80007b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b4:	3b10      	subs	r3, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	f7ff fe56 	bl	8000468 <add_vectors>
			trigger = 0;
 80007bc:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <computeP2+0x3d4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < O; ++j)
 80007c2:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80007c6:	f103 0314 	add.w	r3, r3, #20
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80007d2:	f102 0214 	add.w	r2, r2, #20
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80007dc:	f103 0314 	add.w	r3, r3, #20
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	f77f af74 	ble.w	80006d0 <computeP2+0x68>
		}
		p1_counter += (N-O-i);
 80007e8:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80007ec:	f103 0318 	add.w	r3, r3, #24
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f1c3 031d 	rsb	r3, r3, #29
 80007f6:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80007fa:	f102 021c 	add.w	r2, r2, #28
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4413      	add	r3, r2
 8000802:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000806:	f102 021c 	add.w	r2, r2, #28
 800080a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < N-O; ++i)
 800080c:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000810:	f103 0318 	add.w	r3, r3, #24
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 800081c:	f102 0218 	add.w	r2, r2, #24
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000826:	f103 0318 	add.w	r3, r3, #24
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b1c      	cmp	r3, #28
 800082e:	f77f af48 	ble.w	80006c2 <computeP2+0x5a>
	}

	for (int i = 0; i < N-O; ++i)
 8000832:	2300      	movs	r3, #0
 8000834:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000838:	f102 0210 	add.w	r2, r2, #16
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e06d      	b.n	800091c <computeP2+0x2b4>
	{
		// P1' part
		for (int j = 0; j < O; j++)
 8000840:	2300      	movs	r3, #0
 8000842:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000846:	f102 020c 	add.w	r2, r2, #12
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	e054      	b.n	80008f8 <computeP2+0x290>
		{
			add_vectors(temp + (i*O + j)*M, P1 + p1_counter*M, temp + (i*O + j)*M);
 800084e:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000852:	f103 0310 	add.w	r3, r3, #16
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	441a      	add	r2, r3
 800085e:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000862:	f103 030c 	add.w	r3, r3, #12
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	441a      	add	r2, r3
 800086a:	4613      	mov	r3, r2
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	1a9b      	subs	r3, r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 8000878:	1898      	adds	r0, r3, r2
 800087a:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800087e:	f103 031c 	add.w	r3, r3, #28
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4613      	mov	r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	461a      	mov	r2, r3
 800088e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000892:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1899      	adds	r1, r3, r2
 800089a:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800089e:	f103 0310 	add.w	r3, r3, #16
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	441a      	add	r2, r3
 80008aa:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80008ae:	f103 030c 	add.w	r3, r3, #12
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	441a      	add	r2, r3
 80008b6:	4613      	mov	r3, r2
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	1a9b      	subs	r3, r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	461a      	mov	r2, r3
 80008c0:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 80008c4:	4413      	add	r3, r2
 80008c6:	461a      	mov	r2, r3
 80008c8:	f7ff fdce 	bl	8000468 <add_vectors>
			p1_counter ++;
 80008cc:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80008d0:	f103 031c 	add.w	r3, r3, #28
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80008dc:	f102 021c 	add.w	r2, r2, #28
 80008e0:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < O; j++)
 80008e2:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80008e6:	f103 030c 	add.w	r3, r3, #12
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80008f2:	f102 020c 	add.w	r2, r2, #12
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80008fc:	f103 030c 	add.w	r3, r3, #12
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b02      	cmp	r3, #2
 8000904:	dda3      	ble.n	800084e <computeP2+0x1e6>
	for (int i = 0; i < N-O; ++i)
 8000906:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800090a:	f103 0310 	add.w	r3, r3, #16
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000916:	f102 0210 	add.w	r2, r2, #16
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000920:	f103 0310 	add.w	r3, r3, #16
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b1c      	cmp	r3, #28
 8000928:	dd8a      	ble.n	8000840 <computeP2+0x1d8>
		}
	}

	// permute Temp
	unsigned char tempt[M*(N-O)*O] = {0};
 800092a:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800092e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	3304      	adds	r3, #4
 8000938:	f640 222e 	movw	r2, #2606	; 0xa2e
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fd24 	bl	800038c <memset>

	for (int i = 0; i < O; ++i)
 8000944:	2300      	movs	r3, #0
 8000946:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 800094a:	f102 0208 	add.w	r2, r2, #8
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	e056      	b.n	8000a00 <computeP2+0x398>
	{
		for(int j=0; j< N-O; j++){
 8000952:	2300      	movs	r3, #0
 8000954:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000958:	f102 0204 	add.w	r2, r2, #4
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e03d      	b.n	80009dc <computeP2+0x374>
			memcpy(tempt + ((i*(N-O) + j)*M), temp + ((j*O+i)*M), M);
 8000960:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000964:	f103 0308 	add.w	r3, r3, #8
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	441a      	add	r2, r3
 8000974:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000978:	f103 0304 	add.w	r3, r3, #4
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	441a      	add	r2, r3
 8000980:	4613      	mov	r3, r2
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	461a      	mov	r2, r3
 800098a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098e:	3b10      	subs	r3, #16
 8000990:	1898      	adds	r0, r3, r2
 8000992:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000996:	f103 0304 	add.w	r3, r3, #4
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	441a      	add	r2, r3
 80009a2:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80009a6:	f103 0308 	add.w	r3, r3, #8
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	441a      	add	r2, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	461a      	mov	r2, r3
 80009b8:	f607 2384 	addw	r3, r7, #2692	; 0xa84
 80009bc:	4413      	add	r3, r2
 80009be:	221e      	movs	r2, #30
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fc49 	bl	8000258 <memcpy>
		for(int j=0; j< N-O; j++){
 80009c6:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80009ca:	f103 0304 	add.w	r3, r3, #4
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80009d6:	f102 0204 	add.w	r2, r2, #4
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80009e0:	f103 0304 	add.w	r3, r3, #4
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b1c      	cmp	r3, #28
 80009e8:	ddba      	ble.n	8000960 <computeP2+0x2f8>
	for (int i = 0; i < O; ++i)
 80009ea:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 80009ee:	f103 0308 	add.w	r3, r3, #8
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 80009fa:	f102 0208 	add.w	r2, r2, #8
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000a04:	f103 0308 	add.w	r3, r3, #8
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	dda1      	ble.n	8000952 <computeP2+0x2ea>
		}
	}

	int counter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000a14:	6013      	str	r3, [r2, #0]
	// compute O*Temp;
	for (int i = 0; i < O; ++i)
 8000a16:	2300      	movs	r3, #0
 8000a18:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000a1c:	f102 021c 	add.w	r2, r2, #28
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e0c4      	b.n	8000bae <computeP2+0x546>
	{
		for (int j = i; j < O; ++j)
 8000a24:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000a28:	f103 031c 	add.w	r3, r3, #28
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000a32:	f102 0218 	add.w	r2, r2, #24
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e0a6      	b.n	8000b88 <computeP2+0x520>
 8000a3a:	bf00      	nop
 8000a3c:	20003db0 	.word	0x20003db0
		{
			_linear_combination(tempt + (j*(N-O))*M, oil_space + i*(N-O), N-O, P2 + counter*M);
 8000a40:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000a44:	f103 0318 	add.w	r3, r3, #24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f240 3266 	movw	r2, #870	; 0x366
 8000a4e:	fb02 f303 	mul.w	r3, r2, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a58:	3b10      	subs	r3, #16
 8000a5a:	1898      	adds	r0, r3, r2
 8000a5c:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000a60:	f103 031c 	add.w	r3, r3, #28
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000a76:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1899      	adds	r1, r3, r2
 8000a7e:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4613      	mov	r3, r2
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000a92:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	221d      	movs	r2, #29
 8000a9c:	f7ff fd44 	bl	8000528 <_linear_combination>

			if(j!= i){
 8000aa0:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000aa4:	f103 0318 	add.w	r3, r3, #24
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000aae:	f103 031c 	add.w	r3, r3, #28
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d055      	beq.n	8000b64 <computeP2+0x4fc>
				unsigned char vec[M] = {0};
 8000ab8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000abc:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	831a      	strh	r2, [r3, #24]
				_linear_combination(tempt + (i*(N-O))*M, oil_space + j*(N-O), N-O, vec);
 8000ad6:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000ada:	f103 031c 	add.w	r3, r3, #28
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f240 3266 	movw	r2, #870	; 0x366
 8000ae4:	fb02 f303 	mul.w	r3, r2, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000aee:	3b10      	subs	r3, #16
 8000af0:	1898      	adds	r0, r3, r2
 8000af2:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000af6:	f103 0318 	add.w	r3, r3, #24
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4613      	mov	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000b0c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1899      	adds	r1, r3, r2
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	3b10      	subs	r3, #16
 8000b1a:	221d      	movs	r2, #29
 8000b1c:	f7ff fd04 	bl	8000528 <_linear_combination>
				add_vectors(P2 + counter*M, vec, P2 + counter*M);
 8000b20:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000b34:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	1898      	adds	r0, r3, r2
 8000b3c:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4613      	mov	r3, r2
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000b50:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	441a      	add	r2, r3
 8000b58:	f107 0320 	add.w	r3, r7, #32
 8000b5c:	3b10      	subs	r3, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f7ff fc82 	bl	8000468 <add_vectors>
			}
			counter ++;
 8000b64:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f507 52a6 	add.w	r2, r7, #5312	; 0x14c0
 8000b70:	6013      	str	r3, [r2, #0]
		for (int j = i; j < O; ++j)
 8000b72:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000b76:	f103 0318 	add.w	r3, r3, #24
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000b82:	f102 0218 	add.w	r2, r2, #24
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000b8c:	f103 0318 	add.w	r3, r3, #24
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	f77f af54 	ble.w	8000a40 <computeP2+0x3d8>
	for (int i = 0; i < O; ++i)
 8000b98:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000b9c:	f103 031c 	add.w	r3, r3, #28
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	f507 52a5 	add.w	r2, r7, #5280	; 0x14a0
 8000ba8:	f102 021c 	add.w	r2, r2, #28
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 8000bb2:	f103 031c 	add.w	r3, r3, #28
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	f77f af33 	ble.w	8000a24 <computeP2+0x3bc>
		}
	}

	// P2 = -P2
	negate(P2,P2_BYTES);
 8000bbe:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000bc2:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8000bc6:	21b4      	movs	r1, #180	; 0xb4
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f7ff fc7f 	bl	80004cc <negate>
}
 8000bce:	bf00      	nop
 8000bd0:	f507 57a7 	add.w	r7, r7, #5344	; 0x14e0
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <mayo_trace>:
// uint8_t uov_trace(uint8_t *in)
// {

// uint8_t uov_trace(uint8_t* pw, uint8_t len)
uint8_t mayo_trace()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	f6ad 3d68 	subw	sp, sp, #2920	; 0xb68
 8000bde:	af00      	add	r7, sp, #0
    // C = 10;
    unsigned char out[M] = {0};
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
 8000be6:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	831a      	strh	r2, [r3, #24]
	unsigned char bilinear[M*(N-O)*O] = {0};
 8000bfa:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8000bfe:	f6a3 2358 	subw	r3, r3, #2648	; 0xa58
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	3304      	adds	r3, #4
 8000c08:	f640 222e 	movw	r2, #2606	; 0xa2e
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fbbc 	bl	800038c <memset>
	unsigned char P2[M*O*O] = {0};
 8000c14:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8000c18:	f6a3 3368 	subw	r3, r3, #2920	; 0xb68
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	3304      	adds	r3, #4
 8000c22:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fbaf 	bl	800038c <memset>

    //for (_ in range(10))
    //{
    //_linear_combination(P1, oilspace, N-O, out);
    //compute_bilinear_part(ptr_P1, oilspace, bilinear);
	for (int i = 0; i < 200; ++i)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
 8000c34:	e00a      	b.n	8000c4c <mayo_trace+0x74>
	{
		computeP2(oilspace, P1, P2);
 8000c36:	463b      	mov	r3, r7
 8000c38:	461a      	mov	r2, r3
 8000c3a:	490b      	ldr	r1, [pc, #44]	; (8000c68 <mayo_trace+0x90>)
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <mayo_trace+0x94>)
 8000c3e:	f7ff fd13 	bl	8000668 <computeP2>
	for (int i = 0; i < 200; ++i)
 8000c42:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8000c46:	3301      	adds	r3, #1
 8000c48:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
 8000c4c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8000c50:	2bc7      	cmp	r3, #199	; 0xc7
 8000c52:	ddf0      	ble.n	8000c36 <mayo_trace+0x5e>
		
    //}
    
    
    // send 'e' for end of trace
    putch('e');
 8000c54:	2065      	movs	r0, #101	; 0x65
 8000c56:	f000 fbd5 	bl	8001404 <putch>
    
    //putString(y, _O1_BYTE);

    return 1;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f607 3768 	addw	r7, r7, #2920	; 0xb68
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20003d2c 	.word	0x20003d2c

08000c70 <main>:

int main(void)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
    platform_init();
 8000c76:	f000 fac3 	bl	8001200 <platform_init>
    init_uart();
 8000c7a:	f000 fb13 	bl	80012a4 <init_uart>
    trigger_setup();
 8000c7e:	f000 fb61 	bl	8001344 <trigger_setup>

    unsigned char Hello[] = "Hello from the other side!";
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <main+0x44>)
 8000c84:	1d3c      	adds	r4, r7, #4
 8000c86:	461d      	mov	r5, r3
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	c403      	stmia	r4!, {r0, r1}
 8000c92:	8022      	strh	r2, [r4, #0]
 8000c94:	3402      	adds	r4, #2
 8000c96:	0c13      	lsrs	r3, r2, #16
 8000c98:	7023      	strb	r3, [r4, #0]
    putString(Hello, 26);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	211a      	movs	r1, #26
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fbc6 	bl	8000430 <putString>

    simpleserial_init();
 8000ca4:	f000 f924 	bl	8000ef0 <simpleserial_init>

    //for n in range(256)
    mayo_trace();
 8000ca8:	f7ff ff96 	bl	8000bd8 <mayo_trace>


    while (1)
         simpleserial_get();
 8000cac:	f000 f990 	bl	8000fd0 <simpleserial_get>
 8000cb0:	e7fc      	b.n	8000cac <main+0x3c>
 8000cb2:	bf00      	nop
 8000cb4:	08003374 	.word	0x08003374

08000cb8 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <ss_num_commands+0x2c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 8000ce4:	f107 030f 	add.w	r3, r7, #15
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2101      	movs	r1, #1
 8000cec:	2072      	movs	r0, #114	; 0x72
 8000cee:	f000 fa51 	bl	8001194 <simpleserial_put>
    return 0x00;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20003db4 	.word	0x20003db4

08000d00 <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d12:	e037      	b.n	8000d84 <ss_get_commands+0x84>
        repr_cmd_buf[i].c = commands[i].c;
 8000d14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d18:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d1c:	4926      	ldr	r1, [pc, #152]	; (8000db8 <ss_get_commands+0xb8>)
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	440b      	add	r3, r1
 8000d22:	7819      	ldrb	r1, [r3, #0]
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	3340      	adds	r3, #64	; 0x40
 8000d2c:	443b      	add	r3, r7
 8000d2e:	3b34      	subs	r3, #52	; 0x34
 8000d30:	460a      	mov	r2, r1
 8000d32:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 8000d34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d38:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <ss_get_commands+0xb8>)
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3304      	adds	r3, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d46:	b2d9      	uxtb	r1, r3
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3340      	adds	r3, #64	; 0x40
 8000d50:	443b      	add	r3, r7
 8000d52:	3b33      	subs	r3, #51	; 0x33
 8000d54:	460a      	mov	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d5c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d60:	4915      	ldr	r1, [pc, #84]	; (8000db8 <ss_get_commands+0xb8>)
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	440b      	add	r3, r1
 8000d66:	330c      	adds	r3, #12
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	3340      	adds	r3, #64	; 0x40
 8000d72:	443b      	add	r3, r7
 8000d74:	3b32      	subs	r3, #50	; 0x32
 8000d76:	460a      	mov	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d7e:	3301      	adds	r3, #1
 8000d80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000d84:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <ss_get_commands+0xbc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dbc0      	blt.n	8000d14 <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <ss_get_commands+0xbc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	0052      	lsls	r2, r2, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f107 020c 	add.w	r2, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	2072      	movs	r0, #114	; 0x72
 8000da8:	f000 f9f4 	bl	8001194 <simpleserial_put>
    return 0x00;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20003db8 	.word	0x20003db8
 8000dbc:	20003db4 	.word	0x20003db4

08000dc0 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e083      	b.n	8000eda <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	3301      	adds	r3, #1
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 8000dee:	7cbb      	ldrb	r3, [r7, #18]
 8000df0:	2b2f      	cmp	r3, #47	; 0x2f
 8000df2:	d90a      	bls.n	8000e0a <hex_decode+0x4a>
 8000df4:	7cbb      	ldrb	r3, [r7, #18]
 8000df6:	2b39      	cmp	r3, #57	; 0x39
 8000df8:	d807      	bhi.n	8000e0a <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	7cba      	ldrb	r2, [r7, #18]
 8000e02:	3a30      	subs	r2, #48	; 0x30
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e01d      	b.n	8000e46 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8000e0a:	7cbb      	ldrb	r3, [r7, #18]
 8000e0c:	2b40      	cmp	r3, #64	; 0x40
 8000e0e:	d90a      	bls.n	8000e26 <hex_decode+0x66>
 8000e10:	7cbb      	ldrb	r3, [r7, #18]
 8000e12:	2b46      	cmp	r3, #70	; 0x46
 8000e14:	d807      	bhi.n	8000e26 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	7cba      	ldrb	r2, [r7, #18]
 8000e1e:	3a37      	subs	r2, #55	; 0x37
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e00f      	b.n	8000e46 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000e26:	7cbb      	ldrb	r3, [r7, #18]
 8000e28:	2b60      	cmp	r3, #96	; 0x60
 8000e2a:	d90a      	bls.n	8000e42 <hex_decode+0x82>
 8000e2c:	7cbb      	ldrb	r3, [r7, #18]
 8000e2e:	2b66      	cmp	r3, #102	; 0x66
 8000e30:	d807      	bhi.n	8000e42 <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	7cba      	ldrb	r2, [r7, #18]
 8000e3a:	3a57      	subs	r2, #87	; 0x57
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e001      	b.n	8000e46 <hex_decode+0x86>
		else
			return 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e04f      	b.n	8000ee6 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 8000e46:	7cfb      	ldrb	r3, [r7, #19]
 8000e48:	2b2f      	cmp	r3, #47	; 0x2f
 8000e4a:	d913      	bls.n	8000e74 <hex_decode+0xb4>
 8000e4c:	7cfb      	ldrb	r3, [r7, #19]
 8000e4e:	2b39      	cmp	r3, #57	; 0x39
 8000e50:	d810      	bhi.n	8000e74 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	7cfb      	ldrb	r3, [r7, #19]
 8000e5e:	3b30      	subs	r3, #48	; 0x30
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b259      	sxtb	r1, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e02f      	b.n	8000ed4 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8000e74:	7cfb      	ldrb	r3, [r7, #19]
 8000e76:	2b40      	cmp	r3, #64	; 0x40
 8000e78:	d913      	bls.n	8000ea2 <hex_decode+0xe2>
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	2b46      	cmp	r3, #70	; 0x46
 8000e7e:	d810      	bhi.n	8000ea2 <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	7cfb      	ldrb	r3, [r7, #19]
 8000e8c:	3b37      	subs	r3, #55	; 0x37
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b259      	sxtb	r1, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e018      	b.n	8000ed4 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	2b60      	cmp	r3, #96	; 0x60
 8000ea6:	d913      	bls.n	8000ed0 <hex_decode+0x110>
 8000ea8:	7cfb      	ldrb	r3, [r7, #19]
 8000eaa:	2b66      	cmp	r3, #102	; 0x66
 8000eac:	d810      	bhi.n	8000ed0 <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	7cfb      	ldrb	r3, [r7, #19]
 8000eba:	3b57      	subs	r3, #87	; 0x57
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b259      	sxtb	r1, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e001      	b.n	8000ed4 <hex_decode+0x114>
		else
			return 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e008      	b.n	8000ee6 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	f6ff af77 	blt.w	8000dd2 <hex_decode+0x12>
	}

	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <simpleserial_init+0x28>)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2076      	movs	r0, #118	; 0x76
 8000efa:	f000 f813 	bl	8000f24 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <simpleserial_init+0x2c>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	2077      	movs	r0, #119	; 0x77
 8000f04:	f000 f80e 	bl	8000f24 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 8000f08:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <simpleserial_init+0x30>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2079      	movs	r0, #121	; 0x79
 8000f0e:	f000 f809 	bl	8000f24 <simpleserial_addcmd>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	08000cb9 	.word	0x08000cb9
 8000f1c:	08000d01 	.word	0x08000d01
 8000f20:	08000cd1 	.word	0x08000cd1

08000f24 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8000f32:	7bf8      	ldrb	r0, [r7, #15]
 8000f34:	2300      	movs	r3, #0
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	f000 f805 	bl	8000f48 <simpleserial_addcmd_flags>
 8000f3e:	4603      	mov	r3, r0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	dd01      	ble.n	8000f68 <simpleserial_addcmd_flags+0x20>
		return 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e029      	b.n	8000fbc <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d901      	bls.n	8000f72 <simpleserial_addcmd_flags+0x2a>
		return 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e024      	b.n	8000fbc <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <simpleserial_addcmd_flags+0x84>)
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <simpleserial_addcmd_flags+0x84>)
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <simpleserial_addcmd_flags+0x84>)
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <simpleserial_addcmd_flags+0x84>)
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	330c      	adds	r3, #12
 8000fac:	7bba      	ldrb	r2, [r7, #14]
 8000fae:	701a      	strb	r2, [r3, #0]
	num_commands++;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <simpleserial_addcmd_flags+0x80>)
 8000fb8:	6013      	str	r3, [r2, #0]

	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20003db4 	.word	0x20003db4
 8000fcc:	20003db8 	.word	0x20003db8

08000fd0 <simpleserial_get>:

void simpleserial_get(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8000fd6:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8000fd8:	f000 f9f6 	bl	80013c8 <getch>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8000fe8:	e00e      	b.n	8001008 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 8000fea:	4a68      	ldr	r2, [pc, #416]	; (800118c <simpleserial_get+0x1bc>)
 8000fec:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d00b      	beq.n	8001016 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000ffe:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001002:	3301      	adds	r3, #1
 8001004:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001008:	4b61      	ldr	r3, [pc, #388]	; (8001190 <simpleserial_get+0x1c0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8001010:	429a      	cmp	r2, r3
 8001012:	dbea      	blt.n	8000fea <simpleserial_get+0x1a>
 8001014:	e000      	b.n	8001018 <simpleserial_get+0x48>
			break;
 8001016:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8001018:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <simpleserial_get+0x1c0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8001020:	429a      	cmp	r2, r3
 8001022:	f000 80a6 	beq.w	8001172 <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8001026:	4a59      	ldr	r2, [pc, #356]	; (800118c <simpleserial_get+0x1bc>)
 8001028:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	330c      	adds	r3, #12
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d02d      	beq.n	8001098 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 800103c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001040:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 8001048:	f000 f9be 	bl	80013c8 <getch>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001054:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8001058:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 800105a:	f000 f9b5 	bl	80013c8 <getch>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001066:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800106a:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 800106c:	1dfa      	adds	r2, r7, #7
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff fea4 	bl	8000dc0 <hex_decode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d17b      	bne.n	8001176 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 800107e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001082:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <simpleserial_get+0x1bc>)
 800108c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	3304      	adds	r3, #4
 8001096:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800109e:	e01b      	b.n	80010d8 <simpleserial_get+0x108>
	{
		c = getch();
 80010a0:	f000 f992 	bl	80013c8 <getch>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

		// Check for early \n
		if(c == '\n' || c == '\r')
 80010aa:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d063      	beq.n	800117a <simpleserial_get+0x1aa>
 80010b2:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80010b6:	2b0d      	cmp	r3, #13
 80010b8:	d05f      	beq.n	800117a <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 80010ba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80010be:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80010c2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80010c6:	4413      	add	r3, r2
 80010c8:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 80010cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80010ce:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80010d2:	3301      	adds	r3, #1
 80010d4:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80010d8:	4a2c      	ldr	r2, [pc, #176]	; (800118c <simpleserial_get+0x1bc>)
 80010da:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	3304      	adds	r3, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	005a      	lsls	r2, r3, #1
 80010e8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8d7      	bhi.n	80010a0 <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 80010f0:	f000 f96a 	bl	80013c8 <getch>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	if(c != '\n' && c != '\r')
 80010fa:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d003      	beq.n	800110a <simpleserial_get+0x13a>
 8001102:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8001106:	2b0d      	cmp	r3, #13
 8001108:	d139      	bne.n	800117e <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800110a:	4a20      	ldr	r2, [pc, #128]	; (800118c <simpleserial_get+0x1bc>)
 800110c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	3304      	adds	r3, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fe4c 	bl	8000dc0 <hex_decode>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d129      	bne.n	8001182 <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <simpleserial_get+0x1bc>)
 8001130:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	3308      	adds	r3, #8
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4913      	ldr	r1, [pc, #76]	; (800118c <simpleserial_get+0x1bc>)
 800113e:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	440a      	add	r2, r1
 8001146:	3204      	adds	r2, #4
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	b2d1      	uxtb	r1, r2
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	4610      	mov	r0, r2
 8001152:	4798      	blx	r3
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800115c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001160:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	461a      	mov	r2, r3
 8001168:	2101      	movs	r1, #1
 800116a:	207a      	movs	r0, #122	; 0x7a
 800116c:	f000 f812 	bl	8001194 <simpleserial_put>
 8001170:	e008      	b.n	8001184 <simpleserial_get+0x1b4>
		return;
 8001172:	bf00      	nop
 8001174:	e006      	b.n	8001184 <simpleserial_get+0x1b4>
			return;
 8001176:	bf00      	nop
 8001178:	e004      	b.n	8001184 <simpleserial_get+0x1b4>
			return;
 800117a:	bf00      	nop
 800117c:	e002      	b.n	8001184 <simpleserial_get+0x1b4>
		return;
 800117e:	bf00      	nop
 8001180:	e000      	b.n	8001184 <simpleserial_get+0x1b4>
		return;
 8001182:	bf00      	nop
#endif
}
 8001184:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20003db8 	.word	0x20003db8
 8001190:	20003db4 	.word	0x20003db4

08001194 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	603a      	str	r2, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	460b      	mov	r3, r1
 80011a2:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f92c 	bl	8001404 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e019      	b.n	80011e6 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <simpleserial_put+0x68>)
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f91d 	bl	8001404 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <simpleserial_put+0x68>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f912 	bl	8001404 <putch>
	for(int i = 0; i < size; i++)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbe1      	blt.n	80011b2 <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 80011ee:	200a      	movs	r0, #10
 80011f0:	f000 f908 	bl	8001404 <putch>
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20003d84 	.word	0x20003d84

08001200 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8001206:	2303      	movs	r3, #3
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800120a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f925 	bl	800146c <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001222:	230f      	movs	r3, #15
 8001224:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001226:	2301      	movs	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
     uint32_t flash_latency = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001240:	4618      	mov	r0, r3
 8001242:	f001 f929 	bl	8002498 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <platform_init+0x9c>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <platform_init+0x9c>)
 800124c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <platform_init+0x9c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 800125e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001262:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <platform_init+0xa0>)
 8001276:	f001 fa99 	bl	80027ac <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <platform_init+0xa0>)
 8001282:	f001 fc11 	bl	8002aa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <platform_init+0xa0>)
 800128e:	f001 fc0b 	bl	8002aa8 <HAL_GPIO_WritePin>
#endif
}
 8001292:	bf00      	nop
 8001294:	3758      	adds	r7, #88	; 0x58
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000800 	.word	0x48000800

080012a4 <init_uart>:

void init_uart(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80012aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ae:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <init_uart+0x94>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <init_uart+0x94>)
 80012c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ca:	6153      	str	r3, [r2, #20]
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <init_uart+0x94>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f001 fa63 	bl	80027ac <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <init_uart+0x98>)
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <init_uart+0x9c>)
 80012ea:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <init_uart+0x98>)
 80012ee:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012f2:	605a      	str	r2, [r3, #4]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <init_uart+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <init_uart+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <init_uart+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <init_uart+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <init_uart+0x98>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <init_uart+0x94>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <init_uart+0x94>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <init_uart+0x94>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <init_uart+0x98>)
 800132c:	f001 fe1d 	bl	8002f6a <HAL_UART_Init>
}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	20003eb8 	.word	0x20003eb8
 8001340:	40013800 	.word	0x40013800

08001344 <trigger_setup>:

void trigger_setup(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <trigger_setup+0x54>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <trigger_setup+0x54>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <trigger_setup+0x54>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f001 fa16 	bl	80027ac <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f001 fb8d 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <trigger_high>:

void trigger_high(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f001 fb7d 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <trigger_low>:

void trigger_low(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f001 fb72 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <getch>:

char getch(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80013ce:	e005      	b.n	80013dc <getch+0x14>
    USART1->ICR |= (1 << 3);
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <getch+0x34>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <getch+0x34>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80013dc:	1df9      	adds	r1, r7, #7
 80013de:	f241 3388 	movw	r3, #5000	; 0x1388
 80013e2:	2201      	movs	r2, #1
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <getch+0x38>)
 80013e6:	f001 fede 	bl	80031a6 <HAL_UART_Receive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1ef      	bne.n	80013d0 <getch+0x8>
  //putch(d);
  return d;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40013800 	.word	0x40013800
 8001400:	20003eb8 	.word	0x20003eb8

08001404 <putch>:

void putch(char c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001412:	f107 010f 	add.w	r1, r7, #15
 8001416:	f241 3388 	movw	r3, #5000	; 0x1388
 800141a:	2201      	movs	r2, #1
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <putch+0x28>)
 800141e:	f001 fe35 	bl	800308c <HAL_UART_Transmit>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20003eb8 	.word	0x20003eb8

08001430 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_GetTick+0x18>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_GetTick+0x18>)
 800143c:	600a      	str	r2, [r1, #0]
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20003f28 	.word	0x20003f28

0800144c <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	return F_CPU;
 8001450:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return F_CPU;
 8001460:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001472:	af00      	add	r7, sp, #0
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147c:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8180 	beq.w	800179a <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800149a:	4bbe      	ldr	r3, [pc, #760]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d00c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a6:	4bbb      	ldr	r3, [pc, #748]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d15d      	bne.n	800156e <HAL_RCC_OscConfig+0x102>
 80014b2:	4bb8      	ldr	r3, [pc, #736]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014be:	d156      	bne.n	800156e <HAL_RCC_OscConfig+0x102>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80014d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d102      	bne.n	80014f2 <HAL_RCC_OscConfig+0x86>
 80014ec:	4ba9      	ldr	r3, [pc, #676]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0xb2>
 80014f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800150a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800150e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800151a:	4b9e      	ldr	r3, [pc, #632]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001522:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001526:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800152a:	fa92 f2a2 	rbit	r2, r2
 800152e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001532:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001536:	fab2 f282 	clz	r2, r2
 800153a:	b252      	sxtb	r2, r2
 800153c:	f042 0220 	orr.w	r2, r2, #32
 8001540:	b252      	sxtb	r2, r2
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f002 021f 	and.w	r2, r2, #31
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8121 	beq.w	8001798 <HAL_RCC_OscConfig+0x32c>
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 8118 	bne.w	8001798 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	f000 bf8c 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x122>
 8001580:	4b84      	ldr	r3, [pc, #528]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a83      	ldr	r2, [pc, #524]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e036      	b.n	80015fc <HAL_RCC_OscConfig+0x190>
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14c>
 800159e:	4b7d      	ldr	r3, [pc, #500]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7c      	ldr	r2, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a79      	ldr	r2, [pc, #484]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e021      	b.n	80015fc <HAL_RCC_OscConfig+0x190>
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x178>
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a71      	ldr	r2, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0x190>
 80015e4:	4b6b      	ldr	r3, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b68      	ldr	r3, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a67      	ldr	r2, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f023 020f 	bic.w	r2, r3, #15
 8001604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4960      	ldr	r1, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 8001612:	4313      	orrs	r3, r2
 8001614:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d05a      	beq.n	80016dc <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff ff03 	bl	8001430 <HAL_GetTick>
 800162a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fefe 	bl	8001430 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b64      	cmp	r3, #100	; 0x64
 800163e:	d902      	bls.n	8001646 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	f000 bf20 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
 8001646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800165a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0x20c>
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	e015      	b.n	80016a4 <HAL_RCC_OscConfig+0x238>
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800168c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001690:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001694:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016a0:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80016ac:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80016b0:	fa92 f2a2 	rbit	r2, r2
 80016b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80016b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016bc:	fab2 f282 	clz	r2, r2
 80016c0:	b252      	sxtb	r2, r2
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	b252      	sxtb	r2, r2
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f002 021f 	and.w	r2, r2, #31
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0aa      	beq.n	8001630 <HAL_RCC_OscConfig+0x1c4>
 80016da:	e05e      	b.n	800179a <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fea8 	bl	8001430 <HAL_GetTick>
 80016e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e6:	f7ff fea3 	bl	8001430 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d902      	bls.n	80016fc <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	f000 bec5 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
 80016fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001700:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001710:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <HAL_RCC_OscConfig+0x2c2>
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x2ee>
 800172e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001732:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001746:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800174a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_RCC_OscConfig+0x328>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001762:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800176e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b252      	sxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b252      	sxtb	r2, r2
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1aa      	bne.n	80016e6 <HAL_RCC_OscConfig+0x27a>
 8001790:	e003      	b.n	800179a <HAL_RCC_OscConfig+0x32e>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 817e 	beq.w	8001aac <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017b0:	4ba6      	ldr	r3, [pc, #664]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017bc:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d173      	bne.n	80018b0 <HAL_RCC_OscConfig+0x444>
 80017c8:	4ba0      	ldr	r3, [pc, #640]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d16d      	bne.n	80018b0 <HAL_RCC_OscConfig+0x444>
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80017e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	095b      	lsrs	r3, r3, #5
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d102      	bne.n	8001804 <HAL_RCC_OscConfig+0x398>
 80017fe:	4b93      	ldr	r3, [pc, #588]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	e013      	b.n	800182c <HAL_RCC_OscConfig+0x3c0>
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800181c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2202      	movs	r2, #2
 800182e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001832:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001836:	fa92 f2a2 	rbit	r2, r2
 800183a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800183e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b252      	sxtb	r2, r2
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	b252      	sxtb	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <HAL_RCC_OscConfig+0x40a>
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f000 be08 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	23f8      	movs	r3, #248	; 0xf8
 800188c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800189c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	4968      	ldr	r1, [pc, #416]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e0fd      	b.n	8001aac <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8088 	beq.w	80019d2 <HAL_RCC_OscConfig+0x566>
 80018c2:	2301      	movs	r3, #1
 80018c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80018d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fda0 	bl	8001430 <HAL_GetTick>
 80018f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fd9b 	bl	8001430 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bdbd 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800191e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d102      	bne.n	800193c <HAL_RCC_OscConfig+0x4d0>
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e013      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001954:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2202      	movs	r2, #2
 8001966:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800196a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800196e:	fa92 f2a2 	rbit	r2, r2
 8001972:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001976:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800197a:	fab2 f282 	clz	r2, r2
 800197e:	b252      	sxtb	r2, r2
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	b252      	sxtb	r2, r2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	f002 021f 	and.w	r2, r2, #31
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ae      	beq.n	80018f6 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6959      	ldr	r1, [r3, #20]
 80019ac:	23f8      	movs	r3, #248	; 0xf8
 80019ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80019be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	4920      	ldr	r1, [pc, #128]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e06c      	b.n	8001aac <HAL_RCC_OscConfig+0x640>
 80019d2:	2301      	movs	r3, #1
 80019d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80019e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	461a      	mov	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fd18 	bl	8001430 <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fd13 	bl	8001430 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d902      	bls.n	8001a1c <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	f000 bd35 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001a2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d104      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5e4>
 8001a46:	4b01      	ldr	r3, [pc, #4]	; (8001a4c <HAL_RCC_OscConfig+0x5e0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e015      	b.n	8001a78 <HAL_RCC_OscConfig+0x60c>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a74:	4bc5      	ldr	r3, [pc, #788]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a7e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a82:	fa92 f2a2 	rbit	r2, r2
 8001a86:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001a8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a8e:	fab2 f282 	clz	r2, r2
 8001a92:	b252      	sxtb	r2, r2
 8001a94:	f042 0220 	orr.w	r2, r2, #32
 8001a98:	b252      	sxtb	r2, r2
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	f002 021f 	and.w	r2, r2, #31
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ac      	bne.n	8001a06 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 810a 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d073      	beq.n	8001bba <HAL_RCC_OscConfig+0x74e>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001ae4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4ba8      	ldr	r3, [pc, #672]	; (8001d90 <HAL_RCC_OscConfig+0x924>)
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	461a      	mov	r2, r3
 8001af6:	2301      	movs	r3, #1
 8001af8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff fc99 	bl	8001430 <HAL_GetTick>
 8001afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff fc94 	bl	8001430 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d902      	bls.n	8001b1a <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f000 bcb6 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b68:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b74:	2102      	movs	r1, #2
 8001b76:	6019      	str	r1, [r3, #0]
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f1a3 	rbit	r1, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b8e:	6019      	str	r1, [r3, #0]
  return(result);
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0a5      	beq.n	8001b04 <HAL_RCC_OscConfig+0x698>
 8001bb8:	e08d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x86a>
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bdc:	601a      	str	r2, [r3, #0]
  return(result);
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001be6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x924>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fc19 	bl	8001430 <HAL_GetTick>
 8001bfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc14 	bl	8001430 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d902      	bls.n	8001c1a <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f000 bc36 	b.w	8002486 <HAL_RCC_OscConfig+0x101a>
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c22:	2202      	movs	r2, #2
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c92:	2102      	movs	r1, #2
 8001c94:	6019      	str	r1, [r3, #0]
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f1a3 	rbit	r1, r3
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cac:	6019      	str	r1, [r3, #0]
  return(result);
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d196      	bne.n	8001c04 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 81a4 	beq.w	8002034 <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001d24:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_OscConfig+0x928>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_RCC_OscConfig+0x928>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <HAL_RCC_OscConfig+0x928>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d44:	f7ff fb74 	bl	8001430 <HAL_GetTick>
 8001d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff fb6f 	bl	8001430 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e391      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_OscConfig+0x928>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0ef      	beq.n	8001d4e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x92c>
 8001d7e:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a02      	ldr	r2, [pc, #8]	; (8001d8c <HAL_RCC_OscConfig+0x920>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	e03b      	b.n	8001e04 <HAL_RCC_OscConfig+0x998>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	10908120 	.word	0x10908120
 8001d94:	40007000 	.word	0x40007000
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x956>
 8001da8:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a7e      	ldr	r2, [pc, #504]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a7b      	ldr	r2, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e020      	b.n	8001e04 <HAL_RCC_OscConfig+0x998>
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x980>
 8001dd2:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a74      	ldr	r2, [pc, #464]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b72      	ldr	r3, [pc, #456]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a71      	ldr	r2, [pc, #452]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x998>
 8001dec:	4b6e      	ldr	r3, [pc, #440]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a6d      	ldr	r2, [pc, #436]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a6a      	ldr	r2, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8082 	beq.w	8001f1a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb0b 	bl	8001430 <HAL_GetTick>
 8001e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb06 	bl	8001430 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e326      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e40:	2202      	movs	r2, #2
 8001e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e7e:	601a      	str	r2, [r3, #0]
  return(result);
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xa38>
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	e013      	b.n	8001ecc <HAL_RCC_OscConfig+0xa60>
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eac:	2202      	movs	r2, #2
 8001eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed0:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	6011      	str	r1, [r2, #0]
 8001ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001edc:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	fa92 f1a2 	rbit	r1, r2
 8001ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eea:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001eee:	6011      	str	r1, [r2, #0]
  return(result);
 8001ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b252      	sxtb	r2, r2
 8001f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f04:	b252      	sxtb	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f002 021f 	and.w	r2, r2, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d083      	beq.n	8001e20 <HAL_RCC_OscConfig+0x9b4>
 8001f18:	e082      	b.n	8002020 <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fa89 	bl	8001430 <HAL_GetTick>
 8001f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff fa84 	bl	8001430 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e2a4      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f2a3 	rbit	r2, r3
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f68:	2202      	movs	r2, #2
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f82:	601a      	str	r2, [r3, #0]
  return(result);
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d104      	bne.n	8001fac <HAL_RCC_OscConfig+0xb40>
 8001fa2:	4b01      	ldr	r3, [pc, #4]	; (8001fa8 <HAL_RCC_OscConfig+0xb3c>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	e015      	b.n	8001fd4 <HAL_RCC_OscConfig+0xb68>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4bad      	ldr	r3, [pc, #692]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd8:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8001fdc:	2102      	movs	r1, #2
 8001fde:	6011      	str	r1, [r2, #0]
 8001fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe4:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	fa92 f1a2 	rbit	r1, r2
 8001fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ff6:	6011      	str	r1, [r2, #0]
  return(result);
 8001ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ffc:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b252      	sxtb	r2, r2
 8002008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200c:	b252      	sxtb	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f002 021f 	and.w	r2, r2, #31
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d181      	bne.n	8001f24 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002020:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b97      	ldr	r3, [pc, #604]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a96      	ldr	r2, [pc, #600]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 800202e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002032:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 821f 	beq.w	8002484 <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002046:	4b90      	ldr	r3, [pc, #576]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b08      	cmp	r3, #8
 8002050:	f000 8216 	beq.w	8002480 <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	f040 8166 	bne.w	8002332 <HAL_RCC_OscConfig+0xec6>
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800206e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800208a:	601a      	str	r2, [r3, #0]
  return(result);
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002094:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	2300      	movs	r3, #0
 80020a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff f9c1 	bl	8001430 <HAL_GetTick>
 80020ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f9bc 	bl	8001430 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a72      	ldr	r2, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0xe20>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1dd      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020ee:	601a      	str	r2, [r3, #0]
  return(result);
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0xca8>
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	e027      	b.n	8002164 <HAL_RCC_OscConfig+0xcf8>
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800211c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	4b49      	ldr	r3, [pc, #292]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002168:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800216c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002170:	6011      	str	r1, [r2, #0]
 8002172:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002176:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	fa92 f1a2 	rbit	r1, r2
 8002180:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002184:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002188:	6011      	str	r1, [r2, #0]
  return(result);
 800218a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b252      	sxtb	r2, r2
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	b252      	sxtb	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f002 021f 	and.w	r2, r2, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d180      	bne.n	80020b4 <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b2:	4b35      	ldr	r3, [pc, #212]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	492c      	ldr	r1, [pc, #176]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80021e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021fe:	601a      	str	r2, [r3, #0]
  return(result);
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002208:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002212:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	461a      	mov	r2, r3
 800221a:	2301      	movs	r3, #1
 800221c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff f907 	bl	8001430 <HAL_GetTick>
 8002222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f902 	bl	8001430 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a15      	ldr	r2, [pc, #84]	; (800228c <HAL_RCC_OscConfig+0xe20>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e123      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fa93 f2a3 	rbit	r2, r3
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002262:	601a      	str	r2, [r3, #0]
  return(result);
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800226c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0xe24>
 8002282:	4b01      	ldr	r3, [pc, #4]	; (8002288 <HAL_RCC_OscConfig+0xe1c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e02b      	b.n	80022e0 <HAL_RCC_OscConfig+0xe74>
 8002288:	40021000 	.word	0x40021000
 800228c:	00030d40 	.word	0x00030d40
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <HAL_RCC_OscConfig+0x1024>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e4:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80022e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f2:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fa92 f1a2 	rbit	r1, r2
 80022fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002300:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002304:	6011      	str	r1, [r2, #0]
  return(result);
 8002306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b252      	sxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b252      	sxtb	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f002 021f 	and.w	r2, r2, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	f43f af7c 	beq.w	8002228 <HAL_RCC_OscConfig+0xdbc>
 8002330:	e0a8      	b.n	8002484 <HAL_RCC_OscConfig+0x1018>
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800233a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800233e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002356:	601a      	str	r2, [r3, #0]
  return(result);
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002360:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800236a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff f85b 	bl	8001430 <HAL_GetTick>
 800237a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7ff f856 	bl	8001430 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	4a41      	ldr	r2, [pc, #260]	; (8002494 <HAL_RCC_OscConfig+0x1028>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e077      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800239e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023ba:	601a      	str	r2, [r3, #0]
  return(result);
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_OscConfig+0xf74>
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x1024>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	e027      	b.n	8002430 <HAL_RCC_OscConfig+0xfc4>
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fa93 f2a3 	rbit	r2, r3
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800240e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_RCC_OscConfig+0x1024>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002434:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8002438:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800243c:	6011      	str	r1, [r2, #0]
 800243e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002442:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fa92 f1a2 	rbit	r1, r2
 800244c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002450:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002454:	6011      	str	r1, [r2, #0]
  return(result);
 8002456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b252      	sxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b252      	sxtb	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d180      	bne.n	8002380 <HAL_RCC_OscConfig+0xf14>
 800247e:	e001      	b.n	8002484 <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	00030d40 	.word	0x00030d40

08002498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b09c      	sub	sp, #112	; 0x70
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024a6:	4b98      	ldr	r3, [pc, #608]	; (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d910      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b4:	4b94      	ldr	r3, [pc, #592]	; (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 0207 	bic.w	r2, r3, #7
 80024bc:	4992      	ldr	r1, [pc, #584]	; (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024c4:	4b90      	ldr	r3, [pc, #576]	; (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e15a      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e2:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4987      	ldr	r1, [pc, #540]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 810d 	beq.w	800271c <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d13d      	bne.n	8002586 <HAL_RCC_ClockConfig+0xee>
 800250a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8002518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d102      	bne.n	8002534 <HAL_RCC_ClockConfig+0x9c>
 800252e:	4b77      	ldr	r3, [pc, #476]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	e00f      	b.n	8002554 <HAL_RCC_ClockConfig+0xbc>
 8002534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002546:	65bb      	str	r3, [r7, #88]	; 0x58
 8002548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	657b      	str	r3, [r7, #84]	; 0x54
 8002550:	4b6e      	ldr	r3, [pc, #440]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002558:	653a      	str	r2, [r7, #80]	; 0x50
 800255a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8002562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b252      	sxtb	r2, r2
 800256a:	f042 0220 	orr.w	r2, r2, #32
 800256e:	b252      	sxtb	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f002 021f 	and.w	r2, r2, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d17d      	bne.n	800267e <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e102      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d13d      	bne.n	800260a <HAL_RCC_ClockConfig+0x172>
 800258e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800259c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x120>
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e00f      	b.n	80025d8 <HAL_RCC_ClockConfig+0x140>
 80025b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025dc:	633a      	str	r2, [r7, #48]	; 0x30
 80025de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e0:	fa92 f2a2 	rbit	r2, r2
 80025e4:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 80025e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e8:	fab2 f282 	clz	r2, r2
 80025ec:	b252      	sxtb	r2, r2
 80025ee:	f042 0220 	orr.w	r2, r2, #32
 80025f2:	b252      	sxtb	r2, r2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13b      	bne.n	800267e <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0c0      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
 800260a:	2302      	movs	r3, #2
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d102      	bne.n	8002632 <HAL_RCC_ClockConfig+0x19a>
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e00d      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	2302      	movs	r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2202      	movs	r2, #2
 8002650:	613a      	str	r2, [r7, #16]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	fa92 f2a2 	rbit	r2, r2
 8002658:	60fa      	str	r2, [r7, #12]
  return(result);
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b252      	sxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b252      	sxtb	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f002 021f 	and.w	r2, r2, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e086      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4920      	ldr	r1, [pc, #128]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7fe fece 	bl	8001430 <HAL_GetTick>
 8002694:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d112      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fec6 	bl	8001430 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06a      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x208>
 80026c2:	e02b      	b.n	800271c <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d121      	bne.n	8002710 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ce:	f7fe feaf 	bl	8001430 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e053      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x274>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_ClockConfig+0x236>
 80026f0:	e014      	b.n	800271c <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f2:	f7fe fe9d 	bl	8001430 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d905      	bls.n	8002710 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e041      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_ClockConfig+0x2fc>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ea      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_ClockConfig+0x300>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d210      	bcs.n	800274c <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_RCC_ClockConfig+0x300>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4919      	ldr	r1, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x300>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_RCC_ClockConfig+0x300>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e01f      	b.n	800278c <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x2fc>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	490b      	ldr	r1, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x2fc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCC_ClockConfig+0x2fc>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_ClockConfig+0x2fc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3770      	adds	r7, #112	; 0x70
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	40022000 	.word	0x40022000

0800279c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 80027a0:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80027c2:	e154      	b.n	8002a6e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8146 	beq.w	8002a68 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x40>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b12      	cmp	r3, #18
 80027ea:	d123      	bne.n	8002834 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d00b      	beq.n	8002888 <HAL_GPIO_Init+0xdc>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287c:	2b11      	cmp	r3, #17
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b12      	cmp	r3, #18
 8002886:	d130      	bne.n	80028ea <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028be:	2201      	movs	r2, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 0201 	and.w	r2, r3, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80a0 	beq.w	8002a68 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_GPIO_Init+0x2e0>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_GPIO_Init+0x2e0>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_GPIO_Init+0x2e0>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002940:	4a53      	ldr	r2, [pc, #332]	; (8002a90 <HAL_GPIO_Init+0x2e4>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800296a:	d019      	beq.n	80029a0 <HAL_GPIO_Init+0x1f4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <HAL_GPIO_Init+0x2e8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_GPIO_Init+0x1f0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a48      	ldr	r2, [pc, #288]	; (8002a98 <HAL_GPIO_Init+0x2ec>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00d      	beq.n	8002998 <HAL_GPIO_Init+0x1ec>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a47      	ldr	r2, [pc, #284]	; (8002a9c <HAL_GPIO_Init+0x2f0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <HAL_GPIO_Init+0x1e8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a46      	ldr	r2, [pc, #280]	; (8002aa0 <HAL_GPIO_Init+0x2f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_GPIO_Init+0x1e4>
 800298c:	2304      	movs	r3, #4
 800298e:	e008      	b.n	80029a2 <HAL_GPIO_Init+0x1f6>
 8002990:	2305      	movs	r3, #5
 8002992:	e006      	b.n	80029a2 <HAL_GPIO_Init+0x1f6>
 8002994:	2303      	movs	r3, #3
 8002996:	e004      	b.n	80029a2 <HAL_GPIO_Init+0x1f6>
 8002998:	2302      	movs	r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x1f6>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_GPIO_Init+0x1f6>
 80029a0:	2300      	movs	r3, #0
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	f002 0203 	and.w	r2, r2, #3
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029b2:	4937      	ldr	r1, [pc, #220]	; (8002a90 <HAL_GPIO_Init+0x2e4>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029e4:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a0e:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_GPIO_Init+0x2f8>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f aea3 	bne.w	80027c4 <HAL_GPIO_Init+0x18>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	48000400 	.word	0x48000400
 8002a98:	48000800 	.word	0x48000800
 8002a9c:	48000c00 	.word	0x48000c00
 8002aa0:	48001000 	.word	0x48001000
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	0000      	movs	r0, r0

08002ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b16:	f023 030c 	bic.w	r3, r3, #12
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4aa1      	ldr	r2, [pc, #644]	; (8002de4 <UART_SetConfig+0x30c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d120      	bne.n	8002ba6 <UART_SetConfig+0xce>
 8002b64:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <UART_SetConfig+0x310>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d817      	bhi.n	8002ba0 <UART_SetConfig+0xc8>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0xa0>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b95 	.word	0x08002b95
 8002b80:	08002b9b 	.word	0x08002b9b
 8002b84:	08002b8f 	.word	0x08002b8f
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
 8002b8c:	e0b5      	b.n	8002cfa <UART_SetConfig+0x222>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	75fb      	strb	r3, [r7, #23]
 8002b92:	e0b2      	b.n	8002cfa <UART_SetConfig+0x222>
 8002b94:	2304      	movs	r3, #4
 8002b96:	75fb      	strb	r3, [r7, #23]
 8002b98:	e0af      	b.n	8002cfa <UART_SetConfig+0x222>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	75fb      	strb	r3, [r7, #23]
 8002b9e:	e0ac      	b.n	8002cfa <UART_SetConfig+0x222>
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	75fb      	strb	r3, [r7, #23]
 8002ba4:	e0a9      	b.n	8002cfa <UART_SetConfig+0x222>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a90      	ldr	r2, [pc, #576]	; (8002dec <UART_SetConfig+0x314>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d124      	bne.n	8002bfa <UART_SetConfig+0x122>
 8002bb0:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <UART_SetConfig+0x310>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bbc:	d011      	beq.n	8002be2 <UART_SetConfig+0x10a>
 8002bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bc2:	d817      	bhi.n	8002bf4 <UART_SetConfig+0x11c>
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d011      	beq.n	8002bee <UART_SetConfig+0x116>
 8002bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bce:	d811      	bhi.n	8002bf4 <UART_SetConfig+0x11c>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <UART_SetConfig+0x104>
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d006      	beq.n	8002be8 <UART_SetConfig+0x110>
 8002bda:	e00b      	b.n	8002bf4 <UART_SetConfig+0x11c>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	75fb      	strb	r3, [r7, #23]
 8002be0:	e08b      	b.n	8002cfa <UART_SetConfig+0x222>
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
 8002be6:	e088      	b.n	8002cfa <UART_SetConfig+0x222>
 8002be8:	2304      	movs	r3, #4
 8002bea:	75fb      	strb	r3, [r7, #23]
 8002bec:	e085      	b.n	8002cfa <UART_SetConfig+0x222>
 8002bee:	2308      	movs	r3, #8
 8002bf0:	75fb      	strb	r3, [r7, #23]
 8002bf2:	e082      	b.n	8002cfa <UART_SetConfig+0x222>
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	75fb      	strb	r3, [r7, #23]
 8002bf8:	e07f      	b.n	8002cfa <UART_SetConfig+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	; (8002df0 <UART_SetConfig+0x318>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d124      	bne.n	8002c4e <UART_SetConfig+0x176>
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <UART_SetConfig+0x310>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002c0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c10:	d011      	beq.n	8002c36 <UART_SetConfig+0x15e>
 8002c12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c16:	d817      	bhi.n	8002c48 <UART_SetConfig+0x170>
 8002c18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c1c:	d011      	beq.n	8002c42 <UART_SetConfig+0x16a>
 8002c1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c22:	d811      	bhi.n	8002c48 <UART_SetConfig+0x170>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <UART_SetConfig+0x158>
 8002c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c2c:	d006      	beq.n	8002c3c <UART_SetConfig+0x164>
 8002c2e:	e00b      	b.n	8002c48 <UART_SetConfig+0x170>
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]
 8002c34:	e061      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c36:	2302      	movs	r3, #2
 8002c38:	75fb      	strb	r3, [r7, #23]
 8002c3a:	e05e      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	75fb      	strb	r3, [r7, #23]
 8002c40:	e05b      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c42:	2308      	movs	r3, #8
 8002c44:	75fb      	strb	r3, [r7, #23]
 8002c46:	e058      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c48:	2310      	movs	r3, #16
 8002c4a:	75fb      	strb	r3, [r7, #23]
 8002c4c:	e055      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <UART_SetConfig+0x31c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d124      	bne.n	8002ca2 <UART_SetConfig+0x1ca>
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <UART_SetConfig+0x310>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c64:	d011      	beq.n	8002c8a <UART_SetConfig+0x1b2>
 8002c66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c6a:	d817      	bhi.n	8002c9c <UART_SetConfig+0x1c4>
 8002c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c70:	d011      	beq.n	8002c96 <UART_SetConfig+0x1be>
 8002c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c76:	d811      	bhi.n	8002c9c <UART_SetConfig+0x1c4>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <UART_SetConfig+0x1ac>
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c80:	d006      	beq.n	8002c90 <UART_SetConfig+0x1b8>
 8002c82:	e00b      	b.n	8002c9c <UART_SetConfig+0x1c4>
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
 8002c88:	e037      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	75fb      	strb	r3, [r7, #23]
 8002c8e:	e034      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c90:	2304      	movs	r3, #4
 8002c92:	75fb      	strb	r3, [r7, #23]
 8002c94:	e031      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c96:	2308      	movs	r3, #8
 8002c98:	75fb      	strb	r3, [r7, #23]
 8002c9a:	e02e      	b.n	8002cfa <UART_SetConfig+0x222>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	75fb      	strb	r3, [r7, #23]
 8002ca0:	e02b      	b.n	8002cfa <UART_SetConfig+0x222>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <UART_SetConfig+0x320>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d124      	bne.n	8002cf6 <UART_SetConfig+0x21e>
 8002cac:	4b4e      	ldr	r3, [pc, #312]	; (8002de8 <UART_SetConfig+0x310>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002cb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cb8:	d011      	beq.n	8002cde <UART_SetConfig+0x206>
 8002cba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cbe:	d817      	bhi.n	8002cf0 <UART_SetConfig+0x218>
 8002cc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc4:	d011      	beq.n	8002cea <UART_SetConfig+0x212>
 8002cc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cca:	d811      	bhi.n	8002cf0 <UART_SetConfig+0x218>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <UART_SetConfig+0x200>
 8002cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd4:	d006      	beq.n	8002ce4 <UART_SetConfig+0x20c>
 8002cd6:	e00b      	b.n	8002cf0 <UART_SetConfig+0x218>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
 8002cdc:	e00d      	b.n	8002cfa <UART_SetConfig+0x222>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	75fb      	strb	r3, [r7, #23]
 8002ce2:	e00a      	b.n	8002cfa <UART_SetConfig+0x222>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	75fb      	strb	r3, [r7, #23]
 8002ce8:	e007      	b.n	8002cfa <UART_SetConfig+0x222>
 8002cea:	2308      	movs	r3, #8
 8002cec:	75fb      	strb	r3, [r7, #23]
 8002cee:	e004      	b.n	8002cfa <UART_SetConfig+0x222>
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	75fb      	strb	r3, [r7, #23]
 8002cf4:	e001      	b.n	8002cfa <UART_SetConfig+0x222>
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d02:	d17b      	bne.n	8002dfc <UART_SetConfig+0x324>
  {
    switch (clocksource)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d856      	bhi.n	8002db8 <UART_SetConfig+0x2e0>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <UART_SetConfig+0x238>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d51 	.word	0x08002d51
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002db9 	.word	0x08002db9
 8002d20:	08002d87 	.word	0x08002d87
 8002d24:	08002db9 	.word	0x08002db9
 8002d28:	08002db9 	.word	0x08002db9
 8002d2c:	08002db9 	.word	0x08002db9
 8002d30:	08002da3 	.word	0x08002da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d34:	f7fe fb92 	bl	800145c <HAL_RCC_GetPCLK1Freq>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	005a      	lsls	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	441a      	add	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	82bb      	strh	r3, [r7, #20]
        break;
 8002d4e:	e036      	b.n	8002dbe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d50:	f7ff fd24 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 8002d54:	4603      	mov	r3, r0
 8002d56:	005a      	lsls	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	82bb      	strh	r3, [r7, #20]
        break;
 8002d6a:	e028      	b.n	8002dbe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002d76:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6852      	ldr	r2, [r2, #4]
 8002d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d82:	82bb      	strh	r3, [r7, #20]
        break;
 8002d84:	e01b      	b.n	8002dbe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d86:	f7fe fb61 	bl	800144c <HAL_RCC_GetSysClockFreq>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	005a      	lsls	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	441a      	add	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	82bb      	strh	r3, [r7, #20]
        break;
 8002da0:	e00d      	b.n	8002dbe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	82bb      	strh	r3, [r7, #20]
        break;
 8002db6:	e002      	b.n	8002dbe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	74fb      	strb	r3, [r7, #19]
        break;
 8002dbc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002dbe:	8abb      	ldrh	r3, [r7, #20]
 8002dc0:	f023 030f 	bic.w	r3, r3, #15
 8002dc4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc6:	8abb      	ldrh	r3, [r7, #20]
 8002dc8:	105b      	asrs	r3, r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	897a      	ldrh	r2, [r7, #10]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	e075      	b.n	8002ece <UART_SetConfig+0x3f6>
 8002de2:	bf00      	nop
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40004400 	.word	0x40004400
 8002df0:	40004800 	.word	0x40004800
 8002df4:	40004c00 	.word	0x40004c00
 8002df8:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d862      	bhi.n	8002ec8 <UART_SetConfig+0x3f0>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <UART_SetConfig+0x330>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	08002e4d 	.word	0x08002e4d
 8002e10:	08002e6d 	.word	0x08002e6d
 8002e14:	08002ec9 	.word	0x08002ec9
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002ec9 	.word	0x08002ec9
 8002e20:	08002ec9 	.word	0x08002ec9
 8002e24:	08002ec9 	.word	0x08002ec9
 8002e28:	08002ead 	.word	0x08002ead
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e2c:	f7fe fb16 	bl	800145c <HAL_RCC_GetPCLK1Freq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60da      	str	r2, [r3, #12]
        break;
 8002e4a:	e040      	b.n	8002ece <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e4c:	f7ff fca6 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60da      	str	r2, [r3, #12]
        break;
 8002e6a:	e030      	b.n	8002ece <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6852      	ldr	r2, [r2, #4]
 8002e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
        break;
 8002e8a:	e020      	b.n	8002ece <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e8c:	f7fe fade 	bl	800144c <HAL_RCC_GetSysClockFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60da      	str	r2, [r3, #12]
        break;
 8002eaa:	e010      	b.n	8002ece <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60da      	str	r2, [r3, #12]
        break;
 8002ec6:	e002      	b.n	8002ece <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	74fb      	strb	r3, [r7, #19]
        break;
 8002ecc:	bf00      	nop
    }
  }

  return ret;
 8002ece:	7cfb      	ldrb	r3, [r7, #19]

}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002eea:	f7fe faa1 	bl	8001430 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d10e      	bne.n	8002f1c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f873 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e022      	b.n	8002f62 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d10e      	bne.n	8002f48 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f85d 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e00c      	b.n	8002f62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e039      	b.n	8002ff0 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fd95 	bl	8002ad8 <UART_SetConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e01b      	b.n	8002ff0 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff75 	bl	8002ed8 <UART_CheckIdleState>
 8002fee:	4603      	mov	r3, r0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	e02c      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d028      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <UART_WaitOnFlagUntilTimeout+0x30>
 8003018:	f7fe fa0a 	bl	8001430 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	429a      	cmp	r2, r3
 8003026:	d21d      	bcs.n	8003064 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003036:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e00f      	b.n	8003084 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	429a      	cmp	r2, r3
 8003080:	d0c3      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d177      	bne.n	800319c <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_UART_Transmit+0x2c>
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e070      	b.n	800319e <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Transmit+0x3e>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e069      	b.n	800319e <HAL_UART_Transmit+0x112>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2221      	movs	r2, #33	; 0x21
 80030dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030e0:	f7fe f9a6 	bl	8001430 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80030f6:	e034      	b.n	8003162 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ff6f 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e03c      	b.n	800319e <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312c:	d111      	bne.n	8003152 <HAL_UART_Transmit+0xc6>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003146:	b292      	uxth	r2, r2
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3302      	adds	r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	e007      	b.n	8003162 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60ba      	str	r2, [r7, #8]
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b292      	uxth	r2, r2
 8003160:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1c4      	bne.n	80030f8 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff ff3d 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e00a      	b.n	800319e <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08a      	sub	sp, #40	; 0x28
 80031aa:	af02      	add	r7, sp, #8
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	f040 809f 	bne.w	8003306 <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Receive+0x2e>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e097      	b.n	8003308 <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Receive+0x40>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e090      	b.n	8003308 <HAL_UART_Receive+0x162>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2222      	movs	r2, #34	; 0x22
 8003202:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003206:	f7fe f913 	bl	8001430 <HAL_GetTick>
 800320a:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d10e      	bne.n	8003244 <HAL_UART_Receive+0x9e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_UART_Receive+0x94>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003238:	e015      	b.n	8003266 <HAL_UART_Receive+0xc0>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003242:	e010      	b.n	8003266 <HAL_UART_Receive+0xc0>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10c      	bne.n	8003266 <HAL_UART_Receive+0xc0>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_UART_Receive+0xb8>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800325c:	e003      	b.n	8003266 <HAL_UART_Receive+0xc0>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	227f      	movs	r2, #127	; 0x7f
 8003262:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800326c:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800326e:	e03a      	b.n	80032e6 <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2200      	movs	r2, #0
 800328a:	2120      	movs	r1, #32
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff feb3 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e035      	b.n	8003308 <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a4:	d112      	bne.n	80032cc <HAL_UART_Receive+0x126>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	8b7b      	ldrh	r3, [r7, #26]
 80032bc:	4013      	ands	r3, r2
 80032be:	b29a      	uxth	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3302      	adds	r3, #2
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	e00c      	b.n	80032e6 <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	b2d9      	uxtb	r1, r3
 80032d6:	8b7b      	ldrh	r3, [r7, #26]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1c58      	adds	r0, r3, #1
 80032de:	60b8      	str	r0, [r7, #8]
 80032e0:	400a      	ands	r2, r1
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1be      	bne.n	8003270 <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <Reset_Handler>:
 8003310:	2100      	movs	r1, #0
 8003312:	e003      	b.n	800331c <LoopCopyDataInit>

08003314 <CopyDataInit>:
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <LoopForever+0x2>)
 8003316:	585b      	ldr	r3, [r3, r1]
 8003318:	5043      	str	r3, [r0, r1]
 800331a:	3104      	adds	r1, #4

0800331c <LoopCopyDataInit>:
 800331c:	480a      	ldr	r0, [pc, #40]	; (8003348 <LoopForever+0x6>)
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <LoopForever+0xa>)
 8003320:	1842      	adds	r2, r0, r1
 8003322:	429a      	cmp	r2, r3
 8003324:	d3f6      	bcc.n	8003314 <CopyDataInit>
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <LoopForever+0xe>)
 8003328:	e002      	b.n	8003330 <LoopFillZerobss>

0800332a <FillZerobss>:
 800332a:	2300      	movs	r3, #0
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	3204      	adds	r2, #4

08003330 <LoopFillZerobss>:
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <LoopForever+0x12>)
 8003332:	429a      	cmp	r2, r3
 8003334:	d3f9      	bcc.n	800332a <FillZerobss>
 8003336:	f3af 8000 	nop.w
 800333a:	f7fc ff69 	bl	8000210 <__libc_init_array>
 800333e:	f7fd fc97 	bl	8000c70 <main>

08003342 <LoopForever>:
 8003342:	e7fe      	b.n	8003342 <LoopForever>
 8003344:	08003398 	.word	0x08003398
 8003348:	20000000 	.word	0x20000000
 800334c:	20003d94 	.word	0x20003d94
 8003350:	20003d94 	.word	0x20003d94
 8003354:	20003f30 	.word	0x20003f30

08003358 <BusFault_Handler>:
 8003358:	e7fe      	b.n	8003358 <BusFault_Handler>
 800335a:	0000      	movs	r0, r0

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
